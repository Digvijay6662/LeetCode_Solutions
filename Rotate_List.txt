61. Rotate List
Medium
8.4K
1.4K
Companies
Given the head of a linked list, rotate the list to the right by k places.

 

Example 1:


Input: head = [1,2,3,4,5], k = 2
Output: [4,5,1,2,3]
Example 2:


Input: head = [0,1,2], k = 4
Output: [2,0,1]
 

Constraints:

The number of nodes in the list is in the range [0, 500].
-100 <= Node.val <= 100
0 <= k <= 2 * 109


Solution 1:

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def rotateRight(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:
        if not head:
            return None

        curr = head
        n = 0

        while curr:
            curr = curr.next
            n += 1

        n = k % n

        if n == 0:
            return head

        left = right = head

        while n:
            right = right.next
            n -= 1

        while right.next:
            right = right.next
            left = left.next

        right.next = head
        head = left.next
        left.next = None

        return head


Solution 2:

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def rotateRight(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:
        if not head or k == 0:
            return head

        length = 1
        curr = head

        while curr.next:
            length += 1
            curr = curr.next

        k %= length

        if k == 0:
            return head

        curr.next = head

        steps = length - k - 1
        newHead = head

        for _ in range(steps):
            newHead = newHead.next

        head = newHead.next
        newHead.next = None

        return head