3312. Sorted GCD Pair Queries
Solved
Hard
Topics
Companies
Hint
You are given an integer array nums of length n and an integer array queries.

Let gcdPairs denote an array obtained by calculating the 
GCD
 of all possible pairs (nums[i], nums[j]), where 0 <= i < j < n, and then sorting these values in ascending order.

For each query queries[i], you need to find the element at index queries[i] in gcdPairs.

Return an integer array answer, where answer[i] is the value at gcdPairs[queries[i]] for each query.

The term gcd(a, b) denotes the greatest common divisor of a and b.

 

Example 1:

Input: nums = [2,3,4], queries = [0,2,2]

Output: [1,2,2]

Explanation:

gcdPairs = [gcd(nums[0], nums[1]), gcd(nums[0], nums[2]), gcd(nums[1], nums[2])] = [1, 2, 1].

After sorting in ascending order, gcdPairs = [1, 1, 2].

So, the answer is [gcdPairs[queries[0]], gcdPairs[queries[1]], gcdPairs[queries[2]]] = [1, 2, 2].

Example 2:

Input: nums = [4,4,2,1], queries = [5,3,1,0]

Output: [4,2,1,1]

Explanation:

gcdPairs sorted in ascending order is [1, 1, 1, 2, 2, 4].

Example 3:

Input: nums = [2,2], queries = [0,0]

Output: [2,2]

Explanation:

gcdPairs = [2].

 

Constraints:

2 <= n == nums.length <= 105
1 <= nums[i] <= 5 * 104
1 <= queries.length <= 105
0 <= queries[i] < n * (n - 1) / 2


Solution 1:

class Solution:
    def gcdValues(self, nums: List[int], queries: List[int]) -> List[int]:
        n = len(nums)
        max_val = max(nums)
        
        # Step 1: Calculate the frequency of each number in the `nums` list
        freq = [0] * (max_val + 1)
        for num in nums:
            freq[num] += 1

        # Step 2: Calculate the count of pairs that result in a GCD of a specific value
        pair_count = [0] * (max_val + 1)
        
        # Calculate the number of pairs with GCD `gcd_val`
        for gcd_val in range(1, max_val + 1):
            count = 0
            # Check multiples of gcd_val
            for multiple in range(gcd_val, max_val + 1, gcd_val):
                count += freq[multiple]
                
            # Calculate number of pairs using the formula nC2 = n * (n - 1) // 2
            if count > 1:
                pair_count[gcd_val] = count * (count - 1) // 2

        # Step 3: Adjust pair count using Inclusion-Exclusion Principle
        for gcd_val in range(max_val, 0, -1):
            for multiple in range(2 * gcd_val, max_val + 1, gcd_val):
                pair_count[gcd_val] -= pair_count[multiple]

        # Step 4: Calculate the cumulative count of pairs for each GCD value
        cumulative_pairs = [0] * (max_val + 1)
        for i in range(1, max_val + 1):
            cumulative_pairs[i] = cumulative_pairs[i - 1] + pair_count[i]

        # Step 5: Use binary search to answer each query
        result = []
        for q in queries:
            idx = bisect_left(cumulative_pairs, q + 1)
            result.append(idx)
            
        return result


Solution 2:

class Solution:
    def gcdValues(self, nums: List[int], queries: List[int]) -> List[int]:
        max_val = max(nums)
        divisors_count = [0] * (max_val + 1)

        for num in nums:
            for i in range(1, int(num ** 0.5) + 1):
                if num % i == 0:
                    divisors_count[i] += 1
                    if i != num // i:
                        divisors_count[num // i] += 1

        gcd_count = [0] * (max_val + 1)
        for gcd in range(max_val, 0, -1):
            count = divisors_count[gcd]
            gcd_count[gcd] = count * (count - 1) // 2
            for multiple in range(2 * gcd, max_val + 1, gcd):
                gcd_count[gcd] -= gcd_count[multiple]

        prefix_count = [0] * (max_val + 1)
        for i in range(1, max_val + 1):
            prefix_count[i] = prefix_count[i - 1] + gcd_count[i]

        result = []
        for q in queries:
            idx = bisect_left(prefix_count, q + 1)
            result.append(idx)
            
        return result