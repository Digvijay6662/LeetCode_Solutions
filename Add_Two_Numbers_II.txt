445. Add Two Numbers II
Medium
5.1K
257
Companies
You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

 

Example 1:


Input: l1 = [7,2,4,3], l2 = [5,6,4]
Output: [7,8,0,7]
Example 2:

Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [8,0,7]
Example 3:

Input: l1 = [0], l2 = [0]
Output: [0]
 

Constraints:

The number of nodes in each linked list is in the range [1, 100].
0 <= Node.val <= 9
It is guaranteed that the list represents a number that does not have leading zeros.
 

Follow up: Could you solve it without reversing the input lists?


Solution 1:

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:

        def helper(curr):
            num = []
            while curr:
                num.append(curr.val)
                curr = curr.next
            return num

        n1 = helper(l1)
        n2 = helper(l2)

        maxL = max(len(n1), len(n2))
        n1 = [0] * (maxL - len(n1)) + n1
        n2 = [0] * (maxL - len(n2)) + n2

        carry = 0
        head = ListNode()
        temp = head

        for i in range(maxL - 1, -1, -1):
            total = n1[i] + n2[i] + carry
            carry = total // 10
            temp.val = total % 10

            if i > 0:
                temp.next = ListNode()
                temp = temp.next

        if carry > 0:
            temp.next = ListNode(carry)

        def reverse(head):
            prev = None
            while head:
                temp = head.next
                head.next = prev
                prev = head
                head = temp
            return prev


Solution 3:

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:

        def reverse(head):
            prev = None
            while head:
                temp = head.next
                head.next = prev
                prev = head
                head = temp
            return prev

        l1 = reverse(l1)
        l2 = reverse(l2)
        
        carry = 0
        res = ListNode()

        while l1 or l2:
            val1 = l1.val if l1 else 0
            val2 = l2.val if l2 else 0

            total = val1 + val2 + carry
            carry = total // 10
            res.val = total % 10
            temp = ListNode(carry)
            temp.next = res
            res = temp

            if l1:
                l1 = l1.next
            if l2:
                l2 = l2.next

        return res if carry else res.next



Solution 4:

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:

        def helper(curr):
            stack = []
            while curr:
                stack.append(curr.val)
                curr = curr.next

            return stack


        s1 = helper(l1)
        s2 = helper(l2)

        res = ListNode()
        carry = 0
        total = 0

        while s1 or s2:
            if s1:
                total += s1.pop()
            if s2:
                total += s2.pop()
           
            res.val = total % 10
            carry = total //10
            temp = ListNode(carry)
            temp.next = res
            res = temp
            total = carry
    
        return res if carry else res.next



        return reverse(head)


Solution 2:


# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:

        def reverse(head):
            prev = None
            while head:
                temp = head.next
                head.next = prev
                prev = head
                head = temp
            return prev

        l1 = reverse(l1)
        l2 = reverse(l2)
        
        carry = 0
        dummy = ListNode()
        curr = dummy

        while l1 or l2 or carry:
            val1 = l1.val if l1 else 0
            val2 = l2.val if l2 else 0

            total = val1 + val2 + carry
            carry = total // 10
            curr.next = ListNode(total % 10)

            if l1:
                l1 = l1.next
            if l2:
                l2 = l2.next

            curr = curr.next
        
        return reverse(dummy.next)