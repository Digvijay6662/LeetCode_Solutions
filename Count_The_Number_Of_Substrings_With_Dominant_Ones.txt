3234. Count the Number of Substrings With Dominant Ones
Solved
Medium
Companies
Hint
You are given a binary string s.

Return the number of 
substrings
 with dominant ones.

A string has dominant ones if the number of ones in the string is greater than or equal to the square of the number of zeros in the string.

 

Example 1:

Input: s = "00011"

Output: 5

Explanation:

The substrings with dominant ones are shown in the table below.

i	j	s[i..j]	Number of Zeros	Number of Ones
3	3	1	0	1
4	4	1	0	1
2	3	01	1	1
3	4	11	0	2
2	4	011	1	2
Example 2:

Input: s = "101101"

Output: 16

Explanation:

The substrings with non-dominant ones are shown in the table below.

Since there are 21 substrings total and 5 of them have non-dominant ones, it follows that there are 16 substrings with dominant ones.

i	j	s[i..j]	Number of Zeros	Number of Ones
1	1	0	1	0
4	4	0	1	0
1	4	0110	2	2
0	4	10110	2	3
1	5	01101	2	3
 

Constraints:

1 <= s.length <= 4 * 104
s consists only of characters '0' and '1'.


Solution 1:

class Solution:
    def numberOfSubstrings(self, s: str) -> int:
        n = len(s)
        zero_idx = []

        for i in range(n):
            if s[i] == '0':
                zero_idx.append(i)

        if len(zero_idx) == 0:
            return n * (n + 1) // 2

        result = z = 0
        for l in range(n):
            while z < len(zero_idx) and zero_idx[z] < l:
                z += 1

            valid_zero_idx = []
            for t in range(z, min(len(zero_idx), z + 201)):
                valid_zero_idx.append(zero_idx[t])
            valid_zero_idx.append(n)

            last_zero = l
            curr_zeros = 0
            for r in valid_zero_idx:
                min_ones_req = curr_zeros * curr_zeros
                min_idx = max(l + curr_zeros + min_ones_req - 1, last_zero)
                if min_idx < r:
                    result += r - min_idx
                curr_zeros += 1
                last_zero = r
        
        return result


Solution 2:

class Solution:
    def numberOfSubstrings(self, s: str) -> int:
        n = len(s)
        zero_idx = []

        for i in range(n):
            if s[i] == '0':
                zero_idx.append(i)
        zero_idx.append(n)

        if len(zero_idx) == 0:
            return n * (n + 1) // 2

        result = z = 0
        for l in range(n):
            while z < len(zero_idx) and zero_idx[z] < l:
                z += 1

            last_zero = l
            curr_zeros = 0
            for r in range(z, min(len(zero_idx), z + 201)):
                idx = zero_idx[r]
                min_ones_req = curr_zeros * curr_zeros
                min_idx = max(l + curr_zeros + min_ones_req - 1, last_zero)
                if min_idx < idx:
                    result += idx - min_idx
                curr_zeros += 1
                last_zero = idx
        
        return result