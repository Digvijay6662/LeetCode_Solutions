3288. Length of the Longest Increasing Path
Solved
Hard
Companies
Hint
You are given a 2D array of integers coordinates of length n and an integer k, where 0 <= k < n.

coordinates[i] = [xi, yi] indicates the point (xi, yi) in a 2D plane.

An increasing path of length m is defined as a list of points (x1, y1), (x2, y2), (x3, y3), ..., (xm, ym) such that:

xi < xi + 1 and yi < yi + 1 for all i where 1 <= i < m.
(xi, yi) is in the given coordinates for all i where 1 <= i <= m.
Return the maximum length of an increasing path that contains coordinates[k].

 

Example 1:

Input: coordinates = [[3,1],[2,2],[4,1],[0,0],[5,3]], k = 1

Output: 3

Explanation:

(0, 0), (2, 2), (5, 3) is the longest increasing path that contains (2, 2).

Example 2:

Input: coordinates = [[2,1],[7,0],[5,6]], k = 2

Output: 2

Explanation:

(2, 1), (5, 6) is the longest increasing path that contains (5, 6).

 

Constraints:

1 <= n == coordinates.length <= 105
coordinates[i].length == 2
0 <= coordinates[i][0], coordinates[i][1] <= 109
All elements in coordinates are distinct.
0 <= k <= n - 1


Solution 1:

class Solution:
    def maxPathLength(self, coordinates: List[List[int]], k: int) -> int:
        n = len(coordinates)
        x, y = coordinates[k]

        coordinates.sort(key=lambda p: (p[0], -p[1]))
        left, right = [], []

        for x1, y1 in coordinates:
            if x1 < x and y1 < y:
                left.append(y1)
            elif x1 > x and y1 > y:
                right.append(y1)

        def findLIS(arr):
            lis = []
            for num in arr:
                idx = bisect_left(lis, num)
                if idx == len(lis):
                    lis.append(num)
                else:
                    lis[idx] = num
            return len(lis)

        left_len, right_len = findLIS(left), findLIS(right)

        return left_len + right_len + 1