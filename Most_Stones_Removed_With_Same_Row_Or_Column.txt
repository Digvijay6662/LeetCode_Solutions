947. Most Stones Removed with Same Row or Column
Medium
5.1K
630
Companies
On a 2D plane, we place n stones at some integer coordinate points. Each coordinate point may have at most one stone.

A stone can be removed if it shares either the same row or the same column as another stone that has not been removed.

Given an array stones of length n where stones[i] = [xi, yi] represents the location of the ith stone, return the largest possible number of stones that can be removed.

 

Example 1:

Input: stones = [[0,0],[0,1],[1,0],[1,2],[2,1],[2,2]]
Output: 5
Explanation: One way to remove 5 stones is as follows:
1. Remove stone [2,2] because it shares the same row as [2,1].
2. Remove stone [2,1] because it shares the same column as [0,1].
3. Remove stone [1,2] because it shares the same row as [1,0].
4. Remove stone [1,0] because it shares the same column as [0,0].
5. Remove stone [0,1] because it shares the same row as [0,0].
Stone [0,0] cannot be removed since it does not share a row/column with another stone still on the plane.
Example 2:

Input: stones = [[0,0],[0,2],[1,1],[2,0],[2,2]]
Output: 3
Explanation: One way to make 3 moves is as follows:
1. Remove stone [2,2] because it shares the same row as [2,0].
2. Remove stone [2,0] because it shares the same column as [0,0].
3. Remove stone [0,2] because it shares the same row as [0,0].
Stones [0,0] and [1,1] cannot be removed since they do not share a row/column with another stone still on the plane.
Example 3:

Input: stones = [[0,0]]
Output: 0
Explanation: [0,0] is the only stone on the plane, so you cannot remove it.
 

Constraints:

1 <= stones.length <= 1000
0 <= xi, yi <= 104
No two stones are at the same coordinate point.


Solution 1:

class Solution:
    def removeStones(self, stones: List[List[int]]) -> int:
        n = len(stones)

        def dfs(i):
            visited.add(i)
            for j in range(n):
                if j not in visited and \
                (stones[i][0] == stones[j][0] or stones[i][1] == stones[j][1]):
                    dfs(j)

        visited = set()
        components = 0

        for i in range(n):
            if i in visited:
                continue
            dfs(i)
            components += 1

        return n - components


Solution 2:

class DSU:
    def __init__(self, n):
        self.parent = [i for i in range(n)]
        self.rank = [1] * n

    def find(self, node):
        while node != self.parent[node]:
            self.parent[node] = self.parent[self.parent[node]]
            node = self.parent[node]

        return node

    def union(self, n1, n2):
        p1, p2 = self.find(n1), self.find(n2)
        if p1 == p2:
            return False

        if self.rank[p1] > self.rank[p2]:
            self.parent[p2] = p1
            self.rank[p1] += self.rank[p2]
        else:
            self.parent[p1] = p2
            self.rank[p2] += self.rank[p1]

        return True

class Solution:
    def removeStones(self, stones: List[List[int]]) -> int:
        n = len(stones)
        maxRow = 0
        maxCol = 0

        for r, c in stones:
            maxRow = max(maxRow, r)
            maxCol = max(maxCol, c)

        dsu = DSU(maxRow + maxCol + 2)
        stoneNode = {}

        for r, c in stones:
            dsu.union(r, c + maxRow + 1)
            stoneNode[r] = 1
            stoneNode[c + maxRow + 1] = 1

        components = 0

        for i in stoneNode:
            if dsu.find(i) == i:
                components += 1

        return n - components


Solution 3:

class UnionFind:
    def __init__(self, n):
        self.parent = [i for i in range(n)]
        self.size = [1] * n
        self.component_count = n

    def find(self, node):
        while node != self.parent[node]:
            self.parent[node] = self.parent[self.parent[node]]
            node = self.parent[node]
        return node

    def union(self, node1, node2):
        p1, p2 = self.find(node1), self.find(node2)
        if p1 == p2:
            return False

        if self.size[p1] > self.size[p2]:
            self.parent[p2] = p1
            self.size[p1] += self.size[p2]
        else:
            self.parent[p1] = p2
            self.size[p2] += self.size[p1]

        self.component_count -= 1
        return True

class Solution:
    def removeStones(self, stones: List[List[int]]) -> int:
        n = len(stones)
        uf = UnionFind(n)

        rows = defaultdict(set)
        cols = defaultdict(set)

        for i in range(n):
            x, y = stones[i]
            for j in rows[x]:
                uf.union(i, j)
            for j in cols[y]:
                uf.union(i, j)

            rows[x].add(i)
            cols[y].add(i)

        return n - uf.component_count