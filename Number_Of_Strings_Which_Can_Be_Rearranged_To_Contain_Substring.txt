2930. Number of Strings Which Can Be Rearranged to Contain Substring
Medium
Companies
Hint
You are given an integer n.

A string s is called good if it contains only lowercase English characters and it is possible to rearrange the characters of s such that the new string contains "leet" as a substring.

For example:

The string "lteer" is good because we can rearrange it to form "leetr" .
"letl" is not good because we cannot rearrange it to contain "leet" as a substring.
Return the total number of good strings of length n.

Since the answer may be large, return it modulo 109 + 7.

A substring is a contiguous sequence of characters within a string.

 
 

Example 1:

Input: n = 4
Output: 12
Explanation: The 12 strings which can be rearranged to have "leet" as a substring are: "eelt", "eetl", "elet", "elte", "etel", "etle", "leet", "lete", "ltee", "teel", "tele", and "tlee".
Example 2:

Input: n = 10
Output: 83943898
Explanation: The number of strings with length 10 which can be rearranged to have "leet" as a substring is 526083947580. Hence the answer is 526083947580 % (109 + 7) = 83943898.
 

Constraints:

1 <= n <= 105


Solution 1:


class Solution:
    def stringCount(self, n: int) -> int:
        if n < 4:
            return 0

        mod = 1000000007
        # total combination:
        total_ways = (pow(26, n, mod)) % mod
        
        # l = 0
        sub = (pow(25, n, mod)) % mod
        # t = 0
        sub += (pow(25, n, mod)) % mod
        # e = 0, 1
        sub += (pow(25, n, mod) + n * pow(25, n-1, mod)) % mod
        # l = 0, t = 0
        sub -= (pow(24, n, mod)) % mod
        # l = 0, e < 2
        sub -= (pow(24, n, mod) + n * pow(24, n-1, mod)) % mod
        # t = 0, e < 2
        sub -= (pow(24, n, mod) + n * pow(24, n-1, mod)) % mod
        # l = 0, t = 0, e < 2
        sub += (pow(23, n, mod) + n * pow(23, n-1, mod)) % mod
        
        return (total_ways - sub) % mod


Solution 2:

class Solution:
    def stringCount(self, n: int) -> int:

        def custom_pow(base, exponent, mod):
            result = 1

            while exponent > 0:
                if exponent % 2 == 1:
                    result = (result * base) % mod
                base = (base * base) % mod
                exponent //= 2

            return result

        if n < 4:
            return 0

        mod = 1000000007
        # total combination:
        total_ways = custom_pow(26, n, mod)
        
        # l = 0
        sub = custom_pow(25, n, mod)
        # t = 0
        sub += custom_pow(25, n, mod)
        # e = 0, 1
        sub += (custom_pow(25, n, mod) + n * custom_pow(25, n-1, mod)) % mod
        # l = 0, t = 0
        sub -= custom_pow(24, n, mod)
        # l = 0, e < 2
        sub -= (custom_pow(24, n, mod) + n * custom_pow(24, n-1, mod)) % mod
        # t = 0, e < 2
        sub -= (custom_pow(24, n, mod) + n * custom_pow(24, n-1, mod)) % mod
        # l = 0, t = 0, e < 2
        sub += (custom_pow(23, n, mod) + n * custom_pow(23, n-1, mod)) % mod
        
        return (total_ways - sub) % mod