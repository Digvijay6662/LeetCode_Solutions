542. 01 Matrix
Medium
8.3K
368
Companies
Given an m x n binary matrix mat, return the distance of the nearest 0 for each cell.

The distance between two adjacent cells is 1.

 

Example 1:


Input: mat = [[0,0,0],[0,1,0],[0,0,0]]
Output: [[0,0,0],[0,1,0],[0,0,0]]
Example 2:


Input: mat = [[0,0,0],[0,1,0],[1,1,1]]
Output: [[0,0,0],[0,1,0],[1,2,1]]
 

Constraints:

m == mat.length
n == mat[i].length
1 <= m, n <= 104
1 <= m * n <= 104
mat[i][j] is either 0 or 1.
There is at least one 0 in mat.


Solution 1:

class Solution:
    def updateMatrix(self, mat: List[List[int]]) -> List[List[int]]:
        m, n = len(mat), len(mat[0])
        directions = ((0, 1), (0, -1), (-1, 0), (1, 0))
        
        q = deque()

        for i in range(m):
            for j in range(n):
                if mat[i][j] == 0:
                    q.append((i, j))
                else:
                    mat[i][j] = -1

        while q:
            r, c = q.popleft()
            for dr, dc in directions:
                nr, nc = r + dr, c + dc
                if 0 <= nr < m and 0 <= nc < n and mat[nr][nc] == -1:
                    mat[nr][nc] = mat[r][c] + 1
                    q.append((nr, nc))
        
        return mat


Solution 2:

class Solution:
    def updateMatrix(self, mat: List[List[int]]) -> List[List[int]]:
        m, n = len(mat), len(mat[0])
        directions = ((0, 1), (0, -1), (-1, 0), (1, 0))
        matrix = [[0] * n for _ in range(m)]
        q = deque()

        for i in range(m):
            for j in range(n):
                if mat[i][j] == 0:
                    q.append((i, j))
                else:
                    matrix[i][j] = -1

        while q:
            r, c = q.popleft()
            for dr, dc in directions:
                nr, nc = r + dr, c + dc
                if 0 <= nr < m and 0 <= nc < n and matrix[nr][nc] == -1:
                    matrix[nr][nc] = matrix[r][c] + 1
                    q.append((nr, nc))
        
        return matrix


Solution 3:

class Solution:
    def updateMatrix(self, mat: List[List[int]]) -> List[List[int]]:
        m, n = len(mat), len(mat[0])
        directions = ((0, 1), (0, -1), (-1, 0), (1, 0))
        dp = [[0] * n for _ in range(m)]

        for i in range(m):
            for j in range(n):
                if mat[i][j] != 0:
                    dist = float('inf')
                    if i > 0:
                        dist = min(dist, dp[i - 1][j] + 1)
                    if j > 0:
                        dist = min(dist, dp[i][j - 1] + 1) 
                    dp[i][j] = dist


        for i in range(m - 1, -1, -1):
            for j in range(n - 1, - 1, -1):
                if mat[i][j] != 0:
                    if i < m - 1:
                        dp[i][j] = min(dp[i][j], dp[i + 1][j] + 1)
                    if j < n - 1:
                        dp[i][j] = min(dp[i][j], dp[i][j + 1] + 1)

        return dp
