1239. Maximum Length of a Concatenated String with Unique Characters
Solved
Medium
Topics
Companies
Hint
You are given an array of strings arr. A string s is formed by the concatenation of a subsequence of arr that has unique characters.

Return the maximum possible length of s.

A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.

 

Example 1:

Input: arr = ["un","iq","ue"]
Output: 4
Explanation: All the valid concatenations are:
- ""
- "un"
- "iq"
- "ue"
- "uniq" ("un" + "iq")
- "ique" ("iq" + "ue")
Maximum length is 4.
Example 2:

Input: arr = ["cha","r","act","ers"]
Output: 6
Explanation: Possible longest valid concatenations are "chaers" ("cha" + "ers") and "acters" ("act" + "ers").
Example 3:

Input: arr = ["abcdefghijklmnopqrstuvwxyz"]
Output: 26
Explanation: The only string in arr has all 26 characters.
 

Constraints:

1 <= arr.length <= 16
1 <= arr[i].length <= 26
arr[i] contains only lowercase English letters.


Solution 1:

class Solution:
    def maxLength(self, arr: List[str]) -> int:
        
        def is_unique(combination):
            return len(combination) == len(set(combination))

        def backtrack(start, current):
            nonlocal max_length
            if is_unique(current):
                max_length = max(max_length, len(current))

            for i in range(start, len(arr)):
                backtrack(i + 1, current + arr[i])

        max_length = 0
        backtrack(0, "")
        return max_length


Solution 2:

class Solution:
    def maxLength(self, arr: List[str]) -> int:
        n = len(arr)
        max_length = 0

        for mask in range(1 << n):
            seen = set()
            isValid = True
            curr_size = 0

            for i in range(n):
                if (mask >> i) & 1 == 0:
                    continue

                for c in arr[i]:
                    if c in seen:
                        isValid = False
                        break
                    seen.add(c)
                    curr_size += 1

                if not isValid:
                    break

            if isValid and curr_size > max_length:
                max_length = curr_size

        return max_length