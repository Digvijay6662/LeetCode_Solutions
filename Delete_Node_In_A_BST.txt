450. Delete Node in a BST
Medium
7.5K
193
Companies
Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.

Basically, the deletion can be divided into two stages:

Search for a node to remove.
If the node is found, delete the node.
 

Example 1:


Input: root = [5,3,6,2,4,null,7], key = 3
Output: [5,4,6,2,null,null,7]
Explanation: Given key to delete is 3. So we find the node with value 3 and delete it.
One valid answer is [5,4,6,2,null,null,7], shown in the above BST.
Please notice that another valid answer is [5,2,6,null,4,null,7] and it's also accepted.

Example 2:

Input: root = [5,3,6,2,4,null,7], key = 0
Output: [5,3,6,2,4,null,7]
Explanation: The tree does not contain a node with value = 0.
Example 3:

Input: root = [], key = 0
Output: []
 

Constraints:

The number of nodes in the tree is in the range [0, 104].
-105 <= Node.val <= 105
Each node has a unique value.
root is a valid binary search tree.
-105 <= key <= 105
 

Follow up: Could you solve it with time complexity O(height of tree)?

Solution:

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def deleteNode(self, root: Optional[TreeNode], key: int) -> Optional[TreeNode]:

        if not root:
            return None

        if key < root.val:
            root.left = self.deleteNode(root.left, key)
        elif key > root.val:
            root.right = self.deleteNode(root.right, key)
        else:
            if not root.right:
                return root.left
            elif not root.left:
                return root.right
            else:
                curr = root.right

                while curr.left:
                    curr = curr.left
                
                root.val = curr.val
                root.right = self.deleteNode(root.right, curr.val)


        return root
            

Solution 2:


# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def deleteNode(self, root: Optional[TreeNode], key: int) -> Optional[TreeNode]:

        if not root:
            return None

        parent = None
        node = root

        while node:
            if key < node.val:
                parent = node
                node = node.left
            elif key > node.val:
                parent = node
                node = node.right
            else:
                if not node.right:
                    if not parent:
                        return node.left

                    if parent.left == node:
                        parent.left = node.left
                    else:
                        parent.right = node.left
                    return root

                if not node.left:
                    if not parent:
                        return node.right

                    if parent.left == node:
                        parent.left = node.right
                    else:
                        parent.right = node.right
                    return root

                curr = node.right
                currParent = node

                while curr.left:
                    currParent = curr
                    curr = curr.left

                node.val = curr.val

                if currParent.left == curr:
                    currParent.left = curr.right
                else:
                    currParent.right = curr.right

                return root

        return root


Solution 3:

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def deleteNode(self, root: Optional[TreeNode], key: int) -> Optional[TreeNode]:

        def helper(node):
            if not node.left:
                return node.right
            
            if not node.right:
                return node.left

            leftChild = node.left
            lastLeft = findLastChild(node.right)
            lastLeft.left = leftChild

            return node.right

        def findLastChild(node):
            while node.left:
                node = node.left   
            return node

                
        if not root:
            return None

        if root.val == key:
            return helper(root)

        dummy = root

        while root:
            if root.val > key:
                if root.left and root.left.val == key:
                    root.left = helper(root.left)
                    break
                else:
                    root = root.left
            else:
                if root.right and root.right.val == key:
                    root.right = helper(root.right)
                    break
                else:
                    root = root.right

        return dummy

    
            