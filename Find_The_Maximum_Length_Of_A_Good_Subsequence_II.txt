3177. Find the Maximum Length of a Good Subsequence II
Solved
Hard
Topics
Companies
Hint
You are given an integer array nums and a non-negative integer k. A sequence of integers seq is called good if there are at most k indices i in the range [0, seq.length - 2] such that seq[i] != seq[i + 1].

Return the maximum possible length of a good 
subsequence
 of nums.

 

Example 1:

Input: nums = [1,2,1,1,3], k = 2

Output: 4

Explanation:

The maximum length subsequence is [1,2,1,1,3].

Example 2:

Input: nums = [1,2,3,4,5,1], k = 0

Output: 2

Explanation:

The maximum length subsequence is [1,2,3,4,5,1].

 

Constraints:

1 <= nums.length <= 5 * 103
1 <= nums[i] <= 109
0 <= k <= min(50, nums.length)


Solution 1:

class Solution:
    def maximumLength(self, nums: List[int], k: int) -> int:
        n = len(nums)
        dp = [[0] * (k + 1) for _ in range(n)]

        for j in range(k + 1):
            max_length = defaultdict(int)
            max_length_prev_j = 0
            for i in range(n):
                ans = 1
                ans = max(ans, 1 + max_length[nums[i]])
                ans = max(ans, 1 + max_length_prev_j)
                dp[i][j] = ans
                max_length[nums[i]] = max(max_length[nums[i]], ans)
                if j > 0:
                    max_length_prev_j = max(max_length_prev_j, dp[i][j - 1])

        result = 0
        for i in range(n):
            result = max(result, dp[i][k])

        return result