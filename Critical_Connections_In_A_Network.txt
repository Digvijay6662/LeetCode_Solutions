1192. Critical Connections in a Network
Hard
5.9K
174
Companies
There are n servers numbered from 0 to n - 1 connected by undirected server-to-server connections forming a network where connections[i] = [ai, bi] represents a connection between servers ai and bi. Any server can reach other servers directly or indirectly through the network.

A critical connection is a connection that, if removed, will make some servers unable to reach some other server.

Return all critical connections in the network in any order.

 

Example 1:


Input: n = 4, connections = [[0,1],[1,2],[2,0],[1,3]]
Output: [[1,3]]
Explanation: [[3,1]] is also accepted.
Example 2:

Input: n = 2, connections = [[0,1]]
Output: [[0,1]]
 

Constraints:

2 <= n <= 105
n - 1 <= connections.length <= 105
0 <= ai, bi <= n - 1
ai != bi
There are no repeated connections.


Solution 1:

class Solution:
    def criticalConnections(self, n: int, connections: List[List[int]]) -> List[List[int]]:
        time = [0] * n
        low = [0] * n
        res = []
        graph = defaultdict(list)

        for src, dest in connections:
            graph[src].append(dest)
            graph[dest].append(src)

        cur_time = 0
        def dfs(node, par):
            nonlocal cur_time
            time[node] = cur_time
            low[node] = cur_time
            cur_time += 1

            for nei in graph[node]:
                if nei == par:
                    continue

                if time[nei] == 0:
                    dfs(nei, node)
                    low[node] = min(low[node], low[nei])

                    if low[nei] > time[node]:
                        res.append([node, nei])
                else:
                    low[node] = min(low[node], time[nei])


        dfs(0, -1)

        return res


Solution 2:

class Solution:
    def criticalConnections(self, n: int, connections: List[List[int]]) -> List[List[int]]:
        graph = defaultdict(list)
        for u, v in connections:
            graph[u].append(v)
            graph[v].append(u)
        
        visited = [False] * n
        disc = [float('inf')] * n
        low = [float('inf')] * n
        parent = [-1] * n
        time = 0
        res = []
        
        def dfs(u):
            nonlocal time
            children = 0
            disc[u] = time
            low[u] = time
            time += 1
            
            for v in graph[u]:
                if not visited[v]:
                    children += 1
                    visited[v] = True
                    parent[v] = u
                    dfs(v)
                    low[u] = min(low[u], low[v])
                    
                    if low[v] > disc[u]:
                        res.append([u, v])
                elif parent[u] != v:
                    low[u] = min(low[u], disc[v])
                    
        visited[0] = True
        dfs(0)
        
        return res


Solution 3:


class Solution:
    def criticalConnections(self, n: int, connections: List[List[int]]) -> List[List[int]]:
        def buildGraph(connections):
            graph = defaultdict(list)
            for conn in connections:
                graph[conn[0]].append(conn[1])
                graph[conn[1]].append(conn[0])
            return graph

        graph = buildGraph(connections)
        connections = set(tuple(sorted(connection)) for connection in connections)
        rank = [-2] * n

        def dfs(node, depth):
            nonlocal connections
            if rank[node] >= 0:
                return rank[node]
            rank[node] = depth
            min_back_depth = n
            for neighbor in graph[node]:
                if rank[neighbor] == depth - 1:
                    continue

                back_depth = dfs(neighbor, depth + 1)
                if back_depth <= depth:
                    connections.discard(tuple(sorted((node, neighbor))))
                min_back_depth = min(min_back_depth, back_depth)
            return min_back_depth
            
        dfs(0, 0)
        return list(connections)