3244. Shortest Distance After Road Addition Queries II
Solved
Hard
Topics
Companies
You are given an integer n and a 2D integer array queries.

There are n cities numbered from 0 to n - 1. Initially, there is a unidirectional road from city i to city i + 1 for all 0 <= i < n - 1.

queries[i] = [ui, vi] represents the addition of a new unidirectional road from city ui to city vi. After each query, you need to find the length of the shortest path from city 0 to city n - 1.

There are no two queries such that queries[i][0] < queries[j][0] < queries[i][1] < queries[j][1].

Return an array answer where for each i in the range [0, queries.length - 1], answer[i] is the length of the shortest path from city 0 to city n - 1 after processing the first i + 1 queries.

 

Example 1:

Input: n = 5, queries = [[2,4],[0,2],[0,4]]

Output: [3,2,1]

Explanation:



After the addition of the road from 2 to 4, the length of the shortest path from 0 to 4 is 3.



After the addition of the road from 0 to 2, the length of the shortest path from 0 to 4 is 2.



After the addition of the road from 0 to 4, the length of the shortest path from 0 to 4 is 1.

Example 2:

Input: n = 4, queries = [[0,3],[0,2]]

Output: [1,1]

Explanation:



After the addition of the road from 0 to 3, the length of the shortest path from 0 to 3 is 1.



After the addition of the road from 0 to 2, the length of the shortest path remains 1.

 

Constraints:

3 <= n <= 105
1 <= queries.length <= 105
queries[i].length == 2
0 <= queries[i][0] < queries[i][1] < n
1 < queries[i][1] - queries[i][0]
There are no repeated roads among the queries.
There are no two queries such that i != j and queries[i][0] < queries[j][0] < queries[i][1] < queries[j][1].


Solution 1:

from sortedcontainers import SortedList

class Solution:
    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:
        nodes = SortedList(range(n))
        result = []

        for u, v in queries:
            idx = bisect_right(nodes, u)
            while idx < len(nodes) and nodes[idx] < v:
                nodes.pop(idx)
            
            result.append(len(nodes) - 1)

        return result


Solution 2:

class Solution:
    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:
        result = [0] * len(queries)
        road_map = {i: i + 1 for i in range(n - 1)}

        for i, (u, v) in enumerate(queries):
            if u not in road_map or road_map[u] >= v:
                result[i] = len(road_map)
                continue

            j = road_map[u]
            while j < v:
                j = road_map.pop(j)

            road_map[u] = v
            result[i] = len(road_map)

        return result


Solution 3:

class UnionFind:
    def __init__(self, n):
        self.parent = [i for i in range(n)]
        self.size = [1] * n

    def find(self, node):
        while node != self.parent[node]:
            self.parent[node] = self.parent[self.parent[node]]
            node = self.parent[node]
        return node

    def union(self, node1, node2):
        p1, p2 = self.find(node1), self.find(node2)
        self.parent[p2] = p1
        self.size[p1] += self.size[p2]

class Solution:
    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:
        uf = UnionFind(n)
        dist = n - 1
        result = []

        for u, v in queries:
            if u == uf.find(u):
                i = u + uf.size[u]
                while i < v:
                    uf.union(u, i)
                    i += uf.size[i]
                    dist -= 1
            result.append(dist)

        return result