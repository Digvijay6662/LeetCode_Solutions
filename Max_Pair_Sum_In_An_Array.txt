2815. Max Pair Sum in an Array
Easy
120
44
Companies
You are given a 0-indexed integer array nums. You have to find the maximum sum of a pair of numbers from nums such that the maximum digit in both numbers are equal.

Return the maximum sum or -1 if no such pair exists.

 

Example 1:

Input: nums = [51,71,17,24,42]
Output: 88
Explanation: 
For i = 1 and j = 2, nums[i] and nums[j] have equal maximum digits with a pair sum of 71 + 17 = 88. 
For i = 3 and j = 4, nums[i] and nums[j] have equal maximum digits with a pair sum of 24 + 42 = 66.
It can be shown that there are no other pairs with equal maximum digits, so the answer is 88.
Example 2:

Input: nums = [1,2,3,4]
Output: -1
Explanation: No pair exists in nums with equal maximum digits.
 

Constraints:

2 <= nums.length <= 100
1 <= nums[i] <= 104


Solution 1:

class Solution:
    def maxSum(self, nums: List[int]) -> int:
        n = len(nums)

        def maxDigit(num):
            maxD = 0
            while num > 0:
                maxD = max(maxD, num % 10)
                num //= 10

            return maxD

        res = -1
        for i in range(n):
            for j in range(i + 1, n):
                if maxDigit(nums[i]) == maxDigit(nums[j]):
                    res = max(res, nums[i] + nums[j])

        return res


Solution 2:

class Solution:
    def maxSum(self, nums: List[int]) -> int:
        def maxDigit(num):
            maxD = 0
            while num > 0:
                maxD = max(maxD, num % 10)
                num //= 10

            return maxD

        digitMap = {}
        res = -1
        for n in nums:
            digit = maxDigit(n)
            if digit in digitMap:
                res = max(res, digitMap[digit] + n)

            digitMap[digit] = max(digitMap.get(digit, 0), n)


        return res