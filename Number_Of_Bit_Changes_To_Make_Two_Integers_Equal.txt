3226. Number of Bit Changes to Make Two Integers Equal
Solved
Easy
Topics
Companies
Hint
You are given two positive integers n and k.

You can choose any bit in the binary representation of n that is equal to 1 and change it to 0.

Return the number of changes needed to make n equal to k. If it is impossible, return -1.

 

Example 1:

Input: n = 13, k = 4

Output: 2

Explanation:
Initially, the binary representations of n and k are n = (1101)2 and k = (0100)2.
We can change the first and fourth bits of n. The resulting integer is n = (0100)2 = k.

Example 2:

Input: n = 21, k = 21

Output: 0

Explanation:
n and k are already equal, so no changes are needed.

Example 3:

Input: n = 14, k = 13

Output: -1

Explanation:
It is not possible to make n equal to k.

 

Constraints:

1 <= n, k <= 106


Solution 1:

class Solution:
    def minChanges(self, n: int, k: int) -> int:
        result = 0
        
        for i in range(32):
            if (n >> i) & 1 != (k >> i) & 1:
                if (n >> i) & 1 == 0:
                    return -1
                else:
                    result += 1
                    
        return result


Solution 2:

class Solution:
    def minChanges(self, n: int, k: int) -> int:
        result = 0
        
        while n > 0 or k > 0:
            bit_n = n & 1
            bit_k = k & 1
            
            if bit_n != bit_k:
                if bit_n == 0:
                    return -1
                else:
                    result += 1
            
            n >>= 1
            k >>= 1
                    
        return result


Solution 3:

class Solution:
    def minChanges(self, n: int, k: int) -> int:
        k ^= n
        count = k.bit_count()
        k &= n
        return count if count == k.bit_count() else -1


Solution 4:

class Solution:
    def minChanges(self, n: int, k: int) -> int:
        if n & k != k:
            return -1
        return n.bit_count() - k.bit_count()

