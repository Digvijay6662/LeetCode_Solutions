632. Smallest Range Covering Elements from K Lists
Solved
Hard
Topics
Companies
You have k lists of sorted integers in non-decreasing order. Find the smallest range that includes at least one number from each of the k lists.

We define the range [a, b] is smaller than range [c, d] if b - a < d - c or a < c if b - a == d - c.

 

Example 1:

Input: nums = [[4,10,15,24,26],[0,9,12,20],[5,18,22,30]]
Output: [20,24]
Explanation: 
List 1: [4, 10, 15, 24,26], 24 is in range [20,24].
List 2: [0, 9, 12, 20], 20 is in range [20,24].
List 3: [5, 18, 22, 30], 22 is in range [20,24].
Example 2:

Input: nums = [[1,2,3],[1,2,3],[1,2,3]]
Output: [1,1]
 

Constraints:

nums.length == k
1 <= k <= 3500
1 <= nums[i].length <= 50
-105 <= nums[i][j] <= 105
nums[i] is sorted in non-decreasing order.


Solution 1:

class Solution:
    def smallestRange(self, nums: List[List[int]]) -> List[int]:
        n = len(nums)
        result = [float('-inf'), float('inf')]
        minHeap = []
        max_element = float('-inf')

        for i in range(n):
            heapq.heappush(minHeap, (nums[i][0], 0, i))
            max_element = max(max_element, nums[i][0])
        
        while minHeap:
            min_element, idx, list_idx = heapq.heappop(minHeap)

            if max_element - min_element < result[1] - result[0]:
                result = [min_element, max_element]

            if idx + 1 < len(nums[list_idx]):
                next_element = nums[list_idx][idx + 1]
                heapq.heappush(minHeap, (next_element, idx + 1, list_idx))
                max_element = max(max_element, next_element)
            else:
                break
        
        return result