119. Pascal's Triangle II
Easy
3.7K
297
Companies
Given an integer rowIndex, return the rowIndexth (0-indexed) row of the Pascal's triangle.

In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:


 

Example 1:

Input: rowIndex = 3
Output: [1,3,3,1]
Example 2:

Input: rowIndex = 0
Output: [1]
Example 3:

Input: rowIndex = 1
Output: [1,1]
 

Constraints:

0 <= rowIndex <= 33
 

Follow up: Could you optimize your algorithm to use only O(rowIndex) extra space?

Solution 1:

class Solution:
    def getRow(self, rowIndex: int) -> List[int]:
        ans = []
        for i in range(rowIndex+1):
            ans.append(math.comb(rowIndex, i))
        return ans



Solution 2:

class Solution:
    def getRow(self, rowIndex: int) -> List[int]:
        ans = [0] * (rowIndex + 1)
        ans[0] = 1

        for i in range(1, rowIndex + 1):
            for j in range(i, 0, -1):
                ans[j] += ans[j - 1]

        return ans


Solution 3: Taking advantage of Pascals Triangle symmetry

class Solution:
    def getRow(self, rowIndex: int) -> List[int]:
        ans = [0] * (rowIndex + 1)
        ans[0] = 1

        for i in range(1, rowIndex + 1):
            for j in range(i//2, 0, -1):
                ans[j] += ans[j-1]
            for j in range(i//2 + 1, i+1):
                ans[j] = ans[i-j]
        
        return ans
