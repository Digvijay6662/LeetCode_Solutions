714. Best Time to Buy and Sell Stock with Transaction Fee
Medium
5.3K
132
Companies
You are given an array prices where prices[i] is the price of a given stock on the ith day, and an integer fee representing a transaction fee.

Find the maximum profit you can achieve. You may complete as many transactions as you like, but you need to pay the transaction fee for each transaction.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

 

Example 1:

Input: prices = [1,3,2,8,4,9], fee = 2
Output: 8
Explanation: The maximum profit can be achieved by:
- Buying at prices[0] = 1
- Selling at prices[3] = 8
- Buying at prices[4] = 4
- Selling at prices[5] = 9
The total profit is ((8 - 1) - 2) + ((9 - 4) - 2) = 8.
Example 2:

Input: prices = [1,3,7,5,10,3], fee = 3
Output: 6
 

Constraints:

1 <= prices.length <= 5 * 104
1 <= prices[i] < 5 * 104
0 <= fee < 5 * 104


Solution 1:

class Solution:
    def maxProfit(self, prices: List[int], fee: int) -> int:
        n = len(prices)

        dp = [[-1 for _ in range(2)] for _ in range(n)]

        def dfs(i, buy):

            if i >= n:
                return 0

            if dp[i][buy] != -1:
                return dp[i][buy]

            if buy:
                profit = max(-prices[i] + dfs(i + 1, not buy), 0 + dfs(i + 1, buy))
            else:
                profit = max(prices[i] - fee + dfs(i + 1, not buy), 0 + dfs(i + 1, buy))

            dp[i][buy] = profit

            return profit

        return dfs(0, True)


Solution 2:

class Solution:
    def maxProfit(self, prices: List[int], fee: int) -> int:
        n = len(prices)

        dp = [[-1 for _ in range(2)] for _ in range(n + 1)]

        dp[n][0] = dp[n][1] = 0

        for i in range(n-1, -1, -1):
            for buy in range(2):
                profit = 0
                if buy:
                    profit = max(-prices[i] + dp[i + 1][0], 0 + dp[i + 1][1])
                else:
                    profit = max(prices[i] - fee + dp[i + 1][1], 0 + dp[i+1][0])

                dp[i][buy] = profit


        return dp[0][1]


Solution 3:


class Solution:
    def maxProfit(self, prices: List[int], fee: int) -> int:
        n = len(prices)

        dp = [[0 for _ in range(2)] for _ in range(n)]

        dp[0][0] = 0
        dp[0][1] = -prices[0]

        for i in range(1, n):
            dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i] - fee)
            dp[i][1] = max(dp[i-1][1], dp[i-1][0] - prices[i])

        return dp[n-1][0]



Solution 4:


class Solution:
    def maxProfit(self, prices: List[int], fee: int) -> int:
        n = len(prices)

        free = 0
        hold = -prices[0]

        for i in range(1, n):
            temp = hold
            hold = max(hold, free - prices[i])
            free = max(free, temp + prices[i] - fee)

        return free


