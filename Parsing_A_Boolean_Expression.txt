1106. Parsing A Boolean Expression
Solved
Hard
Topics
Companies
Hint
A boolean expression is an expression that evaluates to either true or false. It can be in one of the following shapes:

't' that evaluates to true.
'f' that evaluates to false.
'!(subExpr)' that evaluates to the logical NOT of the inner expression subExpr.
'&(subExpr1, subExpr2, ..., subExprn)' that evaluates to the logical AND of the inner expressions subExpr1, subExpr2, ..., subExprn where n >= 1.
'|(subExpr1, subExpr2, ..., subExprn)' that evaluates to the logical OR of the inner expressions subExpr1, subExpr2, ..., subExprn where n >= 1.
Given a string expression that represents a boolean expression, return the evaluation of that expression.

It is guaranteed that the given expression is valid and follows the given rules.

 

Example 1:

Input: expression = "&(|(f))"
Output: false
Explanation: 
First, evaluate |(f) --> f. The expression is now "&(f)".
Then, evaluate &(f) --> f. The expression is now "f".
Finally, return false.
Example 2:

Input: expression = "|(f,f,f,t)"
Output: true
Explanation: The evaluation of (false OR false OR false OR true) is true.
Example 3:

Input: expression = "!(&(f,t))"
Output: true
Explanation: 
First, evaluate &(f,t) --> (false AND true) --> false --> f. The expression is now "!(f)".
Then, evaluate !(f) --> NOT false --> true. We return true.
 

Constraints:

1 <= expression.length <= 2 * 104
expression[i] is one following characters: '(', ')', '&', '|', '!', 't', 'f', and ','.


Solution 1:

class Solution:
    def parseBoolExpr(self, expression: str) -> bool:

        def solve(i):
            if expression[i] == 't':
                return True, i + 1
            elif expression[i] == 'f':
                return False, i + 1
            elif expression[i] == '!':
                result, i = solve(i + 2)
                return not result, i + 1
            elif expression[i] == '&':
                i += 2
                result = True
                while expression[i] != ')':
                    val, i = solve(i)
                    result &= val
                    if expression[i] == ',':
                        i += 1
                return result, i + 1
            elif expression[i] == '|':
                i += 2
                result = False
                while expression[i] != ')':
                    val, i = solve(i)
                    result |= val
                    if expression[i] == ',':
                        i += 1
                return result, i + 1
            return False, i

        result, _ = solve(0)
        return result


Solution 2:

class Solution:
    def parseBoolExpr(self, expression: str) -> bool:
        stack = []

        for ch in expression:
            if ch == ',':
                continue
            elif ch != ')':
                stack.append(ch)
            else:
                sub_expr = []
                while stack[-1] != '(':
                    sub_expr.append(stack.pop())
                stack.pop()
                operator = stack.pop()

                if operator == '!':
                    result = not (sub_expr[0] == 't')
                elif operator == '&':
                    result = all(x == 't' for x in sub_expr)
                elif operator == '|':
                    result = any(x == 't' for x in sub_expr)
                
                stack.append('t' if result else 'f')
        
        return stack[0] == 't'