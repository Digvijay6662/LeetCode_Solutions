229. Majority Element II
Medium
8.1K
359
Companies
Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.

 

Example 1:

Input: nums = [3,2,3]
Output: [3]
Example 2:

Input: nums = [1]
Output: [1]
Example 3:

Input: nums = [1,2]
Output: [1,2]
 

Constraints:

1 <= nums.length <= 5 * 104
-109 <= nums[i] <= 109
 

Follow up: Could you solve the problem in linear time and in O(1) space?



Solution 1:

class Solution:
    def majorityElement(self, nums: List[int]) -> List[int]:
        n = len(nums)
        freqMap = {}
        res = []

        for num in nums:
            freqMap[num] = freqMap.get(num, 0) + 1
            if num not in res and freqMap[num] > n // 3:
                res.append(num)
        
        return res


Solution 2:

class Solution:
    def majorityElement(self, nums: List[int]) -> List[int]:
        n = len(nums)
        count1, count2 = 0, 0
        candidate1, candidate2 = None, None

        for num in nums:
            if num == candidate1:
                count1 += 1
            elif num == candidate2:
                count2 += 1
            elif count1 == 0:
                candidate1, count1 = num, 1
            elif count2 == 0:
                candidate2, count2 = num, 1
            else:
                count1 -= 1
                count2 -= 1

        count1, count2 = 0, 0
        for num in nums:
            if num == candidate1:
                count1 += 1
            elif num == candidate2:
                count2 += 1

        res = []
        if count1 > n // 3:
            res.append(candidate1)
        if count2 > n // 3:
            res.append(candidate2)

        return res
