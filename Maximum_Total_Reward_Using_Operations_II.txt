3181. Maximum Total Reward Using Operations II
Solved
Hard
Topics
Companies
Hint
You are given an integer array rewardValues of length n, representing the values of rewards.

Initially, your total reward x is 0, and all indices are unmarked. You are allowed to perform the following operation any number of times:

Choose an unmarked index i from the range [0, n - 1].
If rewardValues[i] is greater than your current total reward x, then add rewardValues[i] to x (i.e., x = x + rewardValues[i]), and mark the index i.
Return an integer denoting the maximum total reward you can collect by performing the operations optimally.

 

Example 1:

Input: rewardValues = [1,1,3,3]

Output: 4

Explanation:

During the operations, we can choose to mark the indices 0 and 2 in order, and the total reward will be 4, which is the maximum.

Example 2:

Input: rewardValues = [1,6,4,3,2]

Output: 11

Explanation:

Mark the indices 0, 2, and 1 in order. The total reward will then be 11, which is the maximum.

 

Constraints:

1 <= rewardValues.length <= 5 * 104
1 <= rewardValues[i] <= 5 * 104


Solution 1:

class Solution:
    def maxTotalReward(self, rewardValues: List[int]) -> int:
        rewardValues.sort()
        max_reward = rewardValues[-1]
        possible = 1

        for reward in rewardValues:
            mask =  (1 << reward) - 1
            possible |= (possible & mask) << reward
        
        for i in range(2 * max_reward, -1, -1):
            if (possible >> i) & 1:
                return i
        
        return -1


Solution 2:

class Solution:
    def maxTotalReward(self, rewardValues: List[int]) -> int:
        rewardValues.sort()
        max_reward = rewardValues[-1]
        possible = 1

        for reward in rewardValues:
            mask =  (1 << reward) - 1
            possible |= (possible & mask) << reward
        
        return possible.bit_length() - 1


Solution 3:

class Solution:
    def maxTotalReward(self, rewardValues: List[int]) -> int:
        rewardValues = sorted(set(rewardValues))
        possible = 1

        for num in rewardValues:
            validX = possible & ((1 << num) - 1)
            possible |= validX << num

        return possible.bit_length() - 1


Solution 4:

class Solution:
    def maxTotalReward(self, rewardValues: List[int]) -> int:
        possible = 1 
        rewardValues.sort()
        closest = rewardValues[-1] - 1
        
        for i in range(len(rewardValues) - 1):
            mask = (1 << rewardValues[i]) - 1
            possible |= (possible & mask) << rewardValues[i]
        
        while (possible >> closest) & 1 == 0:
            closest -= 1
        
        return rewardValues[-1] + closest
        
        