844. Backspace String Compare
Solved
Easy
Topics
Companies
Given two strings s and t, return true if they are equal when both are typed into empty text editors. '#' means a backspace character.

Note that after backspacing an empty text, the text will continue empty.

 

Example 1:

Input: s = "ab#c", t = "ad#c"
Output: true
Explanation: Both s and t become "ac".
Example 2:

Input: s = "ab##", t = "c#d#"
Output: true
Explanation: Both s and t become "".
Example 3:

Input: s = "a#c", t = "b"
Output: false
Explanation: s becomes "c" while t becomes "b".
 

Constraints:

1 <= s.length, t.length <= 200
s and t only contain lowercase letters and '#' characters.
 

Follow up: Can you solve it in O(n) time and O(1) space?


Solution 1:


class Solution:
    def backspaceCompare(self, s: str, t: str) -> bool:

        def helper(string, stack):
            for ch in string:
                if ch != '#':
                    stack.append(ch)
                else:
                    if stack:
                        stack.pop() 
            return stack
        
        return helper(s, []) == helper(t, [])
        

Solution 2:

class Solution:
    def backspaceCompare(self, s: str, t: str) -> bool:
        def helper(string):
            res = []
            backspace_count = 0

            for char in reversed(string):
                if char == '#':
                    backspace_count += 1
                elif backspace_count > 0:
                    backspace_count -= 1
                else:
                    res.append(char)
            return res

        return helper(s) == helper(t)
        

Solution 3:


class Solution:
    def backspaceCompare(self, s: str, t: str) -> bool:
        i, j = len(s) - 1, len(t) - 1
        backS = backT = 0

        while True:
            while i >= 0 and (backS or s[i] == '#'):
                backS += 1 if s[i] == '#' else -1
                i -= 1
            
            while j >= 0 and (backT or t[j] == '#'):
                backT += 1 if t[j] == '#' else -1
                j -= 1

            if i >= 0  and j >= 0 and s[i] == t[j]:
                i -= 1
                j -= 1
            else:
                break

        return i == -1 and j == -1