1248. Count Number of Nice Subarrays
Solved
Medium
Topics
Companies
Hint
Given an array of integers nums and an integer k. A continuous subarray is called nice if there are k odd numbers on it.

Return the number of nice sub-arrays.

 

Example 1:

Input: nums = [1,1,2,1,1], k = 3
Output: 2
Explanation: The only sub-arrays with 3 odd numbers are [1,1,2,1] and [1,2,1,1].
Example 2:

Input: nums = [2,4,6], k = 1
Output: 0
Explanation: There is no odd numbers in the array.
Example 3:

Input: nums = [2,2,2,1,2,2,1,2,2,2], k = 2
Output: 16
 

Constraints:

1 <= nums.length <= 50000
1 <= nums[i] <= 10^5
1 <= k <= nums.length


Solution 1:

class Solution:
    def numberOfSubarrays(self, nums: List[int], k: int) -> int:
        count = {0: 1}
        odds = result = 0

        for num in nums:
            odds += num % 2
            
            if odds - k in count:
                result += count[odds - k]

            count[odds] = count.get(odds, 0) + 1

        return result


Solution 2:

class Solution:
    def numberOfSubarrays(self, nums: List[int], k: int) -> int:
        n = len(nums)

        def atMost(k):
            result = i = 0 
            for j in range(n):
                k -= nums[j] % 2
                while k < 0:
                    k += nums[i] % 2
                    i += 1
                result += j - i + 1
            return result

        return atMost(k) - atMost(k - 1)
