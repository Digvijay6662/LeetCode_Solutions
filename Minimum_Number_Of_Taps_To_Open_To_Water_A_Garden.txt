1326. Minimum Number of Taps to Open to Water a Garden
Hard
2.6K
143
Companies
There is a one-dimensional garden on the x-axis. The garden starts at the point 0 and ends at the point n. (i.e The length of the garden is n).

There are n + 1 taps located at points [0, 1, ..., n] in the garden.

Given an integer n and an integer array ranges of length n + 1 where ranges[i] (0-indexed) means the i-th tap can water the area [i - ranges[i], i + ranges[i]] if it was open.

Return the minimum number of taps that should be open to water the whole garden, If the garden cannot be watered return -1.

 

Example 1:


Input: n = 5, ranges = [3,4,1,1,0,0]
Output: 1
Explanation: The tap at point 0 can cover the interval [-3,3]
The tap at point 1 can cover the interval [-3,5]
The tap at point 2 can cover the interval [1,3]
The tap at point 3 can cover the interval [2,4]
The tap at point 4 can cover the interval [4,4]
The tap at point 5 can cover the interval [5,5]
Opening Only the second tap will water the whole garden [0,5]
Example 2:

Input: n = 3, ranges = [0,0,0,0]
Output: -1
Explanation: Even if you activate all the four taps you cannot water the whole garden.
 

Constraints:

1 <= n <= 104
ranges.length == n + 1
0 <= ranges[i] <= 100


Solution 1:

class Solution:
    def minTaps(self, n: int, ranges: List[int]) -> int:
        ends = [0] * (n + 1)

        for i in range(n + 1):
            start = max(0, i - ranges[i])
            end = min(n, i + ranges[i])
            ends[start] = max(ends[start], end)

        farthest = 0
        currEnd = 0
        res = 0

        for i in range(n + 1):
            if i > farthest:
                return -1

            if i > currEnd:
                res += 1
                currEnd = farthest


            farthest = max(farthest, ends[i])                

        return res


Solution 2:

class Solution:
    def minTaps(self, n: int, ranges: List[int]) -> int:
        cover = []
        
        for i in range(n + 1):
            start = max(0, i - ranges[i])
            end = min(n, i + ranges[i])
            cover.append((start, end))
        
        cover.sort()

        dp = {}

        def solve(i, farthest):
            if i == (n + 1):
                return 0 if farthest == n else float('inf')
            
            if cover[i][0] > farthest:
                return float('inf')
        
            if (i, farthest) in dp:
                return dp[(i, farthest)]

            pick = 1 + solve(i + 1, max(farthest, cover[i][1]))
            notPick = solve(i + 1, farthest)
            
            dp[(i, farthest)] = min(pick, notPick)
            return dp[(i, farthest)]

        res = solve(0, 0)
        return -1 if res == float('inf') else res



Solution 3:


class Solution:
    def minTaps(self, n: int, ranges: List[int]) -> int:
        cover = []
        
        for i in range(n + 1):
            start = max(0, i - ranges[i])
            end = min(n, i + ranges[i])
            cover.append((start, end))
        
        cover.sort()

        dp = [-1] * (n + 1)
        def solve(i):
            if cover[i][1] == n:
                return 1

            if i == n + 1:
                return float('inf')

            if dp[i] != -1:
                return dp[i]

            ans = float('inf')
            for j in range(i + 1, n + 1):
                if cover[j][0] > cover[i][1]:
                    break
                ans = min(ans, 1 + solve(j))

            dp[i] = ans
            return ans

        res = float('inf')
        for i in range(n + 1):
            if cover[i][0] == 0:
                res = min(res, solve(i))

        return -1 if res == float('inf') else res



Solution 4:

class Solution:
    def minTaps(self, n: int, ranges: List[int]) -> int:
        dp = [float('inf')] * (n + 1)
        dp[0] = 0
        
        for i in range(n + 1):
            left = max(0, i - ranges[i])
            right = min(n, i + ranges[i])
            
            for j in range(left, right + 1):
                dp[right] = min(dp[right], dp[j] + 1)
        
        if dp[n] == float('inf'):
            return -1
            
        return dp[n]
