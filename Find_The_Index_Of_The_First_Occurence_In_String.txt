28. Find the Index of the First Occurrence in a String
Easy
3.2K
157
Companies
Given two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.

 

Example 1:

Input: haystack = "sadbutsad", needle = "sad"
Output: 0
Explanation: "sad" occurs at index 0 and 6.
The first occurrence is at index 0, so we return 0.
Example 2:

Input: haystack = "leetcode", needle = "leeto"
Output: -1
Explanation: "leeto" did not occur in "leetcode", so we return -1.
 

Constraints:

1 <= haystack.length, needle.length <= 104
haystack and needle consist of only lowercase English characters.


Solution 1:

class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
        m = len(haystack)
        n = len(needle)

        for i in range(m - n + 1):
            if needle == haystack[i: i + n]:
                return i

        return -1


Solution 2: Knuth-Morris-Pratt (KMP)

class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
        n = len(haystack)
        m = len(needle)
        lps = [0] * m
        p, i = 0, 1

        while i < m:
            if needle[p] == needle[i]:
                lps[i] = p + 1
                p += 1
                i += 1
            elif p == 0:
                lps[i] = 0
                i += 1
            else:
                p = lps[p - 1]

        i = j = 0
        while i < n:
            if haystack[i] == needle[j]:
                i += 1
                j += 1
            else:
                if j == 0:
                    i += 1
                else:
                    j = lps[j - 1]

            if j == m:
                return i - m

        return -1



Solution 3: Knuth-Morris-Pratt (KMP)


class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
        if not needle:
            return 0

        n = len(haystack)
        m = len(needle)
        lps = [0] * m
        
        j = 0
        for i in range(1, m):
            while j > 0 and needle[i] != needle[j]:
                j = lps[j - 1]
            if needle[i] == needle[j]:
                j += 1
                lps[i] = j

        j = 0
        for i in range(n):
            while j > 0 and haystack[i] != needle[j]:
                j = lps[j - 1]
            if haystack[i] == needle[j]:
                j += 1
                if j == m:
                    return i - m + 1

        return -1


Solution 4: Z algorithm


class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
        if not needle:
            return 0

        def zAlgorithm(string):
            n = len(string)
            z = [0] * n
            l = r = 0

            for i in range(1, n):
                if i > r:
                    l = r = i
                    while r < n and string[r] == string[r - l]:
                        r += 1
                    z[i] = r - l
                    r -= 1
                else:
                    idx = i - l
                    if i + z[idx] <= r:
                        z[i] = z[idx]
                    else:
                        l = i
                        while r < n and string[r] == string[r - l]:
                            r += 1
                        z[i] = r - l
                        r -= 1

            return z

        n = len(haystack)
        m = len(needle)
        string = needle + '*' + haystack
        z = zAlgorithm(string)

        for i in range(m + n + 1):
            if z[i] == m:
                return i - m - 1

        return -1


