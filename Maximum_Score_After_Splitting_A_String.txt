1422. Maximum Score After Splitting a String
Solved
Easy
Topics
Companies
Hint
Given a string s of zeros and ones, return the maximum score after splitting the string into two non-empty substrings (i.e. left substring and right substring).

The score after splitting a string is the number of zeros in the left substring plus the number of ones in the right substring.

 

Example 1:

Input: s = "011101"
Output: 5 
Explanation: 
All possible ways of splitting s into two non-empty substrings are:
left = "0" and right = "11101", score = 1 + 4 = 5 
left = "01" and right = "1101", score = 1 + 3 = 4 
left = "011" and right = "101", score = 1 + 2 = 3 
left = "0111" and right = "01", score = 1 + 1 = 2 
left = "01110" and right = "1", score = 2 + 1 = 3
Example 2:

Input: s = "00111"
Output: 5
Explanation: When left = "00" and right = "111", we get the maximum score = 2 + 3 = 5
Example 3:

Input: s = "1111"
Output: 3
 

Constraints:

2 <= s.length <= 500
The string s consists of characters '0' and '1' only.


Solution 1:

class Solution:
    def maxScore(self, s: str) -> int:
        n = len(s)
        result = 0
        for i in range(1, n):
            left = i - 1
            right = i
            score = 0

            while left >=0:
                if s[left] == '0':
                    score += 1
                left -= 1

            while right < n:
                if s[right] == '1':
                    score += 1
                right += 1

            result = max(result, score)

        return result


Solution 2:

class Solution:
    def maxScore(self, s: str) -> int:
        n = len(s)
        result = 0
        suffix = [0] * n

        for i in range(n - 2, -1, -1):
            suffix[i] = suffix[i + 1] + (1 if s[i + 1] == '1' else 0)

        prefix = 0
        for i in range(n-1):
            if s[i] == '0':
                prefix += 1
            result = max(result, prefix + suffix[i])

        return result
   
         
Solution 3:

class Solution:
    def maxScore(self, s: str) -> int:
        n = len(s)
        result = 0
        ones = s.count('1')
        zeroes = 0

        for i in range(n - 1):
            if s[i] == '0':
                zeroes += 1
            else:
                ones -= 1

            result = max(result, zeroes + ones)

        return result


Solution 4:

class Solution:
    def maxScore(self, s: str) -> int:
        n = len(s)
        ones = 0
        zeroes = 0
        result = float('-inf')

        for i in range(n - 1):
            if s[i] == "0":
                zeroes += 1
            else:
                ones += 1
            
            result = max(result, zeroes - ones)
            
        if s[-1] == "1":
            ones += 1
        
        return result + ones
