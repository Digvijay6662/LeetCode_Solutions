1351. Count Negative Numbers in a Sorted Matrix
Easy
3.5K
96
Companies
Given a m x n matrix grid which is sorted in non-increasing order both row-wise and column-wise, return the number of negative numbers in grid.

 

Example 1:

Input: grid = [[4,3,2,-1],[3,2,1,-1],[1,1,-1,-2],[-1,-1,-2,-3]]
Output: 8
Explanation: There are 8 negatives number in the matrix.
Example 2:

Input: grid = [[3,2],[1,0]]
Output: 0
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 100
-100 <= grid[i][j] <= 100
 

Follow up: Could you find an O(n + m) solution?


Solution 1:


class Solution:
    def countNegatives(self, grid: List[List[int]]) -> int:
        rows, cols = len(grid), len(grid[0])
        r = rows - 1
        c = 0
        count = 0

        while r >= 0 and c < cols:
            if grid[r][c] < 0:
                count += cols - c
                r -= 1
            else:
                while c < cols and grid[r][c] >= 0:
                    c += 1
                count += cols - c
                r -= 1

        return count


Solution 2:


class Solution:
    def countNegatives(self, grid: List[List[int]]) -> int:
        rows, cols = len(grid), len(grid[0])
        count = 0

        for row in grid:
            left = 0
            right = cols - 1

            while left <= right:
                mid = left + (right - left) // 2

                if row[mid] < 0:
                    right = mid - 1
                else:
                    left = mid + 1

            count += cols - left

        return count



