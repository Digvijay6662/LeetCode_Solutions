3122. Minimum Number of Operations to Satisfy Conditions
Solved
Medium
Companies
Hint
You are given a 2D matrix grid of size m x n. In one operation, you can change the value of any cell to any non-negative number. You need to perform some operations such that each cell grid[i][j] is:

Equal to the cell below it, i.e. grid[i][j] == grid[i + 1][j] (if it exists).
Different from the cell to its right, i.e. grid[i][j] != grid[i][j + 1] (if it exists).
Return the minimum number of operations needed.

 

Example 1:

Input: grid = [[1,0,2],[1,0,2]]

Output: 0

Explanation:



All the cells in the matrix already satisfy the properties.

Example 2:

Input: grid = [[1,1,1],[0,0,0]]

Output: 3

Explanation:



The matrix becomes [[1,0,1],[1,0,1]] which satisfies the properties, by doing these 3 operations:

Change grid[1][0] to 1.
Change grid[0][1] to 0.
Change grid[1][2] to 1.
Example 3:

Input: grid = [[1],[2],[3]]

Output: 2

Explanation:



There is a single column. We can change the value to 1 in each cell using 2 operations.

 

Constraints:

1 <= n, m <= 1000
0 <= grid[i][j] <= 9


Solution 1:

class Solution:
    def minimumOperations(self, grid: List[List[int]]) -> int:
        n, m = len(grid), len(grid[0])
        dp = [[-1 for _ in range(10)] for _ in range(m)]

        def solve(j, d):
            if j == m:
                return 0

            if dp[j][d] != -1:
                return dp[j][d]

            curr_cost = 0
            for i in range(n):
                if grid[i][j] != d:
                    curr_cost += 1

            ans = float('inf')

            for digit in range(10):
                if d == digit:
                    continue
                ans = min(ans, curr_cost + solve(j + 1, digit))

            dp[j][d] = ans
            return ans

        result = float('inf')
        for d in range(10):
            result = min(result, solve(0, d))

        return result


Solution 2:

class Solution:
    def minimumOperations(self, grid: List[List[int]]) -> int:
        n, m = len(grid), len(grid[0])
        dp = [[float('inf')] * 10 for _ in range(m+1)]
        dp[0] = [0] * 10

        for j in range(1, m+1):
            for d in range(10):
                curr_cost = sum(grid[i][j-1] != d for i in range(n))
                for prev_d in range(10):
                    if prev_d == d:
                        continue
                    dp[j][d] = min(dp[j][d], dp[j-1][prev_d] + curr_cost)

        return min(dp[m])

Solution 3:

class Solution:
    def minimumOperations(self, grid: List[List[int]]) -> int:
        n, m = len(grid), len(grid[0])
        dp = [[float('inf')] * 10 for _ in range(m)]

        for d in range(10):
            curr_cost = 0
            for i in range(n):
                if grid[i][0] != d:
                    curr_cost += 1
            dp[0][d] = curr_cost

        for j in range(1, m):
            for d in range(10):
                curr_cost = 0
                for i in range(n):
                    if grid[i][j] != d:
                        curr_cost += 1
                for prev_d in range(10):
                    if d == prev_d:
                        continue
                    dp[j][d] = min(dp[j][d], curr_cost + dp[j - 1][prev_d])

        return min(dp[-1])


Solution 4:

class Solution:
    def minimumOperations(self, grid: List[List[int]]) -> int:
        n, m = len(grid), len(grid[0])
        prev = [float('inf')] * 10

        for d in range(10):
            curr_cost = 0
            for i in range(n):
                if grid[i][0] != d:
                    curr_cost += 1
            prev[d] = curr_cost

        for j in range(1, m):
            dp = [float('inf')] * 10
            for d in range(10):
                curr_cost = 0
                for i in range(n):
                    if grid[i][j] != d:
                        curr_cost += 1
                for prev_d in range(10):
                    if d == prev_d:
                        continue
                    dp[d] = min(dp[d], curr_cost + prev[prev_d])

            prev = dp

        return min(prev)