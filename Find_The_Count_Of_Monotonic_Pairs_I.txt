3250. Find the Count of Monotonic Pairs I
Solved
Hard
Companies
Hint
You are given an array of positive integers nums of length n.

We call a pair of non-negative integer arrays (arr1, arr2) monotonic if:

The lengths of both arrays are n.
arr1 is monotonically non-decreasing, in other words, arr1[0] <= arr1[1] <= ... <= arr1[n - 1].
arr2 is monotonically non-increasing, in other words, arr2[0] >= arr2[1] >= ... >= arr2[n - 1].
arr1[i] + arr2[i] == nums[i] for all 0 <= i <= n - 1.
Return the count of monotonic pairs.

Since the answer may be very large, return it modulo 109 + 7.

 

Example 1:

Input: nums = [2,3,2]

Output: 4

Explanation:

The good pairs are:

([0, 1, 1], [2, 2, 1])
([0, 1, 2], [2, 2, 0])
([0, 2, 2], [2, 1, 0])
([1, 2, 2], [1, 1, 0])
Example 2:

Input: nums = [5,5,5,5]

Output: 126

 

Constraints:

1 <= n == nums.length <= 2000
1 <= nums[i] <= 50


Solution 1:

class Solution:
    def countOfPairs(self, nums: List[int]) -> int:
        n = len(nums)
        MOD = 1000000007

        dp = [[-1 for _ in range(51)] for _ in range(n)]

        def solve(i, prev_a):
            if i == n:
                return 1

            if dp[i][prev_a] != -1:
                return dp[i][prev_a]

            ans = 0
            prev_b = nums[i - 1] - prev_a if i > 0 else nums[0]
            for val in range(prev_a, nums[i] + 1):
                if nums[i] - val <= prev_b:
                    ans = (ans + solve(i + 1, val)) % MOD

            dp[i][prev_a] = ans
            return ans

        return solve(0, 0)


Solution 2:

class Solution:
    def countOfPairs(self, nums: List[int]) -> int:
        n = len(nums)
        MOD = 1000000007

        dp = [[0 for _ in range(51)] for _ in range(n + 1)]

        for i in range(51):
            dp[n][i] = 1

        for i in range(n - 1, -1, -1):
            for prev_a in range(50, -1, -1):
                ans = 0
                prev_b = nums[i - 1] - prev_a if i > 0 else nums[0]
                for val in range(prev_a, nums[i] + 1):
                    if nums[i] - val <= prev_b:
                        ans = (ans + dp[i + 1][val]) % MOD
                dp[i][prev_a] = ans

        return dp[0][0]


Solution 3:

class Solution:
    def countOfPairs(self, nums: List[int]) -> int:
        n = len(nums)
        MOD = 1000000007

        dp = [[0 for _ in range(51)] for _ in range(n + 1)]

        for i in range(51):
            dp[n][i] = 1

        for i in range(n - 1, -1, -1):
            prefix = [0] * 51
            prefix[0] = dp[i + 1][0]

            for j in range(1, 51):
                prefix[j] = (prefix[j - 1] + dp[i + 1][j]) % MOD

            for prev_a in range(50, -1, -1):
                ans = 0
                if i > 0:
                    # nums[i] - val  <= prev_b
                    # nums[i] - val <=  nums[i - 1] - prev_a
                    # nums[i] - nums[i - 1] + prev_a <= val
                    val = max(prev_a, nums[i] - nums[i - 1] + prev_a)
                else:
                    val = prev_a

                if val <= nums[i]:
                    ans = (prefix[nums[i]] - (prefix[val - 1] if val > 0 else 0)) % MOD

                dp[i][prev_a] = ans

        return dp[0][0] % MOD


Solution 4:

class Solution:
    def countOfPairs(self, nums: List[int]) -> int:
        n = len(nums)
        MOD = 1000000007
        dp = [1] * 51

        for i in range(n - 1, -1, -1):
            new_dp = [0] * 51

            for j in range(1, 51):
                dp[j] = (dp[j - 1] + dp[j]) % MOD

            for prev_a in range(50, -1, -1):
                ans = 0
                if i > 0:
                    val = max(prev_a, nums[i] - nums[i - 1] + prev_a)
                else:
                    val = prev_a

                if val <= nums[i]:
                    ans = (dp[nums[i]] - (dp[val - 1] if val > 0 else 0)) % MOD

                new_dp[prev_a] = ans

            dp = new_dp

        return dp[0]
