827. Making A Large Island
Hard
3.6K
61
Companies
You are given an n x n binary matrix grid. You are allowed to change at most one 0 to be 1.

Return the size of the largest island in grid after applying this operation.

An island is a 4-directionally connected group of 1s.

 

Example 1:

Input: grid = [[1,0],[0,1]]
Output: 3
Explanation: Change one 0 to 1 and connect two 1s, then we get an island with area = 3.
Example 2:

Input: grid = [[1,1],[1,0]]
Output: 4
Explanation: Change the 0 to 1 and make the island bigger, only one island with area = 4.
Example 3:

Input: grid = [[1,1],[1,1]]
Output: 4
Explanation: Can't change any 0 to 1, only one island with area = 4.
 

Constraints:

n == grid.length
n == grid[i].length
1 <= n <= 500
grid[i][j] is either 0 or 1.


Solution 1:

class DSU:
    def __init__(self, n):
        self.parent = [i for i in range(n)]
        self.rank = [1] * n

    def find(self, node):
        if node != self.parent[node]:
            self.parent[node] = self.find(self.parent[node])
        return self.parent[node]

    def union(self, n1, n2):
        p1, p2 = self.find(n1), self.find(n2)
        if p1 == p2:
            return False

        if self.rank[p1] > self.rank[p2]:
            self.parent[p2] = p1
            self.rank[p1] += self.rank[p2]
        else:
            self.parent[p1] = p2
            self.rank[p2] += self.rank[p1]

        return True
        

class Solution:
    def largestIsland(self, grid: List[List[int]]) -> int:
        n = len(grid)
        dsu = DSU(n * n)
        directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]

        for i in range(n):
            for j in range(n):
                if grid[i][j] == 1:
                    node1 = n * i + j
                    for dr, dc in directions:
                        r = i + dr
                        c = j + dc
                        if 0 <= r < n and 0 <= c < n and grid[r][c] == 1:
                            node2 = n * r + c
                            if dsu.find(node1) != dsu.find(node2):
                                dsu.union(node1, node2)

        max_size = 0

        for i in range(n):
            for j in range(n):
                if grid[i][j] == 0:
                    total_size = 1
                    parSet = set()
                    for dr, dc in directions:
                        r = i + dr
                        c = j + dc
                        if 0 <= r < n and 0 <= c < n and grid[r][c] == 1:
                            node2 = n * r + c
                            par = dsu.find(node2)
                            if par not in parSet:
                                total_size += dsu.rank[par]
                                parSet.add(par)

                    max_size = max(max_size, total_size)

        max_size = max(max_size, max(dsu.rank))
        return max_size


Solution 2:

class Solution:
    def largestIsland(self, grid: List[List[int]]) -> int:
        n = len(grid)
        directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]

        def dfs(x, y, index):
            res = 0
            grid[x][y] = index
            for dr, dc in directions:
                r = x + dr
                c = y + dc
                if 0 <= r < n and 0 <= c < n and grid[r][c] == 1:
                    res += dfs(r, c, index)
            return res + 1
            
        index = 2
        areas = {0: 0}
        for x in range(n):
            for y in range(n):
                if grid[x][y] == 1:
                    areas[index] = dfs(x, y, index)
                    index += 1

        res = max(areas.values())
        for x in range(n):
            for y in range(n):
                if grid[x][y] == 0:
                    possible = set()
                    for dr, dc in directions:
                        r = x + dr
                        c = y + dc
                        if 0 <= r < n and 0 <= c < n:
                            possible.add(grid[r][c])
                    res = max(res, sum(areas[index] for index in possible) + 1)


        return res