934. Shortest Bridge
Medium
4.7K
178
Companies
You are given an n x n binary matrix grid where 1 represents land and 0 represents water.

An island is a 4-directionally connected group of 1's not connected to any other 1's. There are exactly two islands in grid.

You may change 0's to 1's to connect the two islands to form one island.

Return the smallest number of 0's you must flip to connect the two islands.

 

Example 1:

Input: grid = [[0,1],[1,0]]
Output: 1
Example 2:

Input: grid = [[0,1,0],[0,0,0],[0,0,1]]
Output: 2
Example 3:

Input: grid = [[1,1,1,1,1],[1,0,0,0,1],[1,0,1,0,1],[1,0,0,0,1],[1,1,1,1,1]]
Output: 1
 

Constraints:

n == grid.length == grid[i].length
2 <= n <= 100
grid[i][j] is either 0 or 1.
There are exactly two islands in grid.


Solution 1:


class Solution:
    def shortestBridge(self, grid: List[List[int]]) -> int:
        n = len(grid)
        directions = [[0, 1], [0, -1], [1, 0], [-1, 0]]

        def dfs(r, c):
            if 0 <= r < n and 0 <= c < n and grid[r][c] == 1:
                grid[r][c] = 2
                for dr, dc in directions:
                    dfs(r + dr, c + dc)

        def bfs():
            q = deque()
            for i in range(n):
                for j in range(n):
                    if grid[i][j] == 2:
                        q.append((i, j))

            res = 0

            while q:
                for _ in range(len(q)):
                    r, c = q.popleft()

                    for dr, dc in directions:
                        nr, nc = r + dr, c + dc
                        if 0 <= nr < n and 0 <= nc < n:
                            if grid[nr][nc] == 1:
                                return res
                            if grid[nr][nc] == 0:
                                grid[nr][nc] = 2
                                q.append((nr, nc))

                res += 1

        for i in range(n):
            for j in range(n):
                if grid[i][j] == 1:
                    dfs(i, j)
                    return bfs()


Solution 2:

class Solution:
    def shortestBridge(self, grid: List[List[int]]) -> int:
        n = len(grid)
        directions = [[0, 1], [0, -1], [1, 0], [-1, 0]]
        visited = set()

        def dfs(r, c):
            if 0 <= r < n and 0 <= c < n and grid[r][c] == 1 and (r, c) not in visited:
                visited.add((r, c))
                for dr, dc in directions:
                    dfs(r + dr, c + dc)

        def bfs():
            q = deque(visited)

            res = 0

            while q:
                for _ in range(len(q)):
                    r, c = q.popleft()

                    for dr, dc in directions:
                        nr, nc = r + dr, c + dc
                        if 0 <= nr < n and 0 <= nc < n and (nr, nc) not in visited:
                            if grid[nr][nc] == 1:
                                return res
                            if grid[nr][nc] == 0:
                                visited.add((nr, nc))
                                q.append((nr, nc))

                res += 1

        for i in range(n):
            for j in range(n):
                if grid[i][j] == 1:
                    dfs(i, j)
                    return bfs()
