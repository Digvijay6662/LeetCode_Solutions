2487. Remove Nodes From Linked List
Solved
Medium
Topics
Companies
Hint
You are given the head of a linked list.

Remove every node which has a node with a greater value anywhere to the right side of it.

Return the head of the modified linked list.

 

Example 1:


Input: head = [5,2,13,3,8]
Output: [13,8]
Explanation: The nodes that should be removed are 5, 2 and 3.
- Node 13 is to the right of node 5.
- Node 13 is to the right of node 2.
- Node 8 is to the right of node 3.
Example 2:

Input: head = [1,1,1,1]
Output: [1,1,1,1]
Explanation: Every node has value 1, so no nodes are removed.
 

Constraints:

The number of the nodes in the given list is in the range [1, 105].
1 <= Node.val <= 105


Solution 1:

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def removeNodes(self, head: Optional[ListNode]) -> Optional[ListNode]:
        if not head or not head.next:
            return head

        def reverse(head):
            prev = None
            curr = head
            while curr:
                nxt_node = curr.next
                curr.next = prev
                prev = curr
                curr = nxt_node

            return prev

        rHead = reverse(head)
        max_val = rHead.val
        prev = None
        curr = rHead

        while curr:
            nxt_node = curr.next
            max_val = max(max_val, curr.val)
            if curr.val < max_val:
                prev.next = curr.next
                curr.next = None
            else:
                prev = curr
            curr = nxt_node

        return reverse(rHead)


Solution 2:

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def removeNodes(self, head: Optional[ListNode]) -> Optional[ListNode]:
        if not head or not head.next:
            return head

        def reverse(head):
            prev = None
            curr = head
            while curr:
                nxt_node = curr.next
                curr.next = prev
                prev = curr
                curr = nxt_node

            return prev

        rHead = reverse(head)
        curr = rHead

        while curr:
            while curr.next and curr.val > curr.next.val:
                curr.next = curr.next.next
            curr = curr.next

        return reverse(rHead)