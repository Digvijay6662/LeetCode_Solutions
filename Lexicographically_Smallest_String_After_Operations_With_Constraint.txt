3106. Lexicographically Smallest String After Operations With Constraint
Solved
Medium
Companies
Hint
You are given a string s and an integer k.

Define a function distance(s1, s2) between two strings s1 and s2 of the same length n as:

The sum of the minimum distance between s1[i] and s2[i] when the characters from 'a' to 'z' are placed in a cyclic order, for all i in the range [0, n - 1].
For example, distance("ab", "cd") == 4, and distance("a", "z") == 1.

You can change any letter of s to any other lowercase English letter, any number of times.

Return a string denoting the 
lexicographically smallest
 string t you can get after some changes, such that distance(s, t) <= k.

 

Example 1:

Input: s = "zbbz", k = 3

Output: "aaaz"

Explanation:

Change s to "aaaz". The distance between "zbbz" and "aaaz" is equal to k = 3.

Example 2:

Input: s = "xaxcd", k = 4

Output: "aawcd"

Explanation:

The distance between "xaxcd" and "aawcd" is equal to k = 4.

Example 3:

Input: s = "lol", k = 0

Output: "lol"

Explanation:

It's impossible to change any character as k = 0.

 

Constraints:

1 <= s.length <= 100
0 <= k <= 2000
s consists only of lowercase English letters.


Solution 1:

class Solution:
    def getSmallestString(self, s: str, k: int) -> str:
        result = []
        remaining = k

        for ch in s:
            clockwise = ord('z') - ord(ch) + 1
            anti_clockwise = ord(ch) - ord('a')

            min_distance = min(clockwise, anti_clockwise)

            if remaining >= min_distance:
                remaining -= min_distance
                result.append('a')
            else:
                new_char = chr(ord(ch) - remaining)
                remaining = 0
                result.append(new_char)

        return "".join(result)


Solution 2:

class Solution:
    def getSmallestString(self, s: str, k: int) -> str:
        n = len(s)
        result = list(s)
        remaining = k

        for i in range(n):
            ch = s[i]
            clockwise = ord('z') - ord(ch) + 1
            anti_clockwise = ord(ch) - ord('a')

            min_distance = min(clockwise, anti_clockwise)

            if remaining >= min_distance:
                remaining -= min_distance
                result[i] = 'a'
            else:
                new_char = chr(ord(ch) - remaining)
                result[i] = new_char
                remaining = 0
                break
                
        return "".join(result)