1190. Reverse Substrings Between Each Pair of Parentheses
Solved
Medium
Topics
Companies
Hint
You are given a string s that consists of lower case English letters and brackets.

Reverse the strings in each pair of matching parentheses, starting from the innermost one.

Your result should not contain any brackets.

 

Example 1:

Input: s = "(abcd)"
Output: "dcba"
Example 2:

Input: s = "(u(love)i)"
Output: "iloveu"
Explanation: The substring "love" is reversed first, then the whole string is reversed.
Example 3:

Input: s = "(ed(et(oc))el)"
Output: "leetcode"
Explanation: First, we reverse the substring "oc", then "etco", and finally, the whole string.
 

Constraints:

1 <= s.length <= 2000
s only contains lower case English characters and parentheses.
It is guaranteed that all parentheses are balanced.


Solution 1:

class Solution:
    def reverseParentheses(self, s: str) -> str:
        n = len(s)
        result = list(s)
        last = []

        def reverse(l, r):
            while l < r:
                result[l], result[r] = result[r], result[l]
                l += 1
                r -= 1

        for i in range(n):
            if s[i] == '(':
                last.append(i)
            elif s[i] == ')':
                reverse(last.pop() + 1, i - 1)

        return "".join([ch for ch in result if ch not in ['(', ')']])


Solution 2:

class Solution:
    def reverseParentheses(self, s: str) -> str:
        stack = []
    
        for char in s:
            if char == ')':
                temp = []
                while stack and stack[-1] != '(':
                    temp.append(stack.pop())
                if stack and stack[-1] == '(':
                    stack.pop()
                stack.extend(temp)
            else:
                stack.append(char)
        
        return ''.join(stack)


Solution 3:

class Solution:
    def reverseParentheses(self, s: str) -> str:
        stack = []
        result = []

        for char in s:
            if char == '(':
                stack.append(result)
                result = []
            elif char == ')':
                result = stack.pop() + result[::-1]
            else:
                result.append(char)

        return "".join(result)


Solution 4:

class Solution:
    def reverseParentheses(self, s: str) -> str:
        n = len(s)
        stack = []
        bmap = {}

        for i in range(n):
            if s[i] == '(':
                stack.append(i)
            if s[i] == ')':
                idx = stack.pop()
                bmap[i] = idx
                bmap[idx] = i

        direction = 1
        i = 0
        result = []

        while i < n:
            if s[i] in '()':
                direction *= -1
                i = bmap[i]
                i += direction
            else:
                result.append(s[i])
                i += direction

        return "".join(result)