207. Course Schedule
Medium
13.3K
531
Companies
There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.

For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.
Return true if you can finish all courses. Otherwise, return false.

 

Example 1:

Input: numCourses = 2, prerequisites = [[1,0]]
Output: true
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0. So it is possible.
Example 2:

Input: numCourses = 2, prerequisites = [[1,0],[0,1]]
Output: false
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.
 

Constraints:

1 <= numCourses <= 2000
0 <= prerequisites.length <= 5000
prerequisites[i].length == 2
0 <= ai, bi < numCourses
All the pairs prerequisites[i] are unique.

Solution 1:

class Solution:
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:

        courseMap = {i : [] for i in range(numCourses)}
        
        for c, p in prerequisites:
            courseMap[c].append(p)

        visited = set()

        def dfs(c):
            if courseMap[c] == []:
                return True
            
            if c in visited:
                return False
            
            visited.add(c)

            for p in courseMap[c]:
                if not dfs(p):
                    return False

            visited.remove(c)
            courseMap[c] = []
            
            return True
            
        
        for c in courseMap:
            if not dfs(c):
                return False

        return True


Solution 2: BFS

class Solution:
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:

        courseMap = {i: [] for i in range(numCourses)}
        prereqCount = [0] * numCourses

        for c, p in prerequisites:
            courseMap[p].append(c)
            prereqCount[c] += 1

        queue = deque([i for i in range(numCourses) if prereqCount[i] == 0])

        while queue:
            course = queue.popleft()
            
            for p in courseMap[course]:
                prereqCount[p] -= 1
                if prereqCount[p] == 0:
                    queue.append(p)

        return all(count == 0 for count in prereqCount)