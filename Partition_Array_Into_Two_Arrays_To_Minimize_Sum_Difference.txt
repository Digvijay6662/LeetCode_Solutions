2035. Partition Array Into Two Arrays to Minimize Sum Difference
Solved
Hard
Topics
Companies
Hint
You are given an integer array nums of 2 * n integers. You need to partition nums into two arrays of length n to minimize the absolute difference of the sums of the arrays. To partition nums, put each element of nums into one of the two arrays.

Return the minimum possible absolute difference.

 

Example 1:

example-1
Input: nums = [3,9,7,3]
Output: 2
Explanation: One optimal partition is: [3,9] and [7,3].
The absolute difference between the sums of the arrays is abs((3 + 9) - (7 + 3)) = 2.
Example 2:

Input: nums = [-36,36]
Output: 72
Explanation: One optimal partition is: [-36] and [36].
The absolute difference between the sums of the arrays is abs((-36) - (36)) = 72.
Example 3:

example-3
Input: nums = [2,-1,0,4,-2,-9]
Output: 0
Explanation: One optimal partition is: [2,4,-9] and [-1,0,-2].
The absolute difference between the sums of the arrays is abs((2 + 4 + -9) - (-1 + 0 + -2)) = 0.
 

Constraints:

1 <= n <= 15
nums.length == 2 * n
-107 <= nums[i] <= 107


Solution 1:

class Solution:
    def minimumDifference(self, nums: List[int]) -> int:
        n = len(nums)
        total = sum(nums)

        left, right = defaultdict(list), defaultdict(list)
        N = n // 2

        for mask in range(1 << N):
            length = sum_left = sum_right = 0
            for i in range(N):
                if (mask >> i) & 1:
                    length += 1
                    sum_left += nums[i]
                    sum_right += nums[i + N]

            left[length].append(sum_left)
            right[length].append(sum_right)
        

        for length in right:
            right[length] = sorted(right[length])


        result = min(abs(total - 2 * left[N][0]), abs(total - 2 * right[N][0]))

        for left_length in range(1, N + 1):
            right_length = N - left_length

            for s1 in left[left_length]:
                req = (total -  2 * s1) // 2
                idx = bisect_left(right[right_length], req)

                if idx < len(right[right_length]):
                    result = min(result, abs(total - 2 * (right[right_length][idx] + s1)))
                if idx > 0:
                    result = min(result, abs(total - 2 * (right[right_length][idx - 1] + s1)))

        return result