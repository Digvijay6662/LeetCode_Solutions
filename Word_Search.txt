79. Word Search
Medium
13.2K
538
Companies
Given an m x n grid of characters board and a string word, return true if word exists in the grid.

The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.

 

Example 1:


Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCCED"
Output: true
Example 2:


Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "SEE"
Output: true
Example 3:


Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCB"
Output: false
 

Constraints:

m == board.length
n = board[i].length
1 <= m, n <= 6
1 <= word.length <= 15
board and word consists of only lowercase and uppercase English letters.
 

Follow up: Could you use search pruning to make your solution faster with a larger board?

Solution 1:

class Solution:
    def exist(self, board: List[List[str]], word: str) -> bool:
        rows, cols = len(board), len(board[0])
        path = set()

        # Define a helper function to search for the word using DFS
        def dfs(r, c, i):
            # If we have matched the entire word, we are done
            if i == len(word):
                return True

            # If we are out of bounds, or the current cell does not match the current letter,or
            # we have already visited this cell, return False
            if (r < 0 or c < 0 or
                r >= rows or c >= cols or
                word[i] != board[r][c] or
                (r, c) in path):
                return False

            # Mark the current cell as visited
            path.add((r, c))

            # Recursively search in all four directions
            res = (dfs(r + 1, c, i + 1) or 
                   dfs(r - 1, c, i + 1) or 
                   dfs(r, c + 1, i + 1) or 
                   dfs(r, c - 1, i + 1))

            # Mark the current cell as unvisited
            path.remove((r, c))

            return res

        # Iterate over all cells in the matrix, and start the search from each cell
        for i in range(rows):
            for j in range(cols):
                if board[i][j] == word[0] and dfs(i, j, 0):
                    return True

        # If the word is not found, return False
        return False


Solution 2:

class Solution:
    def exist(self, board: List[List[str]], word: str) -> bool:
        n, m = len(board), len(board[0])
        size = len(word)

        if size > n * m:
            return False

        count = defaultdict(int)

        for i in range(n):
            for j in range(m):
                count[board[i][j]] += 1
        
        for ch, freq in Counter(word).items():
            if freq > count[ch]:
                return False

        if count[word[0]] > count[word[-1]]:
            word = word[::-1]
        
        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]

        def dfs(r, c, i):
            if i == size:
                return True

            visited.add((r, c))

            for dr, dc in directions:
                nr, nc = r + dr, c + dc
                if 0 <= nr < n and 0 <= nc < m and (nr, nc) not in visited and board[nr][nc] == word[i]:
                    if dfs(nr, nc, i + 1):
                        return True

            visited.remove((r, c))

            return False

        visited = set()
        for r in range(n):
            for c in range(m):
                if board[r][c] == word[0]:
                    if dfs(r, c, 1):
                        return True

        return False
        

