2272. Substring With Largest Variance
Hard
1.3K
160
Companies
The variance of a string is defined as the largest difference between the number of occurrences of any 2 characters present in the string. Note the two characters may or may not be the same.

Given a string s consisting of lowercase English letters only, return the largest variance possible among all substrings of s.

A substring is a contiguous sequence of characters within a string.

 

Example 1:

Input: s = "aababbb"
Output: 3
Explanation:
All possible variances along with their respective substrings are listed below:
- Variance 0 for substrings "a", "aa", "ab", "abab", "aababb", "ba", "b", "bb", and "bbb".
- Variance 1 for substrings "aab", "aba", "abb", "aabab", "ababb", "aababbb", and "bab".
- Variance 2 for substrings "aaba", "ababbb", "abbb", and "babb".
- Variance 3 for substring "babbb".
Since the largest possible variance is 3, we return it.
Example 2:

Input: s = "abcde"
Output: 0
Explanation:
No letter occurs more than once in s, so the variance of every substring is 0.
 

Constraints:

1 <= s.length <= 104
s consists of lowercase English letters.


Solution 1:

class Solution:
    def largestVariance(self, s: str) -> int:
        unique = set(s)

        res = 0

        for first in unique:
            for second in unique:
                if first == second:
                    continue

                firstCount = 0
                secondCount = 0
                seen = False

                for ch in s:
                    if ch != first and ch != second:
                        continue
                    if ch == first:
                        firstCount += 1
                    if ch == second:
                        secondCount += 1

                    if secondCount > firstCount:
                        secondCount = 0
                        firstCount = 0
                        seen = True
                        continue

                    if firstCount > 0 and secondCount > 0:
                        res = max(res, firstCount - secondCount)
                    else:
                        if seen:
                            res = max(res, firstCount - 1)

        return res

Solution 2:

class Solution:
    def largestVariance(self, s: str) -> int:
        counter = [0] * 26
        for ch in s:
            counter[ord(ch) - ord('a')] += 1
        globalMax = 0
        
        for i in range(26):
            for j in range(26):
                if i == j or counter[i] == 0 or counter[j] == 0:
                    continue

                major = chr(ord('a') + i)
                minor = chr(ord('a') + j)
                majorCount = 0
                minorCount = 0

                restMinor = counter[j]
                
                for ch in s:
                    if ch != major and ch != minor:
                        continue
                         
                    if ch == major:
                        majorCount += 1
                    if ch == minor:
                        minorCount += 1
                        restMinor -= 1
                    
                    if minorCount > 0:
                        globalMax = max(globalMax, majorCount - minorCount)
                    
                    if majorCount < minorCount and restMinor > 0:
                        majorCount = 0
                        minorCount = 0
        
        return globalMax