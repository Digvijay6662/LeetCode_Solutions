78. Subsets
Medium
14.8K
215
Companies
Given an integer array nums of unique elements, return all possible 
subsets
 (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]
Example 2:

Input: nums = [0]
Output: [[],[0]]
 

Constraints:

1 <= nums.length <= 10
-10 <= nums[i] <= 10
All the numbers of nums are unique.


Solution 1:

class Solution:
    def subsets(self, nums: List[int]) -> List[List[int]]:
        res = []
        n = len(nums)

        def solve(i, arr):
            if i == n:
                res.append(arr.copy())
                return

            solve(i + 1, arr)  # Not taking nums[i]

            arr.append(nums[i])
            solve(i + 1, arr)  # Taking nums[i]
            arr.remove(nums[i])  # Backtrack

        solve(0, [])

        return res



Solution 2:

class Solution:
    def subsets(self, nums: List[int]) -> List[List[int]]:
        res = []
        n = len(nums)

        def solve(i, subset):
            res.append(subset)

            for j in range(i, n):
                solve(j + 1, subset + [nums[j]])

        solve(0, [])

        return res





