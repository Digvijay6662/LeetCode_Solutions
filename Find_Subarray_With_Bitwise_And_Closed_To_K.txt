3171. Find Subarray With Bitwise AND Closest to K
Solved
Hard
Companies
Hint
You are given an array nums and an integer k. You need to find a 
subarray
 of nums such that the absolute difference between k and the bitwise AND of the subarray elements is as small as possible. In other words, select a subarray nums[l..r] such that |k - (nums[l] AND nums[l + 1] ... AND nums[r])| is minimum.

Return the minimum possible value of the absolute difference.

A subarray is a contiguous non-empty sequence of elements within an array.

 

Example 1:

Input: nums = [1,2,4,5], k = 3

Output: 1

Explanation:

The subarray nums[2..3] has AND value 4, which gives the minimum absolute difference |3 - 4| = 1.

Example 2:

Input: nums = [1,2,1,2], k = 2

Output: 0

Explanation:

The subarray nums[1..1] has AND value 2, which gives the minimum absolute difference |2 - 2| = 0.

Example 3:

Input: nums = [1], k = 10

Output: 9

Explanation:

There is a single subarray with AND value 1, which gives the minimum absolute difference |10 - 1| = 9.

 

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= 109
1 <= k <= 109


Solution 1:

class Solution:
    def minimumDifference(self, nums: List[int], k: int) -> int:
        n = len(nums)
        min_diff = float('inf')
        prefix = [[0] * 32 for _ in range(n + 1)]

        for i in range(n):
            for bit in range(32):
                prefix[i + 1][bit] = prefix[i][bit]
                if (nums[i] >> bit) & 1:
                    prefix[i + 1][bit] += 1

        def query(l, r):
            curr_and = 0
            for bit in range(32):
                if prefix[r][bit] - prefix[l][bit] == r - l:
                    curr_and |= (1 << bit)

            return curr_and

        l = r = 0
        while r < n:
            curr_and = query(l, r + 1)
            min_diff = min(min_diff, abs(k - curr_and))
            while curr_and < k and l < r:
                l += 1
                curr_and = query(l, r + 1)
                min_diff = min(min_diff, abs(k - curr_and))
            r += 1
            if min_diff == 0:
                return min_diff

        return min_diff


Solution 2:

class Solution:
    def minimumDifference(self, nums: List[int], k: int) -> int:
        n = len(nums)
        min_diff = float('inf')
        bit_count = [0] * 32

        def addNum(num):
            for bit in range(32):
                if (num >> bit) & 1:
                    bit_count[bit] += 1    

        def removeNum(num):
            for bit in range(32):
                if (num >> bit) & 1:
                    bit_count[bit] -= 1 

        def query(l, r):
            curr_and = 0
            for bit in range(32):
                if bit_count[bit] == r - l + 1:
                    curr_and |= (1 << bit)    

            return curr_and

        l = r = 0
        while r < n:
            addNum(nums[r])
            curr_and = query(l, r)
            min_diff = min(min_diff, abs(k - curr_and))
            while curr_and < k and l < r:
                removeNum(nums[l])
                l += 1
                curr_and = query(l, r)
                min_diff = min(min_diff, abs(k - curr_and))
            r += 1
            if min_diff == 0:
                return min_diff

        return min_diff


Solution 3:

class Solution:
    def minimumDifference(self, nums: List[int], k: int) -> int:
        subarray_and = set()
        min_diff = float('inf')
        
        for num in nums:
            temp = set()
            for vals in subarray_and:
                temp.add(num & vals)

            temp.add(num)

            for vals in temp:
                min_diff = min(min_diff, abs(k - vals))

            subarray_and = temp

        return min_diff