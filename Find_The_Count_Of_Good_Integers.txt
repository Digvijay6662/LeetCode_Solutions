3272. Find the Count of Good Integers
Solved
Hard
Companies
Hint
You are given two positive integers n and k.

An integer x is called k-palindromic if:

x is a 
palindrome
.
x is divisible by k.
An integer is called good if its digits can be rearranged to form a k-palindromic integer. For example, for k = 2, 2020 can be rearranged to form the k-palindromic integer 2002, whereas 1010 cannot be rearranged to form a k-palindromic integer.

Return the count of good integers containing n digits.

Note that any integer must not have leading zeros, neither before nor after rearrangement. For example, 1010 cannot be rearranged to form 101.

 

Example 1:

Input: n = 3, k = 5

Output: 27

Explanation:

Some of the good integers are:

551 because it can be rearranged to form 515.
525 because it is already k-palindromic.
Example 2:

Input: n = 1, k = 4

Output: 2

Explanation:

The two good integers are 4 and 8.

Example 3:

Input: n = 5, k = 6

Output: 2468

 

Constraints:

1 <= n <= 10
1 <= k <= 9


Solution 1:

class Solution:
    def countGoodIntegers(self, n: int, k: int) -> int:
        # Calculate half the length of the palindrome
        half = (n + 1) // 2
        
        # A set to track already processed digit combinations
        seen = set()
        
        # Variable to accumulate the final result
        result = 0

        # Precompute factorials up to n! to use later in permutations calculations
        fact = [1]
        for i in range(1, n + 1):
            fact.append(fact[-1] * i)

        # Iterate through all possible half-palindromes
        for i in range(10 ** (half - 1), 10 ** half):
            # Form the full palindrome by mirroring the half, depending on whether n is odd or even
            if n % 2 == 1:
                num = str(i) + str(i)[::-1][1:]  # For odd-length palindromes
            else:
                num = str(i) + str(i)[::-1]  # For even-length palindromes
            
            # Check if the formed number is divisible by k
            if int(num) % k != 0:
                continue

            # If the sorted digits of the number have been processed already, skip it
            sorted_num = "".join(sorted(num))
            if sorted_num in seen:
                continue
                
            # Mark this digit combination as seen
            seen.add(sorted_num)
            
            # Count the occurrences of each digit in the number
            count = Counter(num)

            # Calculate the total number of permutations of the digits
            total = fact[n]  # Start with n!, the total number of permutations
            
            # Adjust the total permutations by dividing by factorial of counts for each digit
            # This accounts for repeated digits, which would otherwise overcount permutations
            for val in count.values():
                total //= fact[val]

            # Subtract permutations that start with zero (leading zeros are not allowed)
            if count["0"] > 0:
                # Calculate the permutations where the first digit is not zero
                current = fact[n - 1]  # Start with (n-1)! for non-zero starting digits
                count["0"] -= 1  # Temporarily decrease the count of zeros
                for x in count.values():
                    current //= fact[x]
                total -= current  # Subtract these invalid permutations from the total

            # Add the valid permutations to the result
            result += total

        return result


Solution 2:

class Solution:
    def countGoodIntegers(self, n: int, k: int) -> int:
        if n == 1:
            result = 0
            for i in range(1, 10):
                if i % k == 0:
                    result += 1

            return result

        # Calculate half the length of the palindrome
        half = (n + 1) // 2
        
        # A set to track already processed digit combinations
        seen = set()
        
        # Variable to accumulate the final result
        result = 0

        # Precompute factorials up to n! to use later in permutations calculations
        fact = [1]
        for i in range(1, n + 1):
            fact.append(fact[-1] * i)

        # Iterate through all possible half-palindromes
        for i in range(10 ** (half - 1), 10 ** half):
            # Form the full palindrome by mirroring the half, depending on whether n is odd or even
            if n % 2 == 1:
                num = str(i) + str(i // 10)[::-1]  # For odd-length palindromes
            else:
                num = str(i) + str(i)[::-1]  # For even-length palindromes
            
            # Check if the formed number is divisible by k
            if int(num) % k != 0:
                continue

            # If the sorted digits of the number have been processed already, skip it
            sorted_num = "".join(sorted(num))
            if sorted_num in seen:
                continue
                
            # Mark this digit combination as seen
            seen.add(sorted_num)
            
            # Count the occurrences of each digit in the number
            count = Counter(num)

            # Calculate the total number of permutations of the digits
            total = fact[n]  # Start with n!, the total number of permutations
            
            # Adjust the total permutations by dividing by factorial of counts for each digit
            # This accounts for repeated digits, which would otherwise overcount permutations
            for val in count.values():
                total //= fact[val]

            # Subtract permutations that start with zero (leading zeros are not allowed)
            if count["0"] > 0:
                # Calculate the permutations where the first digit is not zero
                current = fact[n - 1]  # Start with (n-1)! for non-zero starting digits
                count["0"] -= 1  # Temporarily decrease the count of zeros
                for x in count.values():
                    current //= fact[x]
                total -= current  # Subtract these invalid permutations from the total

            # Add the valid permutations to the result
            result += total

        return result


Solution 3:

class Solution:
    def countGoodIntegers(self, n: int, k: int) -> int:
        if n == 1:
            result = 0
            for i in range(1, 10):
                if i % k == 0:
                    result += 1
            return result

        # Calculate half the length of the palindrome
        half = (n + 1) // 2
        
        # A set to track already processed digit combinations
        seen = set()
        
        # Variable to accumulate the final result
        result = 0

        # Precompute factorials up to n! to use later in permutations calculations
        fact = [1]
        for i in range(1, n + 1):
            fact.append(fact[-1] * i)

        # Iterate through all possible half-palindromes
        for i in range(10 ** (half - 1), 10 ** half):
            # Form the full palindrome by mirroring the half, depending on whether n is odd or even
            if n % 2 == 1:
                num = str(i) + str(i // 10)[::-1]  # For odd-length palindromes
            else:
                num = str(i) + str(i)[::-1]  # For even-length palindromes
            
            # Check if the formed number is divisible by k
            if int(num) % k != 0:
                continue

            # If the sorted digits of the number have been processed already, skip it
            sorted_num = "".join(sorted(num))
            if sorted_num in seen:
                continue
                
            # Mark this digit combination as seen
            seen.add(sorted_num)
            
            # Count the occurrences of each digit in the number
            count = Counter(num)

            # first position cannot be 0
            # Already placed one number on first position, so we can take remaining n - 1
            total = (n - count['0']) * fact[n - 1] 

            # Remove duplicates to handle repeated digits
            for x in count.values():
                total //= fact[x]

            # Add the valid permutations to the result
            result += total

        return result