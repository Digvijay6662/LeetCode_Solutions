540. Single Element in a Sorted Array
Solved
Medium
Topics
Companies
You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once.

Return the single element that appears only once.

Your solution must run in O(log n) time and O(1) space.

 

Example 1:

Input: nums = [1,1,2,3,3,4,4,8,8]
Output: 2
Example 2:

Input: nums = [3,3,7,7,10,11,11]
Output: 10
 

Constraints:

1 <= nums.length <= 105
0 <= nums[i] <= 105


Solution 1:

class Solution:
    def singleNonDuplicate(self, nums: List[int]) -> int:
        n = len(nums)
        if n == 1:
            return nums[0]

        def solve(left, right):
            if left > right:
                return None

            mid = left + (right - left) // 2

            if mid - 1 == -1 and nums[mid] != nums[mid + 1]:
                return nums[mid]

            if mid + 1 == n and nums[mid] != nums[mid - 1]:
                return nums[mid]

            if nums[mid - 1] != nums[mid] and nums[mid + 1] != nums[mid]:
                return nums[mid]

            left_result = solve(left, mid - 1)
            if left_result is not None:
                return left_result

            right_result = solve(mid + 1, right)
            return right_result

        return solve(0, n - 1)


Solution 2:

class Solution:
    def singleNonDuplicate(self, nums: List[int]) -> int:
        n = len(nums)
        if n == 1:
            return nums[0]
        left, right = 0, n - 1
        while left < right:
            mid = left + (right - left)//2

            if mid % 2 == 0 and nums[mid] != nums[mid + 1] or mid % 2 == 1 and nums[mid] != nums[mid - 1]:
                right = mid

            else:
                left = mid + 1

        return nums[left]
                