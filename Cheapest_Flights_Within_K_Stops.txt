787. Cheapest Flights Within K Stops
Medium
8.2K
342
Companies
There are n cities connected by some number of flights. You are given an array flights where flights[i] = [fromi, toi, pricei] indicates that there is a flight from city fromi to city toi with cost pricei.

You are also given three integers src, dst, and k, return the cheapest price from src to dst with at most k stops. If there is no such route, return -1.

 

Example 1:


Input: n = 4, flights = [[0,1,100],[1,2,100],[2,0,100],[1,3,600],[2,3,200]], src = 0, dst = 3, k = 1
Output: 700
Explanation:
The graph is shown above.
The optimal path with at most 1 stop from city 0 to 3 is marked in red and has cost 100 + 600 = 700.
Note that the path through cities [0,1,2,3] is cheaper but is invalid because it uses 2 stops.
Example 2:


Input: n = 3, flights = [[0,1,100],[1,2,100],[0,2,500]], src = 0, dst = 2, k = 1
Output: 200
Explanation:
The graph is shown above.
The optimal path with at most 1 stop from city 0 to 2 is marked in red and has cost 100 + 100 = 200.
Example 3:


Input: n = 3, flights = [[0,1,100],[1,2,100],[0,2,500]], src = 0, dst = 2, k = 0
Output: 500
Explanation:
The graph is shown above.
The optimal path with no stops from city 0 to 2 is marked in red and has cost 500.
 

Constraints:

1 <= n <= 100
0 <= flights.length <= (n * (n - 1) / 2)
flights[i].length == 3
0 <= fromi, toi < n
fromi != toi
1 <= pricei <= 104
There will not be any multiple flights between two cities.
0 <= src, dst, k < n
src != dst


Solution 1: Bellman-Ford

class Solution:
    def findCheapestPrice(self, n: int, flights: List[List[int]], src: int, dst: int, k: int) -> int:
        prices = [float('inf')] * n
        prices[src] = 0

        for _ in range(k + 1):
            temp = prices.copy()
            for s, d, p in flights:
                if prices[s] == float('inf'):
                    continue
                elif prices[s] + p < temp[d]:
                    temp[d] = prices[s] + p

            prices = temp

        return -1 if prices[dst] == float('inf') else prices[dst]



Solution 2:

class Solution:
    def findCheapestPrice(self, n: int, flights: List[List[int]], src: int, dst: int, k: int) -> int:
        prices = [float('inf')] * n
        prices[src] = 0

        for _ in range(k + 1):
            isUpdated = False
            temp = prices.copy()
            for s, d, p in flights:
                if prices[s] == float('inf'):
                    continue
                elif prices[s] + p < temp[d]:
                    temp[d] = prices[s] + p
                    isUpdated = True

            if not isUpdated:
                break

            prices = temp

        return -1 if prices[dst] == float('inf') else prices[dst]


Solution 3:

class Solution:
    def findCheapestPrice(self, n: int, flights: List[List[int]], src: int, dst: int, k: int) -> int:
        prices = [float('inf')] * n
        prices[src] = 0

        adjMap = defaultdict(list)
        for s, d, p in flights:
            adjMap[s].append((d, p))

        for _ in range(k + 1):
            temp = prices.copy()
            isUpdated = False

            for node in range(n):
                if prices[node] != float('inf'):
                    for neighbor, price in adjMap[node]:
                        newPrice = prices[node] + price
                        if newPrice < temp[neighbor]:
                            temp[neighbor] = newPrice
                            isUpdated = True

            if not isUpdated:
                break

            prices = temp

        return -1 if prices[dst] == float('inf') else prices[dst]


