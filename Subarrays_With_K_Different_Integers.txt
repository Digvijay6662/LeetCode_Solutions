992. Subarrays with K Different Integers
Solved
Hard
Topics
Companies
Given an integer array nums and an integer k, return the number of good subarrays of nums.

A good array is an array where the number of different integers in that array is exactly k.

For example, [1,2,3,1,2] has 3 different integers: 1, 2, and 3.
A subarray is a contiguous part of an array.

 

Example 1:

Input: nums = [1,2,1,2,3], k = 2
Output: 7
Explanation: Subarrays formed with exactly 2 different integers: [1,2], [2,1], [1,2], [2,3], [1,2,1], [2,1,2], [1,2,1,2]
Example 2:

Input: nums = [1,2,1,3,4], k = 3
Output: 3
Explanation: Subarrays formed with exactly 3 different integers: [1,2,1,3], [2,1,3], [1,3,4].
 

Constraints:

1 <= nums.length <= 2 * 104
1 <= nums[i], k <= nums.length


Solution 1:

class Solution:
    def subarraysWithKDistinct(self, nums: List[int], k: int) -> int:
        n = len(nums)

        def atMost(k):
            hashMap = defaultdict(int)
            result = i = 0
            for j in range(n):
                hashMap[nums[j]] += 1
                while len(hashMap) > k:
                    hashMap[nums[i]] -= 1
                    if hashMap[nums[i]] == 0:
                        del hashMap[nums[i]]
                    i += 1
                result += j - i + 1

            return result

        return atMost(k) - atMost(k - 1)


Solution 2:

class Solution:
    def subarraysWithKDistinct(self, nums: List[int], k: int) -> int:
        n = len(nums)
        hashMap = defaultdict(int)
        result = 0
        start = start_k = 0

        for j in range(n):
            hashMap[nums[j]] += 1
            if len(hashMap) > k:
                del hashMap[nums[start_k]]
                start_k += 1
                start = start_k
            if len(hashMap) == k:
                while hashMap[nums[start_k]] > 1:
                    hashMap[nums[start_k]] -= 1
                    start_k += 1            
                result += start_k - start + 1
            
        return result
