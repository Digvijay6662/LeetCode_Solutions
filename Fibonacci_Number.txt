509. Fibonacci Number
Solved
Easy
Topics
Companies
The Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1. That is,

F(0) = 0, F(1) = 1
F(n) = F(n - 1) + F(n - 2), for n > 1.
Given n, calculate F(n).

 

Example 1:

Input: n = 2
Output: 1
Explanation: F(2) = F(1) + F(0) = 1 + 0 = 1.
Example 2:

Input: n = 3
Output: 2
Explanation: F(3) = F(2) + F(1) = 1 + 1 = 2.
Example 3:

Input: n = 4
Output: 3
Explanation: F(4) = F(3) + F(2) = 2 + 1 = 3.
 

Constraints:

0 <= n <= 30


Solution 1:

class Solution:
    def fib(self, n: int) -> int:
        if n < 2:
            return n
        first, second = 0, 1
        for i in range(2, n + 1):
            first, second = second, first + second

        return second


Solution 2:

class Solution:
    def fib(self, n: int) -> int:
        
        def multiply(mat1, mat2):
            result = [[0, 0], [0, 0]]
            for i in range(2):
                for j in range(2):
                    for k in range(2):
                        result[i][j] += mat1[i][k] * mat2[k][j]
            return result

        def custom_pow(base, p):
            if p == 0:
                return [[1, 0], [0, 1]]
            if p == 1:
                return base
            if p % 2 == 0:
                half_pow = custom_pow(base, p // 2)
                return multiply(half_pow, half_pow)
            else:
                return multiply(custom_pow(base, p - 1), base)

        if n == 0:
            return 0

        mat = [[1, 1], [1, 0]]
        result = custom_pow(mat, n - 1)

        return result[0][0]