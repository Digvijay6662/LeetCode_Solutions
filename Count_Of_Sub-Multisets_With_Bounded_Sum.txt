2902. Count of Sub-Multisets With Bounded Sum
Solved
Hard
Companies
Hint
You are given a 0-indexed array nums of non-negative integers, and two integers l and r.

Return the count of sub-multisets within nums where the sum of elements in each subset falls within the inclusive range of [l, r].

Since the answer may be large, return it modulo 109 + 7.

A sub-multiset is an unordered collection of elements of the array in which a given value x can occur 0, 1, ..., occ[x] times, where occ[x] is the number of occurrences of x in the array.

Note that:

Two sub-multisets are the same if sorting both sub-multisets results in identical multisets.
The sum of an empty multiset is 0.
 

Example 1:

Input: nums = [1,2,2,3], l = 6, r = 6
Output: 1
Explanation: The only subset of nums that has a sum of 6 is {1, 2, 3}.
Example 2:

Input: nums = [2,1,4,2,7], l = 1, r = 5
Output: 7
Explanation: The subsets of nums that have a sum within the range [1, 5] are {1}, {2}, {4}, {2, 2}, {1, 2}, {1, 4}, and {1, 2, 2}.
Example 3:

Input: nums = [1,2,1,3,5,2], l = 3, r = 5
Output: 9
Explanation: The subsets of nums that have a sum within the range [3, 5] are {3}, {5}, {1, 2}, {1, 3}, {2, 2}, {2, 3}, {1, 1, 2}, {1, 1, 3}, and {1, 2, 2}.
 

Constraints:

1 <= nums.length <= 2 * 104
0 <= nums[i] <= 2 * 104
Sum of nums does not exceed 2 * 104.
0 <= l <= r <= 2 * 104


Solution 1:

class Solution:
    def countSubMultisets(self, nums: List[int], l: int, r: int) -> int:
        mod = 1000000007
        countMap = defaultdict(int)

        for num in nums:
            countMap[num] += 1

        dp = [0] * (r + 1)
        dp[0] = 1

        for num, freq in countMap.items():
            pSum = list(dp)
            for i in range(num, r + 1):
                pSum[i] += pSum[i - num]
                pSum[i] %= mod

            for i in range(r, -1, -1):
                if num > 0:
                    j = i - (freq + 1) * num
                    dp[i] = pSum[i] - (pSum[j] if j >= 0 else 0)
                    dp[i] = dp[i] % mod
                else:
                    dp[i] = dp[i] * (freq + 1)
                    dp[i] %= mod

        res = 0
        for i in range(l, r + 1):
            res = (res + dp[i]) % mod
        return res


Solution 2:

class Solution:
    def countSubMultisets(self, nums: List[int], l: int, r: int) -> int:
        mod = 10 ** 9 + 7
        dp = [1] + [0] * r
        counts = Counter(nums)
        zeros = counts.pop(0, 0) + 1

        for a, c in counts.items():
            preSum = list(dp)
            for i in range(a, r + 1):
                preSum[i] += preSum[i - a]

            for k in range(r, 0, -1):
                dp[k] = preSum[k] - preSum[k - a * c - a] if k >= a * c + a else preSum[k]

        return zeros * sum(dp[l:r+1]) % mod