282. Expression Add Operators
Solved
Hard
Topics
Companies
Hint
Given a string num that contains only digits and an integer target, return all possibilities to insert the binary operators '+', '-', and/or '*' between the digits of num so that the resultant expression evaluates to the target value.

Note that operands in the returned expressions should not contain leading zeros.

 

Example 1:

Input: num = "123", target = 6
Output: ["1*2*3","1+2+3"]
Explanation: Both "1*2*3" and "1+2+3" evaluate to 6.
Example 2:

Input: num = "232", target = 8
Output: ["2*3+2","2+3*2"]
Explanation: Both "2*3+2" and "2+3*2" evaluate to 8.
Example 3:

Input: num = "3456237490", target = 9191
Output: []
Explanation: There are no expressions that can be created from "3456237490" to evaluate to 9191.
 

Constraints:

1 <= num.length <= 10
num consists of only digits.
-231 <= target <= 231 - 1


Solution 1:

class Solution:
    def addOperators(self, num: str, target: int) -> List[str]:
        
        def backtrack(index, path, value, last_operand):
            if index == len(num):
                if value == target:
                    result.append(path)
                return

            for i in range(index + 1, len(num) + 1):
                curr_str = num[index:i]
                curr_num = int(curr_str)

                if index == 0:
                    # Start of the expression
                    backtrack(i, curr_str, curr_num, curr_num)
                else:
                    backtrack(i, path + '+' + curr_str, value + curr_num, curr_num)
                    backtrack(i, path + '-' + curr_str, value - curr_num, -curr_num)
                    # Handle the multiply operator by reversing its effect on the expression's value
                    backtrack(i, path + '*' + curr_str, value - last_operand + last_operand * curr_num, last_operand * curr_num)

                if curr_num == 0:
                    break  # Avoid leading zeros

        result = []
        backtrack(0, "", 0, 0)
        return result