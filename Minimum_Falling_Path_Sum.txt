931. Minimum Falling Path Sum
Solved
Medium
Topics
Companies
Given an n x n array of integers matrix, return the minimum sum of any falling path through matrix.

A falling path starts at any element in the first row and chooses the element in the next row that is either directly below or diagonally left/right. Specifically, the next element from position (row, col) will be (row + 1, col - 1), (row + 1, col), or (row + 1, col + 1).

 

Example 1:


Input: matrix = [[2,1,3],[6,5,4],[7,8,9]]
Output: 13
Explanation: There are two falling paths with a minimum sum as shown.
Example 2:


Input: matrix = [[-19,57],[-40,-5]]
Output: -59
Explanation: The falling path with a minimum sum is shown.
 

Constraints:

n == matrix.length == matrix[i].length
1 <= n <= 100
-100 <= matrix[i][j] <= 100


Solution 1:

class Solution:
    def minFallingPathSum(self, matrix: List[List[int]]) -> int:
        n = len(matrix)
        dp = [[float('inf') for _ in range(n)] for _ in range(n)]

        def solve(r, c):
            if r == n:
                return 0
            
            if dp[r][c] != float('inf'):
                return dp[r][c]

            down = solve(r + 1, c)
            left = solve(r + 1, c - 1) if c - 1 >= 0 else float('inf')
            right = solve(r + 1, c + 1) if c + 1 < n else float('inf')

            dp[r][c] = matrix[r][c] + min(down, left, right)
            return dp[r][c]

        min_sum = float('inf')

        for i in range(n):
            min_sum = min(min_sum, solve(0, i))
        
        return min_sum


Solution 2:

class Solution:
    def minFallingPathSum(self, matrix: List[List[int]]) -> int:
        n = len(matrix)
        dp = [[float('inf') for _ in range(n)] for _ in range(n)]

        for i in range(n):
            dp[n - 1][i] = matrix[n - 1][i]

        for r in range(n - 2, -1, -1):
            for c in range(n):
                dp[r][c] = matrix[r][c] + min(
                    dp[r + 1][c],
                    dp[r + 1][c - 1] if c > 0 else float('inf'),
                    dp[r + 1][c + 1] if c < n - 1 else float('inf')
                )

        return min(dp[0])


Solution 3:

class Solution:
    def minFallingPathSum(self, matrix: List[List[int]]) -> int:
        n = len(matrix)
        prev = [float('inf') for _ in range(n)]

        for i in range(n):
            prev[i] = matrix[n - 1][i]

        for r in range(n - 2, -1, -1):
            curr = [float('inf') for _ in range(n)]
            for c in range(n):
                curr[c] = matrix[r][c] + min(
                    prev[c],
                    prev[c - 1] if c > 0 else float('inf'),
                    prev[c + 1] if c < n - 1 else float('inf')
                )
            prev = curr

        return min(prev)