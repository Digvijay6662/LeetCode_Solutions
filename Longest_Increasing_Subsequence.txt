300. Longest Increasing Subsequence
Medium
17.2K
323
Companies
Given an integer array nums, return the length of the longest strictly increasing 
subsequence
.

 

Example 1:

Input: nums = [10,9,2,5,3,7,101,18]
Output: 4
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.
Example 2:

Input: nums = [0,1,0,3,2,3]
Output: 4
Example 3:

Input: nums = [7,7,7,7,7,7,7]
Output: 1
 

Constraints:

1 <= nums.length <= 2500
-104 <= nums[i] <= 104
 

Follow up: Can you come up with an algorithm that runs in O(n log(n)) time complexity?

Solution 1:

class Solution:
    def lengthOfLIS(self, nums: List[int]) -> int:
        n = len(nums)
        dp = [1] * n

        for i in range(n -1, -1, -1):
            for j in range(i+1, n):
                if nums[j] > nums[i]:
                    dp[i] = max(dp[i], 1 + dp[j])


        return max(dp)


Solution 2:

class Solution:
    def lengthOfLIS(self, nums: List[int]) -> int:
        n = len(nums)
        dp = [nums[0]]
        
        for i in range(1, n):
            if nums[i] > dp[-1]:
                dp.append(nums[i])
            else:
                left, right = 0, len(dp) - 1
                while left < right:
                    mid = (left + right) // 2
                    if dp[mid] < nums[i]:
                        left = mid + 1
                    else:
                        right = mid
                dp[left] = nums[i]
        
        return len(dp)
