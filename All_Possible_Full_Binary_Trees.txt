894. All Possible Full Binary Trees
Medium
4.4K
294
Companies
Given an integer n, return a list of all possible full binary trees with n nodes. Each node of each tree in the answer must have Node.val == 0.

Each element of the answer is the root node of one possible tree. You may return the final list of trees in any order.

A full binary tree is a binary tree where each node has exactly 0 or 2 children.

 

Example 1:


Input: n = 7
Output: [[0,0,0,null,null,0,0,null,null,0,0],[0,0,0,null,null,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,null,null,null,null,0,0],[0,0,0,0,0,null,null,0,0]]
Example 2:

Input: n = 3
Output: [[0,0,0]]
 

Constraints:

1 <= n <= 20


Solution 1:

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def allPossibleFBT(self, n: int) -> List[Optional[TreeNode]]:

        dp = {}

        def solve(i):

            if i in dp:
                return dp[i]

            if i == 1:
                return [TreeNode(val=0)]

            if i % 2 == 0:
                return []

            res = []
            for j in range(1, i, 2):
                left = solve(j)
                right = solve(i - j - 1)
                
                for l in left:
                    for r in right:
                        root = TreeNode(val=0)
                        root.left = l
                        root.right = r
                        res.append(root)
            dp[i] = res
            return res

        return solve(n)


Solution 2:

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def allPossibleFBT(self, n: int) -> List[Optional[TreeNode]]:

        if n % 2 == 0:
            return []
            
        dp = [None] * (n + 1)
        dp[0] = []
        dp[1] = [TreeNode(val=0)]

        for i in range(3, n + 1, 2):
            dp[i] = []
            for j in range(1, i, 2):
                left = dp[j]
                right = dp[i - j - 1]
                
                for l in left:
                    for r in right:
                        root = TreeNode(val=0)
                        root.left = l
                        root.right = r
                        dp[i].append(root)

        return dp[n]

