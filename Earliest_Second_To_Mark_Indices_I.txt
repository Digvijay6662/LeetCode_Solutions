3048. Earliest Second to Mark Indices I
Solved
Medium
Companies
Hint
You are given two 1-indexed integer arrays, nums and, changeIndices, having lengths n and m, respectively.

Initially, all indices in nums are unmarked. Your task is to mark all indices in nums.

In each second, s, in order from 1 to m (inclusive), you can perform one of the following operations:

Choose an index i in the range [1, n] and decrement nums[i] by 1.
If nums[changeIndices[s]] is equal to 0, mark the index changeIndices[s].
Do nothing.
Return an integer denoting the earliest second in the range [1, m] when all indices in nums can be marked by choosing operations optimally, or -1 if it is impossible.

 

Example 1:

Input: nums = [2,2,0], changeIndices = [2,2,2,2,3,2,2,1]
Output: 8
Explanation: In this example, we have 8 seconds. The following operations can be performed to mark all indices:
Second 1: Choose index 1 and decrement nums[1] by one. nums becomes [1,2,0].
Second 2: Choose index 1 and decrement nums[1] by one. nums becomes [0,2,0].
Second 3: Choose index 2 and decrement nums[2] by one. nums becomes [0,1,0].
Second 4: Choose index 2 and decrement nums[2] by one. nums becomes [0,0,0].
Second 5: Mark the index changeIndices[5], which is marking index 3, since nums[3] is equal to 0.
Second 6: Mark the index changeIndices[6], which is marking index 2, since nums[2] is equal to 0.
Second 7: Do nothing.
Second 8: Mark the index changeIndices[8], which is marking index 1, since nums[1] is equal to 0.
Now all indices have been marked.
It can be shown that it is not possible to mark all indices earlier than the 8th second.
Hence, the answer is 8.
Example 2:

Input: nums = [1,3], changeIndices = [1,1,1,2,1,1,1]
Output: 6
Explanation: In this example, we have 7 seconds. The following operations can be performed to mark all indices:
Second 1: Choose index 2 and decrement nums[2] by one. nums becomes [1,2].
Second 2: Choose index 2 and decrement nums[2] by one. nums becomes [1,1].
Second 3: Choose index 2 and decrement nums[2] by one. nums becomes [1,0].
Second 4: Mark the index changeIndices[4], which is marking index 2, since nums[2] is equal to 0.
Second 5: Choose index 1 and decrement nums[1] by one. nums becomes [0,0].
Second 6: Mark the index changeIndices[6], which is marking index 1, since nums[1] is equal to 0.
Now all indices have been marked.
It can be shown that it is not possible to mark all indices earlier than the 6th second.
Hence, the answer is 6.
Example 3:

Input: nums = [0,1], changeIndices = [2,2,2]
Output: -1
Explanation: In this example, it is impossible to mark all indices because index 1 isn't in changeIndices.
Hence, the answer is -1.
 

Constraints:

1 <= n == nums.length <= 2000
0 <= nums[i] <= 109
1 <= m == changeIndices.length <= 2000
1 <= changeIndices[i] <= n


Solution 1:

class Solution:
    def earliestSecondToMarkIndices(self, nums: List[int], changeIndices: List[int]) -> int:
        n, m = len(nums), len(changeIndices)

        def check(t):
            # Track the last operation time for each index affected by changeIndices.
            last_operation_time = defaultdict(int)
            for i in range(t):
                last_operation_time[changeIndices[i] - 1] = i + 1

            # Ensure all indices have at least one operation planned.
            if len(last_operation_time) != n:
                return False

            # Sort the operations by their timing.
            operations = sorted(
                [[time, i] for i, time in last_operation_time.items()], key=lambda x: x[0]
            )

            # Track the total number of required operations for all indices.
            used_operations = 0
            for operation_time, index in operations:
                # Calculate the required number of operations for the current index.
                required_operations = nums[index] + 1
                if used_operations + required_operations > operation_time:
                    return False

                used_operations += required_operations

            return True  # All indices can be marked within 't' seconds.

        # Iterate through all possible time limits (seconds) and check if all indices can be marked.
        for t in range(1, m + 1):
            if check(t):
                return t  # Return the earliest second if possible.

        return -1  # No possible timing to mark all indices


Solution 2:

class Solution:
    def earliestSecondToMarkIndices(self, nums: List[int], changeIndices: List[int]) -> int:
        n, m = len(nums), len(changeIndices)

        def check(t):
            # Track the last operation time for each index affected by changeIndices.
            last_operation_time = defaultdict(int)
            for i in range(t):
                last_operation_time[changeIndices[i] - 1] = i + 1

            # Ensure all indices have at least one operation planned.
            if len(last_operation_time) != n:
                return False

            # Sort the operations by their timing.
            operations = sorted(
                [[time, i] for i, time in last_operation_time.items()], key=lambda x: x[0]
            )

            # Track the total number of required operations for all indices.
            used_operations = 0
            for operation_time, index in operations:
                # Calculate the required number of operations for the current index.
                required_operations = nums[index] + 1
                if used_operations + required_operations > operation_time:
                    return False

                used_operations += required_operations

            return True  # All indices can be marked within 't' seconds.

        left, right = n, m
        result = -1

        while left <= right:
            mid = left + (right - left) // 2
            if check(mid):
                result = mid
                right = mid - 1
            else:
                left = mid + 1

        return result