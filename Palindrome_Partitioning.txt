131. Palindrome Partitioning
Medium
11K
346
Companies
Given a string s, partition s such that every 
substring
 of the partition is a 
palindrome
. Return all possible palindrome partitioning of s.

 

Example 1:

Input: s = "aab"
Output: [["a","a","b"],["aa","b"]]
Example 2:

Input: s = "a"
Output: [["a"]]
 

Constraints:

1 <= s.length <= 16
s contains only lowercase English letters.


Solution:

class Solution:
    def partition(self, s: str) -> List[List[str]]:
        n = len(s)
        res = []

        def isPalindrome(i, j):
            while i < j:
                if s[i] != s[j]:
                    return False
                i += 1
                j -= 1
            return True

        def backtrack(i, curr):
            if i == n:
                res.append(curr.copy())
                return

            for j in range(i, n):
                if isPalindrome(i, j):
                    curr.append(s[i:j + 1])
                    backtrack(j + 1, curr)
                    curr.pop()

        backtrack(0, [])
        return res
