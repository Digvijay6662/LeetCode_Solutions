2785. Sort Vowels in a String
Medium
49
0
Companies
Given a 0-indexed string s, permute s to get a new string t such that:

All consonants remain in their original places. More formally, if there is an index i with 0 <= i < s.length such that s[i] is a consonant, then t[i] = s[i].
The vowels must be sorted in the nondecreasing order of their ASCII values. More formally, for pairs of indices i, j with 0 <= i < j < s.length such that s[i] and s[j] are vowels, then t[i] must not have a higher ASCII value than t[j].
Return the resulting string.

The vowels are 'a', 'e', 'i', 'o', and 'u', and they can appear in lowercase or uppercase. Consonants comprise all letters that are not vowels.

 

Example 1:

Input: s = "lEetcOde"
Output: "lEOtcede"
Explanation: 'E', 'O', and 'e' are the vowels in s; 'l', 't', 'c', and 'd' are all consonants. The vowels are sorted according to their ASCII values, and the consonants remain in the same places.
Example 2:

Input: s = "lYmpH"
Output: "lYmpH"
Explanation: There are no vowels in s (all characters in s are consonants), so we return "lYmpH".
 

Constraints:

1 <= s.length <= 105
s consists only of letters of the English alphabet in uppercase and lowercase.


Solution 1:

class Solution:
    def sortVowels(self, s: str) -> str:
        n = len(s)
        minHeap = []
        vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        
        for c in s:
            if c in vowels:
                heapq.heappush(minHeap, c)
                
        res = ['a'] * n
        
        for i in range(n):
            if s[i] in vowels:
                res[i] = heapq.heappop(minHeap)
            else:
                res[i] = s[i]
                
        return ''.join(res)


Solution 2:

class Solution:
    def sortVowels(self, s: str) -> str:
        n = len(s)
        vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        v = []

        for c in s:
            if c in vowels:
                v.append(c)

        v.sort()
        j = 0
        res = ['a'] * n
        for i in range(n):
            if s[i] in vowels:
                res[i] = v[j]
                j += 1
            else:
                res[i] = s[i]

        return ''.join(res)

        

Solution 3:

class Solution:
    def sortVowels(self, s: str) -> str:
        vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        n = len(s)
        res = [''] * n
        v = []

        for i, c in enumerate(s):
            if c in vowels:
                v.append(c)
            else:
                res[i] = c

        v.sort()
        j = 0
        for i in range(n):
            if not res[i]:
                res[i] = v[j]
                j += 1

        return ''.join(res)