221. Maximal Square
Medium
9.5K
198
Companies
Given an m x n binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area.

 

Example 1:


Input: matrix = [["1","0","1","0","0"],["1","0","1","1","1"],["1","1","1","1","1"],["1","0","0","1","0"]]
Output: 4
Example 2:


Input: matrix = [["0","1"],["1","0"]]
Output: 1
Example 3:

Input: matrix = [["0"]]
Output: 0
 

Constraints:

m == matrix.length
n == matrix[i].length
1 <= m, n <= 300
matrix[i][j] is '0' or '1'.


Solution 1:

class Solution:
    def maximalSquare(self, matrix: List[List[str]]) -> int:
        m = len(matrix)
        n = len(matrix[0])
        dp = [[0] * (n + 1) for _ in range(m + 1)]
        sideLength = 0

        for i in range(1, m + 1):
            for j in range(1, n + 1):
                if matrix[i - 1][j - 1] == '1':
                    dp[i][j] = min(dp[i][j - 1], dp[i - 1][j], dp[i - 1][j - 1]) + 1
                    sideLength = max(sideLength, dp[i][j])

        return sideLength * sideLength


Solution 2:

class Solution:
    def maximalSquare(self, matrix: List[List[str]]) -> int:
        m = len(matrix)
        n = len(matrix[0])
        dp = [[0] * (n + 1) for _ in range(m + 1)]
        sideLength = 0

        for i in range(m - 1, - 1, - 1):
            for j in range(n - 1, -1, -1):
                if matrix[i][j] == '1':
                    dp[i][j] = min(dp[i][j + 1], dp[i + 1][j], dp[i + 1][j + 1]) + 1
                    sideLength = max(sideLength, dp[i][j])

        return sideLength * sideLength


Solution 3:

class Solution:
    def maximalSquare(self, matrix: List[List[str]]) -> int:
        m = len(matrix)
        n = len(matrix[0])
        prev = [0] * (n + 1)
        sideLength = 0

        for i in range(m - 1, - 1, - 1):
            curr = [0] * (n + 1)
            for j in range(n - 1, -1, -1):
                if matrix[i][j] == '1':
                    curr[j] = min(curr[j + 1], prev[j], prev[j + 1]) + 1
                    sideLength = max(sideLength, curr[j])

            prev = curr

        return sideLength * sideLength


Solution 4:

class Solution:
    def maximalSquare(self, matrix: List[List[str]]) -> int:
        if not matrix:
            return 0

        m = len(matrix)
        n = len(matrix[0])
        dp = [0] * (n + 1)
        side_length = 0
        prev = 0

        for i in range(m - 1, -1, -1):
            for j in range(n - 1, -1, -1):
                temp = dp[j]
                if matrix[i][j] == '1':
                    dp[j] = min(dp[j], dp[j + 1], prev) + 1
                    side_length = max(side_length, dp[j])
                else:
                    dp[j] = 0
                prev = temp 

        return side_length * side_length