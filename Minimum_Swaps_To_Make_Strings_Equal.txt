1247. Minimum Swaps to Make Strings Equal
Solved
Medium
Topics
Companies
Hint
You are given two strings s1 and s2 of equal length consisting of letters "x" and "y" only. Your task is to make these two strings equal to each other. You can swap any two characters that belong to different strings, which means: swap s1[i] and s2[j].

Return the minimum number of swaps required to make s1 and s2 equal, or return -1 if it is impossible to do so.

 

Example 1:

Input: s1 = "xx", s2 = "yy"
Output: 1
Explanation: Swap s1[0] and s2[1], s1 = "yx", s2 = "yx".
Example 2:

Input: s1 = "xy", s2 = "yx"
Output: 2
Explanation: Swap s1[0] and s2[0], s1 = "yy", s2 = "xx".
Swap s1[0] and s2[1], s1 = "xy", s2 = "xy".
Note that you cannot swap s1[0] and s1[1] to make s1 equal to "yx", cause we can only swap chars in different strings.
Example 3:

Input: s1 = "xx", s2 = "xy"
Output: -1
 

Constraints:

1 <= s1.length, s2.length <= 1000
s1.length == s2.length
s1, s2 only contain 'x' or 'y'.


Solution 1:

class Solution:
    def minimumSwap(self, s1: str, s2: str) -> int:
        n = len(s1)
        count_x_y = count_y_x = 0

        for i in range(n):
            if s1[i] == s2[i]:
                continue

            if s1[i] == 'x':
                count_x_y += 1
            else:
                count_y_x += 1

        result = 0
        # Calculate swaps for 'xy' pairs
        result += count_x_y // 2
        # Calculate swaps for 'yx' pairs
        result += count_y_x // 2

        # Check if there are unmatched characters
        if count_x_y % 2 != count_y_x % 2:
            return -1

        # Check if there is one 'xy' and one 'yx', then we need 2 more swaps
        if count_x_y % 2 == 1:
            result += 2

        return result
