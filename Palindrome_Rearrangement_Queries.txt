2983. Palindrome Rearrangement Queries
Solved
Hard
Companies
Hint
You are given a 0-indexed string s having an even length n.

You are also given a 0-indexed 2D integer array, queries, where queries[i] = [ai, bi, ci, di].

For each query i, you are allowed to perform the following operations:

Rearrange the characters within the substring s[ai:bi], where 0 <= ai <= bi < n / 2.
Rearrange the characters within the substring s[ci:di], where n / 2 <= ci <= di < n.
For each query, your task is to determine whether it is possible to make s a palindrome by performing the operations.

Each query is answered independently of the others.

Return a 0-indexed array answer, where answer[i] == true if it is possible to make s a palindrome by performing operations specified by the ith query, and false otherwise.

A substring is a contiguous sequence of characters within a string.
s[x:y] represents the substring consisting of characters from the index x to index y in s, both inclusive.
 

Example 1:

Input: s = "abcabc", queries = [[1,1,3,5],[0,2,5,5]]
Output: [true,true]
Explanation: In this example, there are two queries:
In the first query:
- a0 = 1, b0 = 1, c0 = 3, d0 = 5.
- So, you are allowed to rearrange s[1:1] => abcabc and s[3:5] => abcabc.
- To make s a palindrome, s[3:5] can be rearranged to become => abccba.
- Now, s is a palindrome. So, answer[0] = true.
In the second query:
- a1 = 0, b1 = 2, c1 = 5, d1 = 5.
- So, you are allowed to rearrange s[0:2] => abcabc and s[5:5] => abcabc.
- To make s a palindrome, s[0:2] can be rearranged to become => cbaabc.
- Now, s is a palindrome. So, answer[1] = true.
Example 2:

Input: s = "abbcdecbba", queries = [[0,2,7,9]]
Output: [false]
Explanation: In this example, there is only one query.
a0 = 0, b0 = 2, c0 = 7, d0 = 9.
So, you are allowed to rearrange s[0:2] => abbcdecbba and s[7:9] => abbcdecbba.
It is not possible to make s a palindrome by rearranging these substrings because s[3:6] is not a palindrome.
So, answer[0] = false.
Example 3:

Input: s = "acbcab", queries = [[1,2,4,5]]
Output: [true]
Explanation: In this example, there is only one query.
a0 = 1, b0 = 2, c0 = 4, d0 = 5.
So, you are allowed to rearrange s[1:2] => acbcab and s[4:5] => acbcab.
To make s a palindrome s[1:2] can be rearranged to become abccab.
Then, s[4:5] can be rearranged to become abccba.
Now, s is a palindrome. So, answer[0] = true.
 

Constraints:

2 <= n == s.length <= 105
1 <= queries.length <= 105
queries[i].length == 4
ai == queries[i][0], bi == queries[i][1]
ci == queries[i][2], di == queries[i][3]
0 <= ai <= bi < n / 2
n / 2 <= ci <= di < n 
n is even.
s consists of only lowercase English letters.


Solution 1:

class Solution:
    def __init__(self):
        self.MOD = 10**9 + 7

    def canMakePalindromeQueries(self, s: str, queries: List[List[int]]) -> List[bool]:
        n = len(s)
        half = n // 2
        #Unequal letter counts on left and right
        left = s[:half]
        right =s[n - 1:half - 1:-1]

        if Counter(left) != Counter(right): 
            return [False] * len(queries)

        #initialize string hashes
        left_hash = self.stringHash(left)
        right_hash = self.stringHash(right)

        left_prefixes = {-1:{}}
        right_prefixes = {-1:{}}
     
        
        #initialize prefix sums
        for i in range(len(left)):
            left_prefixes[i] = left_prefixes[i - 1].copy()
            left_prefixes[i][left[i]] = left_prefixes[i].get(left[i], 0) + 1
            right_prefixes[i] = right_prefixes[i - 1].copy()
            right_prefixes[i][right[i]] = right_prefixes[i].get(right[i], 0) + 1

        left_prefixes[len(left)] = right_prefixes[len(left) - 1].copy()
        right_prefixes[len(right)] = right_prefixes[len(right) - 1].copy()
       
        res = []
        
        #process queries
        for a,b,c,d in queries:
            #convert c and d to indices in right string
            c,d  = n - 1 - d, n - 1 - c

            #one covers the other
            if (a <=c and b >=d) or (c <=a and d >=b): 
                res.append(self.processCover(a, b, c, d, half, left_hash, right_hash, left_prefixes, right_prefixes))
                  
            #no overlap
            elif max(a,c)> min(b,d):
                res.append(self.processNonOverlap(a, b, c, d, half, left_hash, right_hash, left_prefixes, right_prefixes))
                
            #overlapp
            else: 
                res.append(self.processOverlap(a, b, c, d, half, left_hash, right_hash, left_prefixes, right_prefixes))        
        return res
    
    #Initialize String Hash Values
    def stringHash(self, s: str) -> List[int]:
        curr = 0
        res = {-1:0}
        for i in range(len(s)):
            curr = curr +(ord(s[i]) * pow(31, i, self.MOD)) % self.MOD
            res[i] = curr
        res[len(s)] = res[len(s) - 1]
        return res
    
    #Get Prefix Difference between indices
    def prefixDifference(self, big: dict, small: dict) -> dict:
        res = {}
        for key in big:
            res[key] = big[key] - small.get(key, 0)
        return {key: val for key, val in res.items() if val != 0} 
    
    #process non overlapping query
    def processNonOverlap(self, a, b, c, d, half, left_hash, right_hash, left_prefixes, right_prefixes):
        intervals = sorted([(a,b),(c,d)])
        a,b = intervals[0]
        c,d = intervals[1]
        
        #difference in prefix sums 
        if (self.prefixDifference(left_prefixes[b], left_prefixes[a - 1]) \
         != self.prefixDifference(right_prefixes[b], right_prefixes[a - 1]) 
        or self.prefixDifference(left_prefixes[d], left_prefixes[c - 1]) \
         != self.prefixDifference(right_prefixes[d], right_prefixes[c - 1])
        ):
            return False
        elif left_hash[a-1] != right_hash[a-1] or left_hash[half] - left_hash[d] != right_hash[half] - right_hash[d]:
            return False
        elif b + 1 < c and (left_hash[c - 1] - left_hash[b] != right_hash[c - 1] - right_hash[b]):
            return False
        else:
            return True

    #process covering query
    def processCover(self, a, b, c, d, half, left_hash, right_hash, left_prefixes, right_prefixes):
        a,b = min(a, c), max(b,d)
        if left_hash[a - 1] != right_hash[a-1] or left_hash[half] - left_hash[b]  != right_hash[half] - right_hash[b]:
                    return False
        else:
            if self.prefixDifference(left_prefixes[b], left_prefixes[a - 1]) == \
            self.prefixDifference(right_prefixes[b], right_prefixes[a - 1]):
                return True
            else:
                return False  
    
    #Process Overlapping Query
    def processOverlap(self, a, b, c, d, half, left_hash, right_hash, left_prefixes, right_prefixes):
        S = len(left_hash) * 2  # Total length of the string
        left_diff = self.prefixDifference(left_prefixes[b], left_prefixes[a - 1])
        right_diff = self.prefixDifference(right_prefixes[d], right_prefixes[c - 1])

        if b > d:  # c and d are to the left of a and b
            #Not enough in changeable part 
            if not self.updatePrefixes(left_diff, right_prefixes[b], right_prefixes[d]) or \
               not self.updatePrefixes(right_diff, left_prefixes[a-1], left_prefixes[c-1]):
                return False
            #Make sure changeable parts are equal and the left and right side are equal
            return self.comparePrefixesAndHashes(left_diff, right_diff, c, b, half, left_hash, right_hash)

        else:  # c and d are to the right of a and b
            #Not enough in changeable part
            if not self.updatePrefixes(left_diff, right_prefixes[c-1], right_prefixes[a-1]) or \
               not self.updatePrefixes(right_diff, left_prefixes[d], left_prefixes[b]):
                return False
            #Make sure changeable parts are equal and the left and right side are equal
            return self.comparePrefixesAndHashes(left_diff, right_diff, a, d, half, left_hash, right_hash)

    #Update prefix of a range after subtracting stuff
    def updatePrefixes(self, target, big, small):
        diff = self.prefixDifference(big, small)
        for key, val in diff.items():
            if key not in target or target[key] < val:
                return False
            target[key] -= val
            if target[key] == 0:
                del target[key]
        return True

    #Compare Everything 
    def comparePrefixesAndHashes(self, left, right, start, end, half, left_hash, right_hash):
        return left == right and \
               left_hash[start - 1] == right_hash[start - 1] and \
               left_hash[half] - left_hash[end] == right_hash[half] - right_hash[end]