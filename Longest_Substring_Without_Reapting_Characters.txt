3. Longest Substring Without Repeating Characters
Medium
33.5K
1.5K
Companies
Given a string s, find the length of the longest 
substring
 without repeating characters.

 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
 

Constraints:

0 <= s.length <= 5 * 104
s consists of English letters, digits, symbols and spaces.


Solution 1: Using set

class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        charSet = set()
        l = 0
        count = 0

        for r in range(len(s)):
            while s[r] in charSet:
                charSet.remove(s[l])
                l+=1
            charSet.add(s[r])     
            count = max(count, r-l+1)

        return count


Solution 2: Using dictionary

class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        charDict = {}
        l = 0
        count = 0

        for r in range(len(s)):
            if s[r] in charDict and charDict[s[r]] >= l:
                l = charDict[s[r]] + 1
            charDict[s[r]] = r
            count = max(count, r-l+1)

        return count