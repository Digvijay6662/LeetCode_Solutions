202. Happy Number
Easy
8.5K
1.1K
Companies
Write an algorithm to determine if a number n is happy.

A happy number is a number defined by the following process:

Starting with any positive integer, replace the number by the sum of the squares of its digits.
Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.
Those numbers for which this process ends in 1 are happy.
Return true if n is a happy number, and false if not.

 

Example 1:

Input: n = 19
Output: true
Explanation:
12 + 92 = 82
82 + 22 = 68
62 + 82 = 100
12 + 02 + 02 = 1
Example 2:

Input: n = 2
Output: false
 

Constraints:

1 <= n <= 231 - 1

Solution:

class Solution:
    def isHappy(self, n: int) -> bool:
        visited = set()
        while n != 1:
            if n in visited:
                return False
            visited.add(n)
            n = sum(int(d) ** 2 for d in str(n))
        return True


Solution 2:

class Solution:
    def isHappy(self, n: int) -> bool:
        visited = set()
        
        while n not in visited:
            visited.add(n)
            n = self.sumOfSquares(n)
            if n == 1:
                return True

        return False

    def sumOfSquares(self, n):
        s = 0
        while n:
            d = n%10
            s = s + d **2
            n //= 10
        return s


Solution 3:

class Solution:
    def isHappy(self, n: int) -> bool:

        slow = self.sumOfSquares(n)
        fast = self.sumOfSquares(self.sumOfSquares(n))

        while slow!=fast and fast!=1:
            slow = self.sumOfSquares(slow)
            fast = self.sumOfSquares(self.sumOfSquares(fast))

        return fast==1

    def sumOfSquares(self, n):
        s = 0
        while n > 0:
            d = n%10
            s += d * d
            n = n//10
        return s
