2929. Distribute Candies Among Children II
Solved
Medium
Companies
Hint
You are given two positive integers n and limit.

Return the total number of ways to distribute n candies among 3 children such that no child gets more than limit candies.

 

Example 1:

Input: n = 5, limit = 2
Output: 3
Explanation: There are 3 ways to distribute 5 candies such that no child gets more than 2 candies: (1, 2, 2), (2, 1, 2) and (2, 2, 1).
Example 2:

Input: n = 3, limit = 3
Output: 10
Explanation: There are 10 ways to distribute 3 candies such that no child gets more than 3 candies: (0, 0, 3), (0, 1, 2), (0, 2, 1), (0, 3, 0), (1, 0, 2), (1, 1, 1), (1, 2, 0), (2, 0, 1), (2, 1, 0) and (3, 0, 0).
 

Constraints:

1 <= n <= 106
1 <= limit <= 106


Solution 1:

class Solution:
    def distributeCandies(self, n: int, limit: int) -> int:
        res = 0

        for i in range(min(limit, n) + 1):
            if n - i > 2 * limit:
                continue

            jMax = min(n - i, limit)
            jMin = max(n - i - limit, 0)

            res += max(0, jMax - jMin + 1)

        return res


Solution 2:

class Solution:
    def distributeCandies(self, n: int, limit: int) -> int:
        result = 0

        for i in range(min(n, limit) + 1):
            rem = n - i
            
            if rem > 2 * limit:
                continue
            
            jMax = min(limit, rem)
            rem = rem - jMax
            m = jMax - rem + 1

            result += max(0, m)

        return result


Solution 3:

class Solution:
    def distributeCandies(self, n: int, limit: int) -> int:
        ans = 0
        first_min = max(0, n - 2 * limit)
        first_max = min(limit, n)
        
        for i in range(first_min, first_max + 1):
            second_min = max(0, n - i - limit)
            second_max = min(limit, n - i)
            ans += second_max - second_min + 1
            
        return ans


Solution 4:

class Solution:
    def distributeCandies(self, n: int, limit: int) -> int:
        if n > 3 * limit:
            return 0
        
        res = math.comb(n + 2, 2)
        
        if n - 2 >= 2 * limit:
            res += 3 * math.comb(n - 2 * limit, 2)
        
        if n > limit:
            res -= 3 * math.comb(n - limit + 1, 2)
            
        return res
        