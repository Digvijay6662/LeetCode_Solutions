3290. Maximum Multiplication Score
Solved
Medium
Companies
Hint
You are given an integer array a of size 4 and another integer array b of size at least 4.

You need to choose 4 indices i0, i1, i2, and i3 from the array b such that i0 < i1 < i2 < i3. Your score will be equal to the value a[0] * b[i0] + a[1] * b[i1] + a[2] * b[i2] + a[3] * b[i3].

Return the maximum score you can achieve.

 

Example 1:

Input: a = [3,2,5,6], b = [2,-6,4,-5,-3,2,-7]

Output: 26

Explanation:
We can choose the indices 0, 1, 2, and 5. The score will be 3 * 2 + 2 * (-6) + 5 * 4 + 6 * 2 = 26.

Example 2:

Input: a = [-1,4,5,-2], b = [-5,-1,-3,-2,-4]

Output: -1

Explanation:
We can choose the indices 0, 1, 3, and 4. The score will be (-1) * (-5) + 4 * (-1) + 5 * (-2) + (-2) * (-4) = -1.

 

Constraints:

a.length == 4
4 <= b.length <= 105
-105 <= a[i], b[i] <= 105


Solution 1:

3290. Maximum Multiplication Score
Solved
Medium
Companies
Hint
You are given an integer array a of size 4 and another integer array b of size at least 4.

You need to choose 4 indices i0, i1, i2, and i3 from the array b such that i0 < i1 < i2 < i3. Your score will be equal to the value a[0] * b[i0] + a[1] * b[i1] + a[2] * b[i2] + a[3] * b[i3].

Return the maximum score you can achieve.

 

Example 1:

Input: a = [3,2,5,6], b = [2,-6,4,-5,-3,2,-7]

Output: 26

Explanation:
We can choose the indices 0, 1, 2, and 5. The score will be 3 * 2 + 2 * (-6) + 5 * 4 + 6 * 2 = 26.

Example 2:

Input: a = [-1,4,5,-2], b = [-5,-1,-3,-2,-4]

Output: -1

Explanation:
We can choose the indices 0, 1, 3, and 4. The score will be (-1) * (-5) + 4 * (-1) + 5 * (-2) + (-2) * (-4) = -1.

 

Constraints:

a.length == 4
4 <= b.length <= 105
-105 <= a[i], b[i] <= 105


Solution 1:

class Solution:
    def maxScore(self, a: List[int], b: List[int]) -> int:
        n = len(b)
        dp = [[-1] * 4 for _ in range(n)]

        def solve(i, j):
            if i == 4:
                return 0

            if j == n:
                return float('-inf')

            if dp[j][i] != -1:
                return dp[j][i]

            pick = a[i] * b[j] + solve(i + 1, j + 1)
            not_pick = solve(i, j + 1)

            dp[j][i] = max(pick, not_pick)
            return dp[j][i]

        return solve(0, 0)
        

Solution 2:

class Solution:
    def maxScore(self, a: List[int], b: List[int]) -> int:
        n = len(b)
        dp = [[float('-inf')] * (n + 1) for _ in range(5)]
        
        for j in range(n + 1):
            dp[4][j] = 0

        for i in range(3, -1, -1):
            for j in range(n - 1, -1, -1):
                pick = a[i] * b[j] + dp[i + 1][j + 1]
                not_pick = dp[i][j + 1]
                dp[i][j] = max(pick, not_pick)

        return dp[0][0]