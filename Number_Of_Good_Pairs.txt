1512. Number of Good Pairs
Easy
4.3K
206
Companies
Given an array of integers nums, return the number of good pairs.

A pair (i, j) is called good if nums[i] == nums[j] and i < j.

 

Example 1:

Input: nums = [1,2,3,1,1,3]
Output: 4
Explanation: There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.
Example 2:

Input: nums = [1,1,1,1]
Output: 6
Explanation: Each pair in the array are good.
Example 3:

Input: nums = [1,2,3]
Output: 0
 

Constraints:

1 <= nums.length <= 100
1 <= nums[i] <= 100


Solution 1:

class Solution:
    def numIdenticalPairs(self, nums: List[int]) -> int:
        countMap = Counter(nums)
        good_pairs = 0

        for freq in countMap.values():
            if freq > 1:
                good_pairs += (freq - 1) * freq // 2
        
        return good_pairs


Solution 2:

class Solution:
    def numIdenticalPairs(self, nums: List[int]) -> int:
        countMap = {}
        good_pairs = 0

        for num in nums:
            good_pairs += countMap.get(num, 0)
            countMap[num] = countMap.get(num, 0) + 1
        
        return good_pairs