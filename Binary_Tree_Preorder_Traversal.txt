144. Binary Tree Preorder Traversal
Easy
6.7K
175
Companies
Given the root of a binary tree, return the preorder traversal of its nodes' values.

 

Example 1:


Input: root = [1,null,2,3]
Output: [1,2,3]
Example 2:

Input: root = []
Output: []
Example 3:

Input: root = [1]
Output: [1]
 

Constraints:

The number of nodes in the tree is in the range [0, 100].
-100 <= Node.val <= 100
 

Follow up: Recursive solution is trivial, could you do it iteratively?

Solution:

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def preorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        stack = [root]
        res = []
        while stack:
            node = stack.pop()
            if node:
                res.append(node.val)
                stack.append(node.right)
                stack.append(node.left)
        return res


Recursive:

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def preorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        res = []

        def traverse(root, res):
            if root == None:
                return
            res.append(root.val)
            traverse(root.left, res)
            traverse(root.right, res)

        traverse(root, res)
        return res


Solution 3: Morris Traversal

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def preorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        result = []
        curr = root

        while curr:
            result.append(curr.val)
            if not curr.left:
                curr = curr.right
            else:
                next_node = curr.left
                while next_node.right:
                    next_node = next_node.right
                    
                next_node.right = curr.right
                curr = curr.left

        return result


Solution 4:

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def preorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        result = []
        curr = root

        while curr:
            if not curr.left:
                result.append(curr.val)
                curr = curr.right
            else:
                # Find the inorder predecessor
                pre = curr.left
                while pre.right and pre.right != curr:
                    pre = pre.right

                if not pre.right:
                    # Process the current node
                    result.append(curr.val)
                    # Create threaded link from the predecessor to the current node
                    pre.right = curr
                    curr = curr.left
                else:
                    # Revert the threaded link when it's already processed
                    pre.right = None
                    curr = curr.right

        return result


Solution 5:

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def preorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        curr = root
        result = []

        while curr:
            result.append(curr.val)
            if curr.left:
                pred = curr.left
                while pred.right:
                    pred = pred.right
                pred.right = curr.right
                curr.right = curr.left
                curr.left = None
            
            curr = curr.right

        return result