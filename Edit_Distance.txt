72. Edit Distance
Hard
12.6K
144
Companies
Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.

You have the following three operations permitted on a word:

Insert a character
Delete a character
Replace a character
 

Example 1:

Input: word1 = "horse", word2 = "ros"
Output: 3
Explanation: 
horse -> rorse (replace 'h' with 'r')
rorse -> rose (remove 'r')
rose -> ros (remove 'e')
Example 2:

Input: word1 = "intention", word2 = "execution"
Output: 5
Explanation: 
intention -> inention (remove 't')
inention -> enention (replace 'i' with 'e')
enention -> exention (replace 'n' with 'x')
exention -> exection (replace 'n' with 'c')
exection -> execution (insert 'u')
 

Constraints:

0 <= word1.length, word2.length <= 500
word1 and word2 consist of lowercase English letters.


Solution 1:


class Solution:
    def minDistance(self, word1: str, word2: str) -> int:
        n1 = len(word1)
        n2 = len(word2)

        @cache
        def dfs(i, j):
            if i < 0:
                return j + 1

            if j < 0:
                return i + 1

            if word1[i] == word2[j]:
                return dfs(i - 1, j - 1)
            else:
                return  1 + min(dfs(i - 1, j - 1), dfs(i - 1, j), dfs(i, j - 1))

        return dfs(n1 - 1, n2 - 1)


Solution 2:

class Solution:
    def minDistance(self, word1: str, word2: str) -> int:
        n1 = len(word1)
        n2 = len(word2)

        dp = [[-1 for _ in range(n2)] for _ in range(n1)]

        def dfs(i, j):
            if i < 0:
                return j + 1

            if j < 0:
                return i + 1

            if dp[i][j] != -1:
                return dp[i][j]

            if word1[i] == word2[j]:
                count = dfs(i - 1, j - 1)
                dp[i][j] = count
                return count
            else:
                count = 1 + min(dfs(i - 1, j - 1), dfs(i - 1, j), dfs(i, j - 1))
                dp[i][j] = count
                return count

        return dfs(n1 - 1, n2 - 1)


Solution 3:

class Solution:
    def minDistance(self, word1: str, word2: str) -> int:
        n1 = len(word1)
        n2 = len(word2)

        dp = [[float('inf') for _ in range(n2 + 1)] for _ in range(n1 + 1)]

        for i in range(n1 + 1):
            dp[i][n2] = n1 - i


        for j in range(n2 + 1):
            dp[n1][j] = n2 - j


        for i in range(n1 - 1, -1, -1):
            for j in range(n2 - 1, -1, -1):
                if word1[i] == word2[j]:
                    dp[i][j] = dp[i + 1][j + 1]
                else:
                    dp[i][j] = 1 + min(dp[i+1][j+1], dp[i][j+1], dp[i+1][j])

        return dp[0][0]


Solution 4:

class Solution:
    def minDistance(self, word1: str, word2: str) -> int:
        n1 = len(word1)
        n2 = len(word2)

        dp = [0 for _ in range(n2 + 1)]

        for j in range(n2 + 1):
            dp[j] = n2 - j

        for i in range(n1 - 1, -1, -1):
            prev = dp[n2]
            dp[n2] = n1 - i 

            for j in range(n2 - 1, -1, -1):
                temp = dp[j]
                if word1[i] == word2[j]:
                    dp[j] = prev
                else:
                    dp[j] = 1 + min(dp[j+1], dp[j], prev)
                prev = temp

        return dp[0]
