513. Find Bottom Left Tree Value
Solved
Medium
Topics
Companies
Given the root of a binary tree, return the leftmost value in the last row of the tree.

 

Example 1:


Input: root = [2,1,3]
Output: 1
Example 2:


Input: root = [1,2,3,4,null,5,6,null,null,7]
Output: 7
 

Constraints:

The number of nodes in the tree is in the range [1, 104].
-231 <= Node.val <= 231 - 1


Solution 1:

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def findBottomLeftValue(self, root: Optional[TreeNode]) -> int:
        res = root.val
        queue = deque([root])

        while queue:
            for _ in range(len(queue)):
                node = queue.popleft()
            
                if node.right:
                    queue.append(node.right)
                
                if node.left:
                    queue.append(node.left)
            res = node.val

        return res


Solution 2:

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def findBottomLeftValue(self, root: Optional[TreeNode]) -> int:
        maxDepth = -1
        res = root.val

        def dfs(node, depth):
            nonlocal res, maxDepth
            if not node:
                return 

            dfs(node.left, depth + 1)
            dfs(node.right, depth + 1)

            if depth > maxDepth:
                maxDepth = depth
                res = node.val

        dfs(root, 0)
        return res