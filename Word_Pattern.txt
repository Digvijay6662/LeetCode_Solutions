290. Word Pattern
Easy
6.5K
800
Companies
Given a pattern and a string s, find if s follows the same pattern.

Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in s.

 

Example 1:

Input: pattern = "abba", s = "dog cat cat dog"
Output: true
Example 2:

Input: pattern = "abba", s = "dog cat cat fish"
Output: false
Example 3:

Input: pattern = "aaaa", s = "dog cat cat dog"
Output: false
 

Constraints:

1 <= pattern.length <= 300
pattern contains only lower-case English letters.
1 <= s.length <= 3000
s contains only lowercase English letters and spaces ' '.
s does not contain any leading or trailing spaces.
All the words in s are separated by a single space.


Solution 1:

class Solution:
    def wordPattern(self, pattern: str, s: str) -> bool:
        arr = s.split()
        n = len(pattern)

        if len(arr) != n:
            return False

        hmap = {}

        for i in range(n):
            if pattern[i] not in hmap:
                if arr[i] not in hmap.values():
                    hmap[pattern[i]] = arr[i]
                else:
                    return False
            else:
                if hmap[pattern[i]] != arr[i]:
                    return False

        return True


Solution 2:

class Solution:
    def wordPattern(self, pattern: str, s: str) -> bool:
        arr = s.split()
        n = len(pattern)

        if len(arr) != n:
            return False

        hmap = [''] * 26

        used = set()

        for i in range(n):
            idx = ord(pattern[i]) - ord('a')

            if hmap[idx] == '':
                if arr[i] not in used:
                    hmap[idx] = arr[i]
                    used.add(arr[i])
                else:
                    return False
            else:
                if hmap[idx] != arr[i]:
                    return False

        return True