1624. Largest Substring Between Two Equal Characters
Solved
Easy
Topics
Companies
Hint
Given a string s, return the length of the longest substring between two equal characters, excluding the two characters. If there is no such substring return -1.

A substring is a contiguous sequence of characters within a string.

 

Example 1:

Input: s = "aa"
Output: 0
Explanation: The optimal substring here is an empty substring between the two 'a's.
Example 2:

Input: s = "abca"
Output: 2
Explanation: The optimal substring here is "bc".
Example 3:

Input: s = "cbzxy"
Output: -1
Explanation: There are no characters that appear twice in s.
 

Constraints:

1 <= s.length <= 300
s contains only lowercase English letters.


Solution 1:

class Solution:
    def maxLengthBetweenEqualCharacters(self, s: str) -> int:
        indexMap = {}

        for i, ch in enumerate(s):
            if ch not in indexMap:
                indexMap[ch] = [i, i]
            else:
                indexMap[ch][1] = i

        result = -1

        for first, last in indexMap.values():
            if first == last:
                continue    
            result = max(result, last - first - 1)

        return result


Solution 2:

class Solution:
    def maxLengthBetweenEqualCharacters(self, s: str) -> int:
        indexMap = {}
        result = -1
        for i, ch in enumerate(s):
            if ch not in indexMap:
                indexMap[ch] = i
            else:
                result = max(result, i  - indexMap[ch] - 1)

        return result