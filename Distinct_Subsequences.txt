115. Distinct Subsequences
Hard
5.7K
211
Companies
Given two strings s and t, return the number of distinct 
subsequences
 of s which equals t.

The test cases are generated so that the answer fits on a 32-bit signed integer.

 

Example 1:

Input: s = "rabbbit", t = "rabbit"
Output: 3
Explanation:
As shown below, there are 3 ways you can generate "rabbit" from s.
rabbbit
rabbbit
rabbbit
Example 2:

Input: s = "babgbag", t = "bag"
Output: 5
Explanation:
As shown below, there are 5 ways you can generate "bag" from s.
babgbag
babgbag
babgbag
babgbag
babgbag
 

Constraints:

1 <= s.length, t.length <= 1000
s and t consist of English letters.


Solution 1:

class Solution:
    def numDistinct(self, s: str, t: str) -> int:
        n = len(s)
        m = len(t)

        dp = [[-1] * m for _ in range(n)]

        def solve(i, j):

            if j == m:
                return 1
            
            if i == n:
                return 0

            if dp[i][j] != -1:
                return dp[i][j]

            ans = 0

            if s[i] == t[j]:
                ans += solve(i + 1, j + 1)

            ans += solve(i + 1, j)

            dp[i][j] = ans
            return ans


        return solve(0, 0)


Solution 2:

class Solution:
    def numDistinct(self, s: str, t: str) -> int:
        n = len(s)
        m = len(t)

        dp = [[0] * (m + 1) for _ in range(n + 1)]

        for i in range(n + 1):
            dp[i][m] = 1

        for i in range(n - 1, -1, -1):
            for j in range(m - 1, -1, -1):
                if s[i] == t[j]:
                    dp[i][j] += dp[i + 1][j + 1]

                dp[i][j] += dp[i + 1][j]


        return dp[0][0]


Solution 3:

class Solution:
    def numDistinct(self, s: str, t: str) -> int:
        n = len(s)
        m = len(t)

        dp = [0] * (m + 1)
        dp[m] = 1

        for i in range(n - 1, -1, -1):
            curr = [0] * (m + 1)
            curr[m] = 1
            for j in range(m - 1, -1, -1):
                if s[i] == t[j]:
                    curr[j] += dp[j + 1]

                curr[j] += dp[j]
            
            dp = curr

        return dp[0]