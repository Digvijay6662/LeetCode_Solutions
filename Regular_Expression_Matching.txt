10. Regular Expression Matching
Hard
11K
1.8K
Companies
Given an input string s and a pattern p, implement regular expression matching with support for '.' and '*' where:

'.' Matches any single character.​​​​
'*' Matches zero or more of the preceding element.
The matching should cover the entire input string (not partial).

 

Example 1:

Input: s = "aa", p = "a"
Output: false
Explanation: "a" does not match the entire string "aa".
Example 2:

Input: s = "aa", p = "a*"
Output: true
Explanation: '*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes "aa".
Example 3:

Input: s = "ab", p = ".*"
Output: true
Explanation: ".*" means "zero or more (*) of any character (.)".
 

Constraints:

1 <= s.length <= 20
1 <= p.length <= 20
s contains only lowercase English letters.
p contains only lowercase English letters, '.', and '*'.
It is guaranteed for each appearance of the character '*', there will be a previous valid character to match.


Solution 1:


class Solution:
    def isMatch(self, s: str, p: str) -> bool:
        n = len(s)
        m = len(p)
        
        dp = [[-1] * m for _ in range(n)]

        def solve(i, j):
            if j == m:
                return i == n

            if i == n:
                return j + 1 < m and p[j + 1] == '*' and solve(i, j + 2)
            
            if dp[i][j] != -1:
                return dp[i][j]
            
            ans = False
            if s[i] == p[j] or p[j] == '.':

                if j + 1 < m and p[j + 1] == '*':
                    ans = solve(i, j + 2) or solve(i + 1, j)
                else:
                    ans = solve(i + 1, j + 1)
                    
            if j + 1 < m and p[j + 1] == '*':
                ans = ans or solve(i, j + 2)

            dp[i][j] = ans
            
            return ans

        return solve(0, 0)



Solution 2:

class Solution:
    def isMatch(self, s: str, p: str) -> bool:
        n = len(s)
        m = len(p)

        dp = [[False] * (m + 1) for _ in range(n + 1)]

        dp[n][m] = True

        for i in range(n, -1, -1):
            for j in range(m - 1, -1, -1):
                match = i < n and (s[i] == p[j] or p[j] == '.')
                if j + 1 < m and p[j + 1] == '*':
                    dp[i][j] = dp[i][j + 2] or (match and dp[i + 1][j])
                else:
                    dp[i][j] = match and dp[i + 1][j + 1]

        return dp[0][0]


Solution 3:

class Solution:
    def isMatch(self, s: str, p: str) -> bool:
        n = len(s)
        m = len(p)

        dp = [[False] * (m + 1) for _ in range(n + 1)]

        dp[0][0] = True

        for i in range(n + 1):
            for j in range(1, m + 1):
                if p[j - 1] == '*':
                    dp[i][j] = dp[i][j - 2] or (i > 0 and (s[i - 1] == p[j - 2] or p[j - 2] == '.') and dp[i - 1][j])
                else:
                    dp[i][j] = i > 0 and dp[i - 1][j - 1] and (s[i - 1] == p[j - 1] or p[j - 1] == '.')

        return dp[n][m]

