416. Partition Equal Subset Sum
Medium
10.9K
195
Companies
Given an integer array nums, return true if you can partition the array into two subsets such that the sum of the elements in both subsets is equal or false otherwise.

 

Example 1:

Input: nums = [1,5,11,5]
Output: true
Explanation: The array can be partitioned as [1, 5, 5] and [11].
Example 2:

Input: nums = [1,2,3,5]
Output: false
Explanation: The array cannot be partitioned into equal sum subsets.
 

Constraints:

1 <= nums.length <= 200
1 <= nums[i] <= 100


Solution 1:

class Solution:
    def canPartition(self, nums: List[int]) -> bool:
        n = len(nums)
        target = sum(nums)

        if target % 2:
            return False

        target //= 2

        @cache
        def backtracking(currSum, index):
            if currSum > target or index >= n:
                return False

            if currSum == target:
                return True

            return backtracking(currSum + nums[index], index + 1) or backtracking(currSum, index + 1)

        return backtracking(0, 0)


Solution 2:

class Solution:
    def canPartition(self, nums: List[int]) -> bool:
        n = len(nums)
        target = sum(nums)

        if target % 2:
            return False

        target //= 2

        dp = {}

        def backtracking(currSum, index):
            if currSum > target or index >= n:
                return False

            if currSum == target:
                return True

            if (currSum, index) in dp:
                return dp[(currSum, index)]

            dp[(currSum, index)] = backtracking(currSum + nums[index], index + 1) or backtracking(currSum, index + 1)

            return dp[(currSum, index)]

        return backtracking(0, 0)


Solution 3:

class Solution:
    def canPartition(self, nums: List[int]) -> bool:
        n = len(nums)
        target = sum(nums)

        if target % 2:
            return False

        target //= 2

        dp = [False] * (target + 1)
        dp[0] = True

        for num in nums:
            for j in range(target, num - 1, -1):
                dp[j] = dp[j] or dp[j - num]

        return dp[target]
