3233. Find the Count of Numbers Which Are Not Special
Solved
Medium
Companies
Hint
You are given 2 positive integers l and r. For any number x, all positive divisors of x except x are called the proper divisors of x.

A number is called special if it has exactly 2 proper divisors. For example:

The number 4 is special because it has proper divisors 1 and 2.
The number 6 is not special because it has proper divisors 1, 2, and 3.
Return the count of numbers in the range [l, r] that are not special.

 

Example 1:

Input: l = 5, r = 7

Output: 3

Explanation:

There are no special numbers in the range [5, 7].

Example 2:

Input: l = 4, r = 16

Output: 11

Explanation:

The special numbers in the range [4, 16] are 4 and 9.

 

Constraints:

1 <= l <= r <= 109


Solution 1:

class Solution:
    def nonSpecialCount(self, l: int, r: int) -> int:
        limit = int(r ** 0.5) + 1
        primes = [True] * limit
        primes[0] = primes[1] = False

        for i in range(2, int(limit ** 0.5) + 1):
            if primes[i]:
                primes[i + i: limit: i] = [False] * len(primes[i + i: limit:i])

        total_numbers = r - l + 1
        special_numbers = sum(1 for i in range(limit) if primes[i] and l <= i * i <= r)

        return total_numbers - special_numbers