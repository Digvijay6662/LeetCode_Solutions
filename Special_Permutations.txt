2741. Special Permutations
Medium
244
51
Companies
You are given a 0-indexed integer array nums containing n distinct positive integers. A permutation of nums is called special if:

For all indexes 0 <= i < n - 1, either nums[i] % nums[i+1] == 0 or nums[i+1] % nums[i] == 0.
Return the total number of special permutations. As the answer could be large, return it modulo 109 + 7.

 

Example 1:

Input: nums = [2,3,6]
Output: 2
Explanation: [3,6,2] and [2,6,3] are the two special permutations of nums.
Example 2:

Input: nums = [1,4,3]
Output: 2
Explanation: [3,1,4] and [4,1,3] are the two special permutations of nums.
 

Constraints:

2 <= nums.length <= 14
1 <= nums[i] <= 109


Solution 1:

class Solution:
    def specialPerm(self, nums: List[int]) -> int:
        n = len(nums)
        mod = 1000000007

        @cache
        def dfs(prev, mask):
            if mask == (1 << n) - 1:
                return 1
            ans = 0
            for i in range(n):
                if mask == 0 or ((mask & (1 << i)) == 0 and (nums[prev] % nums[i] == 0 or nums[i] % nums[prev] == 0)):
                    ans += dfs(i, mask | (1 << i)) % mod

            return ans % mod

        return dfs(-1, 0)


Solution 2:

class Solution:
    def specialPerm(self, nums: List[int]) -> int:
        n = len(nums)
        mod = 1000000007

        dp = {}

        def dfs(prev, mask):
            if mask == (1 << n) - 1:
                return 1

            if (prev, mask) in dp:
                return dp[(prev, mask)]

            ans = 0
            for i in range(n):
                if mask == 0 or ((mask & (1 << i)) == 0 and (nums[prev] % nums[i] == 0 or nums[i] % nums[prev] == 0)):
                    ans += dfs(i, mask | (1 << i)) % mod

            dp[(prev, mask)] = ans % mod

            return dp[(prev, mask)]

        return dfs(-1, 0)


Solution 3:

class Solution:
    def specialPerm(self, nums: List[int]) -> int:
        n = len(nums)
        mod = 1000000007

        dp = [[-1] * (1 << n) for _ in range(n)]

        def dfs(prev, mask):
            if mask == (1 << n) - 1:
                return 1

            if dp[prev][mask] != -1:
                return dp[prev][mask]

            ans = 0
            for i in range(n):
                if mask == 0 or ((mask & (1 << i)) == 0 and (nums[prev] % nums[i] == 0 or nums[i] % nums[prev] == 0)):
                    ans += dfs(i, mask | (1 << i)) % mod

            dp[prev][mask] = ans % mod

            return dp[prev][mask]

        return dfs(-1, 0)