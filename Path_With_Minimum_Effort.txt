1631. Path With Minimum Effort
Medium
5.1K
170
Companies
You are a hiker preparing for an upcoming hike. You are given heights, a 2D array of size rows x columns, where heights[row][col] represents the height of cell (row, col). You are situated in the top-left cell, (0, 0), and you hope to travel to the bottom-right cell, (rows-1, columns-1) (i.e., 0-indexed). You can move up, down, left, or right, and you wish to find a route that requires the minimum effort.

A route's effort is the maximum absolute difference in heights between two consecutive cells of the route.

Return the minimum effort required to travel from the top-left cell to the bottom-right cell.

 

Example 1:



Input: heights = [[1,2,2],[3,8,2],[5,3,5]]
Output: 2
Explanation: The route of [1,3,5,3,5] has a maximum absolute difference of 2 in consecutive cells.
This is better than the route of [1,2,2,2,5], where the maximum absolute difference is 3.
Example 2:



Input: heights = [[1,2,3],[3,8,4],[5,3,5]]
Output: 1
Explanation: The route of [1,2,3,4,5] has a maximum absolute difference of 1 in consecutive cells, which is better than route [1,3,5,3,5].
Example 3:


Input: heights = [[1,2,1,1,1],[1,2,1,2,1],[1,2,1,2,1],[1,2,1,2,1],[1,1,1,2,1]]
Output: 0
Explanation: This route does not require any effort.
 

Constraints:

rows == heights.length
columns == heights[i].length
1 <= rows, columns <= 100
1 <= heights[i][j] <= 106


Solution 1:

class Solution:
    def minimumEffortPath(self, heights: List[List[int]]) -> int:
        n, m = len(heights), len(heights[0])

        if n == 1 and m == 1:
            return 0

        def solve(dist):
            directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]
            visited = set()
            q = deque([(0, 0)])
            visited.add((0, 0))

            while q:
                for _ in range(len(q)):
                    i, j = q.popleft()
                    for dr, dj in directions:
                        r, c = i + dr, j + dj
                        if 0 <= r < n and 0 <= c < m and (r, c) not in visited and abs(heights[r][c] - heights[i][j]) <= dist:
                            if r == n - 1 and c == m - 1:
                                return True
                            q.append((r, c))
                            visited.add((r, c))

            return False

        left, right = 0, 1000000

        while left <= right:
            mid = left + (right - left) // 2

            if solve(mid):
                right = mid - 1
            else:
                left = mid + 1

        return left


Solution 2:

class Solution:
    def minimumEffortPath(self, heights: List[List[int]]) -> int:
        m, n = len(heights), len(heights[0])
        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]

        efforts = [[float('inf')] * n for _ in range(m)]
        efforts[0][0] = 0
        q = deque([(0, 0)])

        while q:
            x, y = q.popleft()
            for dx, dy in directions:
                r, c = x + dx, y + dy
                if 0 <= r < m and 0 <= c < n:
                    next_effort = max(efforts[x][y], abs(heights[r][c] - heights[x][y]))
                    if next_effort < efforts[r][c]:
                        efforts[r][c] = next_effort
                        q.append((r, c))

        return efforts[m - 1][n - 1]


Solution 3:


class Solution:
    def minimumEffortPath(self, heights: List[List[int]]) -> int:
        m, n = len(heights), len(heights[0])
        directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]

        efforts = [[float('inf')] * n for _ in range(m)]
        efforts[0][0] = 0

        minHeap = [(0, 0, 0)]

        while minHeap:
            effort, x, y = heapq.heappop(minHeap)

            if (x, y) == (m - 1, n - 1):
                return effort

            for dx, dy in directions:
                r, c = x + dx, y + dy

                if 0 <= r < m and 0 <= c < n:
                    next_effort = max(effort, abs(heights[r][c] - heights[x][y]))

                    if efforts[r][c] > next_effort:
                        efforts[r][c] = next_effort
                        heapq.heappush(minHeap, (next_effort, r, c))