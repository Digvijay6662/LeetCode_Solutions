307. Range Sum Query - Mutable
Medium
Topics
Companies
Given an integer array nums, handle multiple queries of the following types:

Update the value of an element in nums.
Calculate the sum of the elements of nums between indices left and right inclusive where left <= right.
Implement the NumArray class:

NumArray(int[] nums) Initializes the object with the integer array nums.
void update(int index, int val) Updates the value of nums[index] to be val.
int sumRange(int left, int right) Returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] + ... + nums[right]).
 

Example 1:

Input
["NumArray", "sumRange", "update", "sumRange"]
[[[1, 3, 5]], [0, 2], [1, 2], [0, 2]]
Output
[null, 9, null, 8]

Explanation
NumArray numArray = new NumArray([1, 3, 5]);
numArray.sumRange(0, 2); // return 1 + 3 + 5 = 9
numArray.update(1, 2);   // nums = [1, 2, 5]
numArray.sumRange(0, 2); // return 1 + 2 + 5 = 8
 

Constraints:

1 <= nums.length <= 3 * 104
-100 <= nums[i] <= 100
0 <= index < nums.length
-100 <= val <= 100
0 <= left <= right < nums.length
At most 3 * 104 calls will be made to update and sumRange.


Solution 1: Segment Tree

class SegmentTree:
    def __init__(self, n):
        self.tree = [0] * (4 * n)

    def buildTree(self, l, r, i, arr):
        if l == r:
            self.tree[i] = arr[l]
            return

        m = (l + r) // 2
        self.buildTree(l, m, 2 * i + 1, arr)
        self.buildTree(m + 1, r, 2 * i + 2, arr)

        self.tree[i] = self.tree[2 * i + 1] + self.tree[2 * i + 2]

    def update(self, l, r, i, idx, val):
        if idx < l or idx > r:
            return 
    
        if l == r:
            self.tree[i] = val
            return

        m = (l + r) // 2
        if idx <= m:
            self.update(l, m, 2 * i + 1, idx, val)
        else:
            self.update(m + 1, r, 2 * i + 2, idx, val)

        self.tree[i] = self.tree[2 * i + 1] + self.tree[2 * i + 2]

    def query(self, l, r, i, lo, hi):
        if lo > r or hi < l:
            return 0

        if l >= lo and r <= hi:
            return self.tree[i]

        m = (l + r) // 2
        left_sum = self.query(l, m, 2 * i + 1, lo, hi)
        right_sum = self.query(m + 1, r, 2 * i + 2, lo, hi)
        return left_sum + right_sum

class NumArray:

    def __init__(self, nums: List[int]):
        self.n = len(nums)
        self.t = SegmentTree(self.n)
        self.t.buildTree(0, self.n - 1, 0, nums)

    def update(self, index: int, val: int) -> None:
        self.t.update(0, self.n - 1, 0, index, val)
    
    def sumRange(self, left: int, right: int) -> int:
        return self.t.query(0, self.n - 1, 0, left, right)
        


# Your NumArray object will be instantiated and called as such:
# obj = NumArray(nums)
# obj.update(index,val)
# param_2 = obj.sumRange(left,right)



Solution 2: Fenwick Tree

class FenwickTree:
    def __init__(self, n):
        self.tree = [0] * (n + 1)

    def update(self, i, delta):
        i += 1
        while i < len(self.tree):
            self.tree[i] += delta
            i += i & -i

    def query(self, i):
        i += 1
        total = 0
        while i > 0:
            total += self.tree[i]
            i -= i & -i
        return total

class NumArray:

    def __init__(self, nums: List[int]):
        self.nums = nums
        n = len(nums)
        self.t = FenwickTree(n)
        for i, num in enumerate(nums):
            self.t.update(i, num)

    def update(self, index: int, val: int) -> None:
        self.t.update(index, val - self.nums[index])
        self.nums[index] = val


    def sumRange(self, left: int, right: int) -> int:
        return self.t.query(right) - self.t.query(left - 1) if left > 0 else self.t.query(right)


# Your NumArray object will be instantiated and called as such:
# obj = NumArray(nums)
# obj.update(index,val)
# param_2 = obj.sumRange(left,right)

