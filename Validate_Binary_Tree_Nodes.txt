1361. Validate Binary Tree Nodes
Solved
Medium
Topics
Companies
Hint
You have n binary tree nodes numbered from 0 to n - 1 where node i has two children leftChild[i] and rightChild[i], return true if and only if all the given nodes form exactly one valid binary tree.

If node i has no left child then leftChild[i] will equal -1, similarly for the right child.

Note that the nodes have no values and that we only use the node numbers in this problem.

 

Example 1:


Input: n = 4, leftChild = [1,-1,3,-1], rightChild = [2,-1,-1,-1]
Output: true
Example 2:


Input: n = 4, leftChild = [1,-1,3,-1], rightChild = [2,3,-1,-1]
Output: false
Example 3:


Input: n = 2, leftChild = [1,0], rightChild = [-1,-1]
Output: false
 

Constraints:

n == leftChild.length == rightChild.length
1 <= n <= 104
-1 <= leftChild[i], rightChild[i] <= n - 1


Solution 1:

class Solution:
    def validateBinaryTreeNodes(self, n: int, leftChild: List[int], rightChild: List[int]) -> bool:
        indegree = [0] * n
        for i in range(n):
            if leftChild[i] != -1:
                indegree[leftChild[i]] += 1
            if rightChild[i] != -1:
                indegree[rightChild[i]] += 1
        
        root_count = 0
        root = -1
        for i in range(n):
            if indegree[i] == 0:
                root_count += 1
                root = i
            if indegree[i] > 1:
                return False
        
        if root_count != 1:
            return False

        visited = set()
        q = deque([root])

        while q:
            node = q.popleft()
            if node in visited:
                return False

            visited.add(node)

            if leftChild[node] != -1:
                q.append(leftChild[node])
                
            if rightChild[node] != -1:
                q.append(rightChild[node])

        return len(visited) == n


Solution 2:

class Solution:
    def validateBinaryTreeNodes(self, n: int, leftChild: List[int], rightChild: List[int]) -> bool:

        def findRoot():
            nodes = set(leftChild) | set(rightChild)
            for node in range(n):
                if node not in nodes:
                    return node

            return -1

        root = findRoot()

        if root == -1:
            return False

        visited = set([root])
        stack = [root]

        while stack:
            node = stack.pop()

            for child in [leftChild[node], rightChild[node]]:
                if child != -1:
                    if child in visited:
                        return False
                    
                    stack.append(child)
                    visited.add(child)

        return len(visited) == n




Solution 3:

class UnionFind:
    def __init__(self, n):
        self.parent = [i for i in range(n)]

    def find(self, node):
        while node != self.parent[node]:
            self.parent[node] = self.parent[self.parent[node]]
            node = self.parent[node]
        return node

    def union(self, parent, child):
        parent_parent = self.find(parent)
        child_parent = self.find(child)
        
        if child_parent != child or parent_parent == child_parent:
            return False
            
        self.parent[child_parent] = parent_parent
        return True


class Solution:
    def validateBinaryTreeNodes(self, n: int, leftChild: List[int], rightChild: List[int]) -> bool:
        uf = UnionFind(n)
        components = n

        for node in range(n):
            for child in [leftChild[node], rightChild[node]]:
                if child == -1:
                    continue

                if not uf.union(node, child):
                    return False
                else:
                    components -= 1

        return components == 1
