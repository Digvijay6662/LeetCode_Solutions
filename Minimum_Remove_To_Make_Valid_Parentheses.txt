1249. Minimum Remove to Make Valid Parentheses
Solved
Medium
Topics
Companies
Hint
Given a string s of '(' , ')' and lowercase English characters.

Your task is to remove the minimum number of parentheses ( '(' or ')', in any positions ) so that the resulting parentheses string is valid and return any valid string.

Formally, a parentheses string is valid if and only if:

It is the empty string, contains only lowercase characters, or
It can be written as AB (A concatenated with B), where A and B are valid strings, or
It can be written as (A), where A is a valid string.
 

Example 1:

Input: s = "lee(t(c)o)de)"
Output: "lee(t(c)o)de"
Explanation: "lee(t(co)de)" , "lee(t(c)ode)" would also be accepted.
Example 2:

Input: s = "a)b(c)d"
Output: "ab(c)d"
Example 3:

Input: s = "))(("
Output: ""
Explanation: An empty string is also valid.
 

Constraints:

1 <= s.length <= 105
s[i] is either'(' , ')', or lowercase English letter.


Solution 1:

class Solution:
    def minRemoveToMakeValid(self, s: str) -> str:
        s = list(s)
        stack = []

        for i, char in enumerate(s):
            if char == '(':
                stack.append(i)
            elif char == ')':
                if stack:
                    stack.pop()
                else:
                    s[i] = ''
        while stack:
            s[stack.pop()] = ''
            
        return ''.join(s)


Solution 2:

class Solution:
    def minRemoveToMakeValid(self, s: str) -> str:
        stack = []
        invalid_indices = set()

        for i, char in enumerate(s):
            if char == '(':
                stack.append(i)
            elif char == ')':
                if stack:
                    stack.pop()
                else:
                    invalid_indices.add(i)

        invalid_indices.update(stack)

        result = []
        for i, char in enumerate(s):
            if i not in invalid_indices:
                result.append(char)

        return ''.join(result)


Solution 3:

class Solution:
    def minRemoveToMakeValid(self, s: str) -> str:
        openCloseCount = 0
        close = 0

        for ch in s:
            if ch == ')':
                close += 1
        
        result = []
        for ch in s:
            if ch == '(':
                if openCloseCount == close:
                    continue
                openCloseCount += 1
            elif ch == ')':
                close -= 1
                if openCloseCount == 0:
                    continue
                openCloseCount -= 1
            
            result.append(ch)

        return ''.join(result)


Solution 4:

class Solution:
    def minRemoveToMakeValid(self, s: str) -> str:
        n = len(s)
        result = list(s)
        open_brackets = 0

        for i in range(n):
            if s[i] == '(':
                open_brackets += 1
            elif s[i] == ')':
                if open_brackets:
                    open_brackets -= 1
                else:
                    result[i] = ''
        
        close_brackets = 0

        for i in range(n - 1, -1, -1):
            if s[i] == ')':
                close_brackets += 1
            elif s[i] == '(':
                if close_brackets:
                    close_brackets -= 1
                else:
                    result[i] = ''

        return "".join(result)
