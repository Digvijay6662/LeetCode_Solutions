3303. Find the Occurrence of First Almost Equal Substring
Solved
Hard
Companies
Hint
You are given two strings s and pattern.

A string x is called almost equal to y if you can change at most one character in x to make it identical to y.

Return the smallest starting index of a 
substring
 in s that is almost equal to pattern. If no such index exists, return -1.

A substring is a contiguous non-empty sequence of characters within a string.
 

Example 1:

Input: s = "abcdefg", pattern = "bcdffg"

Output: 1

Explanation:

The substring s[1..6] == "bcdefg" can be converted to "bcdffg" by changing s[4] to "f".

Example 2:

Input: s = "ababbababa", pattern = "bacaba"

Output: 4

Explanation:

The substring s[4..9] == "bababa" can be converted to "bacaba" by changing s[6] to "c".

Example 3:

Input: s = "abcd", pattern = "dba"

Output: -1

Example 4:

Input: s = "dde", pattern = "d"

Output: 0

 

Constraints:

1 <= pattern.length < s.length <= 3 * 105
s and pattern consist only of lowercase English letters.
 

Follow-up: Could you solve the problem if at most k consecutive characters can be changed?


Solution 1:

class Solution:
    def minStartingIndex(self, s: str, pattern: str) -> int:

        def zAlgorithm(string):
            print(string)
            n = len(string)
            z = [0] * n
            l = r = 0

            for i in range(1, n):
                if i > r:
                    l = r = i
                    while r < n and string[r] == string[r - l]:
                        r += 1
                    z[i] = r - l
                    r -= 1
                else:
                    idx = i - l
                    if i + z[idx] <= r:
                        z[i] = z[idx]
                    else:
                        l = i
                        while r < n and string[r] == string[r - l]:
                            r += 1
                        z[i] = r - l
                        r -= 1

            return z

        n = len(s)
        m = len(pattern)

        z_string = zAlgorithm(pattern + "#" + s)
        z_reverse = zAlgorithm(pattern[::-1] + '#' + s[::-1])


        for i in range(n - m + 1):
            prefix_match = z_string[m + 1 + i]
            if prefix_match == m:
                return i
            # remaining characters needed = m - prefix_match - 1
            # -1 because we can change one character
            characters_needed = m - prefix_match - 1
            idx = n + m + 1 - i - m
            suffix_match = z_reverse[idx]
            if suffix_match == characters_needed:
                return i

        return -1


Solution 2:

class Solution:
    def minStartingIndex(self, s: str, pattern: str) -> int:

        def zAlgorithm(string):
            n = len(string)
            z = [0] * n
            l = r = 0

            for i in range(1, n):
                if i > r:
                    l = r = i
                    while r < n and string[r] == string[r - l]:
                        r += 1
                    z[i] = r - l
                    r -= 1
                else:
                    idx = i - l
                    if i + z[idx] <= r:
                        z[i] = z[idx]
                    else:
                        l = i
                        while r < n and string[r] == string[r - l]:
                            r += 1
                        z[i] = r - l
                        r -= 1

            return z

        n = len(s)
        m = len(pattern)

        z_string = zAlgorithm(pattern + "#" + s)
        z_reverse = zAlgorithm(pattern[::-1] + '#' + s[::-1])


        for i in range(n - m + 1):
            prefix_match = z_string[m + 1 + i]
            suffix_match = z_reverse[n + 1 - i]

            if prefix_match + suffix_match + 1 >= m:
                return i

        return -1