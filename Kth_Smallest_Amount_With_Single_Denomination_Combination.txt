3116. Kth Smallest Amount With Single Denomination Combination
Solved
Hard
Companies
Hint
You are given an integer array coins representing coins of different denominations and an integer k.

You have an infinite number of coins of each denomination. However, you are not allowed to combine coins of different denominations.

Return the kth smallest amount that can be made using these coins.

 

Example 1:

Input: coins = [3,6,9], k = 3

Output: 9

Explanation: The given coins can make the following amounts:
Coin 3 produces multiples of 3: 3, 6, 9, 12, 15, etc.
Coin 6 produces multiples of 6: 6, 12, 18, 24, etc.
Coin 9 produces multiples of 9: 9, 18, 27, 36, etc.
All of the coins combined produce: 3, 6, 9, 12, 15, etc.

Example 2:

Input: coins = [5,2], k = 7

Output: 12

Explanation: The given coins can make the following amounts:
Coin 5 produces multiples of 5: 5, 10, 15, 20, etc.
Coin 2 produces multiples of 2: 2, 4, 6, 8, 10, 12, etc.
All of the coins combined produce: 2, 4, 5, 6, 8, 10, 12, 14, 15, etc.

 

Constraints:

1 <= coins.length <= 15
1 <= coins[i] <= 25
1 <= k <= 2 * 109
coins contains pairwise distinct integers.


Solution 1:

class Solution:
    def findKthSmallest(self, coins: List[int], k: int) -> int:
        n = len(coins)

        def check(val):
            terms = 0

            for bits in range(1, 1 << n):
                curr = 1
                parity = 0
                for i in range(n):
                    if bits & (1 << i):
                        curr = lcm(curr, coins[i])
                        parity ^= 1

                if parity:
                    terms += val // curr
                else:
                    terms -= val // curr

            return terms

        min_val = min(coins)
        l, r = min_val, min_val * k

        while l <= r:
            m = (l + r) >> 1
            count = check(m)

            if count >= k:
                r = m - 1
            else:
                l = m + 1
                
        return l


Solution 2:

class Solution:
    def findKthSmallest(self, coins: List[int], k: int) -> int:
        n = len(coins)

        def gcd(a, b):
            while b:
                a, b = b, a % b
            return a

        def lcm(a, b):
            return a * b // gcd(a, b)

        def check(val):
            terms = 0

            for bits in range(1, 1 << n):
                curr = 1
                parity = 0
                for i in range(n):
                    if bits & (1 << i):
                        curr = lcm(curr, coins[i])
                        parity ^= 1

                if parity:
                    terms += val // curr
                else:
                    terms -= val // curr

            return terms

        min_val = min(coins)
        l, r = min_val, min_val * k

        while l <= r:
            m = (l + r) >> 1
            count = check(m)

            if count >= k:
                r = m - 1
            else:
                l = m + 1
                
        return l