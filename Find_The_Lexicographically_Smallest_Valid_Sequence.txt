3302. Find the Lexicographically Smallest Valid Sequence
Solved
Medium
Companies
Hint
You are given two strings word1 and word2.

A string x is called almost equal to y if you can change at most one character in x to make it identical to y.

A sequence of indices seq is called valid if:

The indices are sorted in ascending order.
Concatenating the characters at these indices in word1 in the same order results in a string that is almost equal to word2.
Return an array of size word2.length representing the 
lexicographically smallest
 valid sequence of indices. If no such sequence of indices exists, return an empty array.

Note that the answer must represent the lexicographically smallest array, not the corresponding string formed by those indices.

 

Example 1:

Input: word1 = "vbcca", word2 = "abc"

Output: [0,1,2]

Explanation:

The lexicographically smallest valid sequence of indices is [0, 1, 2]:

Change word1[0] to 'a'.
word1[1] is already 'b'.
word1[2] is already 'c'.
Example 2:

Input: word1 = "bacdc", word2 = "abc"

Output: [1,2,4]

Explanation:

The lexicographically smallest valid sequence of indices is [1, 2, 4]:

word1[1] is already 'a'.
Change word1[2] to 'b'.
word1[4] is already 'c'.
Example 3:

Input: word1 = "aaaaaa", word2 = "aaabc"

Output: []

Explanation:

There is no valid sequence of indices.

Example 4:

Input: word1 = "abc", word2 = "ab"

Output: [0,1]

 

Constraints:

1 <= word2.length < word1.length <= 3 * 105
word1 and word2 consist only of lowercase English letters.


Solution 1:

class Solution:
    def validSequence(self, word1: str, word2: str) -> List[int]:
        n, m = len(word1), len(word2)
        if m > n:
            return []
        
        # Track the rightmost position of each character in word2 within word1
        last = [-1] * m
        j = m - 1
        for i in range(n - 1, -1, -1):
            if word1[i] == word2[j]:
                last[j] = i
                j -= 1
                if j < 0:
                    break

        result = []
        j = 0
        used = False

        for i in range(n):
            if j == m:  # All characters in word2 have been matched
                break
            # If the current characters match, use it
            if word1[i] == word2[j]:
                result.append(i)
                j += 1
            # Otherwise, check if we can use a replacement using `used` flag
            # If the last character is remaining in word2 we can use the index
            # or if the next character position last[j + 1] have a value,
            # greater than the next index i + 1 means we can find the next char later.
            elif not used and ((j + 1 == m) or (j + 1 < m and last[j + 1] >= i + 1)):
                result.append(i)  # Use this index as a replacement
                j += 1
                used = True  # Mark that we've used our one "almost equal" replacement

        # Check if we've matched all characters in word2
        if len(result) != m:
            return []

        return result
