95. Unique Binary Search Trees II
Medium
6.3K
409
Companies
Given an integer n, return all the structurally unique BST's (binary search trees), which has exactly n nodes of unique values from 1 to n. Return the answer in any order.

 

Example 1:


Input: n = 3
Output: [[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]
Example 2:

Input: n = 1
Output: [[1]]
 

Constraints:

1 <= n <= 8


Solution 1:

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def generateTrees(self, n: int) -> List[Optional[TreeNode]]:
        dp = [[-1] * (n + 1) for _ in range(n + 1)]

        def makeBST(start, end):
            if start > end:
                return [None]

            if dp[start][end] != -1:
                return dp[start][end]

            ans = []
            for i in range(start, end + 1):
                leftNodes = makeBST(start, i - 1)
                rightNodes = makeBST(i + 1, end)

                for left in leftNodes:
                    for right in rightNodes:
                        root = TreeNode(i)
                        root.left = left
                        root.right = right
                        ans.append(root)

            dp[start][end] = ans
            return ans

        return makeBST(1, n)


Solution 2:


# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def generateTrees(self, n: int) -> List[Optional[TreeNode]]:
        dp = [[[] for _ in range(n + 1)] for _ in range(n + 1)]
        for i in range(1, n + 1):
            dp[i][i] = [TreeNode(i)]

        for numberOfNodes in range(2, n + 1):
            for start in range(1, n - numberOfNodes + 2):
                end = start + numberOfNodes - 1
                for i in range(start, end + 1):
                    leftNodes = dp[start][i - 1] if i != start else [None]
                    rightNodes = dp[i + 1][end] if i != end else [None]

                    for left in leftNodes:
                        for right in rightNodes:
                            root = TreeNode(i)
                            root.left = left
                            root.right = right
                            dp[start][end].append(root)
        return dp[1][n]

