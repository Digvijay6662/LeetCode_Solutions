1497. Check If Array Pairs Are Divisible by k
Solved
Medium
Topics
Companies
Hint
Given an array of integers arr of even length n and an integer k.

We want to divide the array into exactly n / 2 pairs such that the sum of each pair is divisible by k.

Return true If you can find a way to do that or false otherwise.

 

Example 1:

Input: arr = [1,2,3,4,5,10,6,7,8,9], k = 5
Output: true
Explanation: Pairs are (1,9),(2,8),(3,7),(4,6) and (5,10).
Example 2:

Input: arr = [1,2,3,4,5,6], k = 7
Output: true
Explanation: Pairs are (1,6),(2,5) and(3,4).
Example 3:

Input: arr = [1,2,3,4,5,6], k = 10
Output: false
Explanation: You can try all possible pairs to see that there is no way to divide arr into 3 pairs each with sum divisible by 10.
 

Constraints:

arr.length == n
1 <= n <= 105
n is even.
-109 <= arr[i] <= 109
1 <= k <= 105


Solution 1:

class Solution:
    def canArrange(self, arr: List[int], k: int) -> bool:
        n = len(arr)
        sorted_arr = sorted(arr, key=lambda x: (x % k + k) % k)
        start, end = 0, n - 1

        while start < end:
            if sorted_arr[start] % k != 0:
                break
            if sorted_arr[start + 1] % k != 0:
                return False
            start = start + 2

        while start < end:
            if (sorted_arr[start] + sorted_arr[end]) % k != 0:
                return False
            start += 1
            end -= 1

        return True


Solution 2:

class Solution:
    def canArrange(self, arr: List[int], k: int) -> bool:
        remainder_freq = defaultdict(int)

        for num in arr:
            remainder = (num % k + k) % k
            remainder_freq[remainder] += 1

        for remainder in remainder_freq:
            if remainder == 0:
                if remainder_freq[remainder] % 2 != 0:
                    return False
            else:
                complement = k - remainder
                if remainder_freq[remainder] != remainder_freq[complement]:
                    return False

        return True