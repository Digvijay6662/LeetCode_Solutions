687. Longest Univalue Path
Solved
Medium
Topics
Companies
Given the root of a binary tree, return the length of the longest path, where each node in the path has the same value. This path may or may not pass through the root.

The length of the path between two nodes is represented by the number of edges between them.

 

Example 1:


Input: root = [5,4,5,1,1,null,5]
Output: 2
Explanation: The shown image shows that the longest path of the same value (i.e. 5).
Example 2:


Input: root = [1,4,5,4,4,null,5]
Output: 2
Explanation: The shown image shows that the longest path of the same value (i.e. 4).
 

Constraints:

The number of nodes in the tree is in the range [0, 104].
-1000 <= Node.val <= 1000
The depth of the tree will not exceed 1000.


Solution 1:

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def longestUnivaluePath(self, root: Optional[TreeNode]) -> int:
        result = 0
        def dfs(node):
            nonlocal result
            if not node:
                return 0, None

            left_length, left_val = dfs(node.left)
            right_length, right_val = dfs(node.right)

            if left_val == right_val == node.val:
                result = max(result, left_length + right_length)
                return max(left_length, right_length) + 1, node.val
            elif left_val == node.val:
                result = max(result, left_length)
                return left_length + 1, node.val
            elif right_val == node.val:
                result = max(result, right_length)
                return right_length + 1, node.val
            else:
                return 1, node.val

        
        dfs(root)

        return result


Solution 2:

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def longestUnivaluePath(self, root: Optional[TreeNode]) -> int:
        result = 0

        def dfs(node):
            nonlocal result
            if not node:
                return 0

            left_length = dfs(node.left)
            right_length = dfs(node.right)

            left_path = left_length + 1 if node.left and node.left.val == node.val else 0
            right_path = right_length + 1 if node.right and node.right.val == node.val else 0

            result = max(result, left_path + right_path)

            return max(left_path, right_path)

        dfs(root)

        return result


Solution 3:

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def longestUnivaluePath(self, root: Optional[TreeNode]) -> int:
        result = 0

        def dfs(root, parent):
            nonlocal result
            if not root:
                return 0

            left = dfs(root.left, root.val)
            right = dfs(root.right, root.val)

            result = max(result, left + right)

            return max(left, right) + 1 if root.val == parent else 0

        dfs(root, None)

        return result