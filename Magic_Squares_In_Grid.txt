840. Magic Squares In Grid
Solved
Medium
Topics
Companies
A 3 x 3 magic square is a 3 x 3 grid filled with distinct numbers from 1 to 9 such that each row, column, and both diagonals all have the same sum.

Given a row x col grid of integers, how many 3 x 3 "magic square" subgrids are there?  (Each subgrid is contiguous).

 

Example 1:


Input: grid = [[4,3,8,4],[9,5,1,9],[2,7,6,2]]
Output: 1
Explanation: 
The following subgrid is a 3 x 3 magic square:

while this one is not:

In total, there is only one magic square inside the given grid.
Example 2:

Input: grid = [[8]]
Output: 0
 

Constraints:

row == grid.length
col == grid[i].length
1 <= row, col <= 10
0 <= grid[i][j] <= 15


Solution 1:

class Solution:
    def numMagicSquaresInside(self, grid: List[List[int]]) -> int:
        n, m = len(grid), len(grid[0])

        def check(i, j):
            s = set()
            for x in range(3):
                for y in range(3):
                    if grid[i + x][j + y] > 9 or grid[i + x][j + y] < 1:
                        return False
                    if grid[i + x][j + y] in s:
                        return False
                    s.add(grid[i + x][j + y])

            row_sums = [sum(grid[i + x][j + y] for y in range(3)) for x in range(3)]
            col_sums = [sum(grid[i + x][j + y] for x in range(3)) for y in range(3)]
            diagonal_sum1 = grid[i][j] + grid[i + 1][j + 1] + grid[i + 2][j + 2]
            diagonal_sum2 = grid[i][j + 2] + grid[i + 1][j + 1] + grid[i + 2][j]

            return (
                all(row_sum == col_sums[0] for row_sum in row_sums) and
                all(col_sum == row_sums[0] for col_sum in col_sums) and
                all(row_sum == row_sums[0] for row_sum in row_sums) and
                diagonal_sum1 == diagonal_sum2 == row_sums[0]
            )

        result = 0
        for i in range(n - 2):
            for j in range(m - 2):
                result += check(i, j)

        return result


Solution 2:

class Solution:
    def numMagicSquaresInside(self, grid: List[List[int]]) -> int:

        def isMagicSquare(row1: List[int], row2: List[int], row3: List[int]) -> bool:
            if len(set(row1 + row2 + row3)) != 9 or any(num not in range(1, 10) for num in row1 + row2 + row3):
                return False

            return (
                sum(row1) == sum(row2) == sum(row3)
                and row1[0] + row2[0] + row3[0] == row1[1] + row2[1] + row3[1] == row1[2] + row2[2] + row3[2]
                and row1[0] + row2[1] + row3[2] == row1[2] + row2[1] + row3[0]
            )

        rows, cols = len(grid), len(grid[0])
        count = 0

        if rows < 3 or cols < 3:
            return count

        for row in range(rows - 2):
            for col in range(cols - 2):
                if isMagicSquare(grid[row][col : col + 3], grid[row + 1][col : col + 3], grid[row + 2][col : col + 3]):
                    count += 1

        return count
            