2926. Maximum Balanced Subsequence Sum
Solved
Hard
Companies
Hint
You are given a 0-indexed integer array nums.

A subsequence of nums having length k and consisting of indices i0 < i1 < ... < ik-1 is balanced if the following holds:

nums[ij] - nums[ij-1] >= ij - ij-1, for every j in the range [1, k - 1].
A subsequence of nums having length 1 is considered balanced.

Return an integer denoting the maximum possible sum of elements in a balanced subsequence of nums.

A subsequence of an array is a new non-empty array that is formed from the original array by deleting some (possibly none) of the elements without disturbing the relative positions of the remaining elements.

 

Example 1:

Input: nums = [3,3,5,6]
Output: 14
Explanation: In this example, the subsequence [3,5,6] consisting of indices 0, 2, and 3 can be selected.
nums[2] - nums[0] >= 2 - 0.
nums[3] - nums[2] >= 3 - 2.
Hence, it is a balanced subsequence, and its sum is the maximum among the balanced subsequences of nums.
The subsequence consisting of indices 1, 2, and 3 is also valid.
It can be shown that it is not possible to get a balanced subsequence with a sum greater than 14.
Example 2:

Input: nums = [5,-1,-3,8]
Output: 13
Explanation: In this example, the subsequence [5,8] consisting of indices 0 and 3 can be selected.
nums[3] - nums[0] >= 3 - 0.
Hence, it is a balanced subsequence, and its sum is the maximum among the balanced subsequences of nums.
It can be shown that it is not possible to get a balanced subsequence with a sum greater than 13.
Example 3:

Input: nums = [-2,-1]
Output: -1
Explanation: In this example, the subsequence [-1] can be selected.
It is a balanced subsequence, and its sum is the maximum among the balanced subsequences of nums.
 

Constraints:

1 <= nums.length <= 105
-109 <= nums[i] <= 109


Solution 1:


class Solution:
    def maxBalancedSubsequenceSum(self, nums: List[int]) -> int:
        m = [(-float('inf'), -float('inf'))]
        for i, n in enumerate(nums):
            if n > 0:
                p = bisect_right(m, (n - i, float('inf')))
                m.insert(p, (n - i, n + max(0, m[p - 1][1])))
                while p + 1 < len(m) and m[p + 1][1] < m[p][1]:
                    del m[p + 1]
        return m[-1][1] if len(m) > 1 else max(nums)


Solution 2: Segment Tree

class SegmentTree:
    def __init__(self, n):
        self.n = n
        self.tree = [0] * (4 * n)
    
    def update(self, pos, val, node=0, left=0, right=None):
        if right is None:
            right = self.n - 1
        
        if left == right:
            self.tree[node] = val
        else:
            mid = (left + right) // 2
            if pos <= mid:
                self.update(pos, val, 2 * node + 1, left, mid)
            else:
                self.update(pos, val, 2 * node + 2, mid + 1, right)
            self.tree[node] = max(self.tree[2 * node + 1], self.tree[2 * node + 2])
    
    def query(self, ql, qr, node=0, left=0, right=None):
        if right is None:
            right = self.n - 1

        if right < ql or left > qr:
            return 0
        
        if ql <= left and right <= qr:
            return self.tree[node]

        mid = (left + right) // 2
        left_max = self.query(ql, qr, 2 * node + 1, left, mid)
        right_max = self.query(ql, qr, 2 * node + 2, mid + 1, right)
        return max(left_max, right_max)


class Solution:
    def maxBalancedSubsequenceSum(self, nums: List[int]) -> int:
        n = len(nums)
        t = SegmentTree(n)

        # nums[i] - nums[j] >= i - j
        # nums[i] - i >= nums[j] - j
        val_ind = []
        for i in range(n):
            val_ind.append([nums[i] - i, i])

        val_ind.sort()
        sorted_map = {}

        for i in range(n):
            sorted_map[val_ind[i][1]] = i

        for i in range(n - 1, -1, -1):
            ind = sorted_map[i]
            max_sum = t.query(ind, n - 1) + nums[i]
            t.update(ind, max_sum)

        return t.query(0, n - 1)



Solution 3: Fenwick Tree

class FenwickTree:
    def __init__(self, n):
        self.n = n
        self.bit = [0] * (n + 1)

    def update(self, pos, val):
        pos += 1
        while pos <= self.n:
            self.bit[pos] = max(self.bit[pos], val)
            pos += pos & -pos

    def query(self, pos):
        max_val = float('-inf')
        pos += 1
        while pos > 0:
            max_val = max(max_val, self.bit[pos])
            pos -= pos & -pos
        return max_val

class Solution:
    def maxBalancedSubsequenceSum(self, nums: List[int]) -> int:
        n = len(nums)
        val_ind = []
        for i in range(n):
            val_ind.append([nums[i] - i, i])

        val_ind.sort()
        t = FenwickTree(n)

        max_val = float('-inf')
        for i in range(n):
            ind = val_ind[i][1]
            sum_value = nums[ind]
            sum_value += t.query(ind)
            t.update(ind, sum_value)
            max_val = max(max_val, sum_value)

        return max_val