1420. Build Array Where You Can Find The Maximum Exactly K Comparisons
Solved
Hard
Topics
Companies
Hint
You are given three integers n, m and k. Consider the following algorithm to find the maximum element of an array of positive integers:


You should build the array arr which has the following properties:

arr has exactly n integers.
1 <= arr[i] <= m where (0 <= i < n).
After applying the mentioned algorithm to arr, the value search_cost is equal to k.
Return the number of ways to build the array arr under the mentioned conditions. As the answer may grow large, the answer must be computed modulo 109 + 7.

 

Example 1:

Input: n = 2, m = 3, k = 1
Output: 6
Explanation: The possible arrays are [1, 1], [2, 1], [2, 2], [3, 1], [3, 2] [3, 3]
Example 2:

Input: n = 5, m = 2, k = 3
Output: 0
Explanation: There are no possible arrays that satisify the mentioned conditions.
Example 3:

Input: n = 9, m = 1, k = 1
Output: 1
Explanation: The only possible array is [1, 1, 1, 1, 1, 1, 1, 1, 1]
 

Constraints:

1 <= n <= 50
1 <= m <= 100
0 <= k <= n


Solution 1:

class Solution:
    def numOfArrays(self, n: int, m: int, k: int) -> int:
        mod = 1000000007
        dp = [[[-1 for _ in range(m + 1)] for _ in range(k + 1)] for _ in range(n + 1)]

        def solve(l, r, prevMax):
            if l == 0 and r == 0:
                return 1

            if l == 0 or r < 0:
                return 0

            if dp[l][r][prevMax] != -1:
                return dp[l][r][prevMax]

            ans = 0
            for i in range(1, m + 1):
                if i > prevMax:
                    ans = (ans + solve(l - 1, r - 1, i)) % mod
                if i <= prevMax:
                    ans = (ans + solve(l - 1, r, prevMax)) % mod

            dp[l][r][prevMax] = ans % mod
            return dp[l][r][prevMax]

        return solve(n, k, 0)


Solution 2:


class Solution:
    def numOfArrays(self, n: int, m: int, k: int) -> int:
        mod = 1000000007
        dp = [[[0 for _ in range(m + 1)] for _ in range(k + 1)] for _ in range(n + 1)]

        for prevMax in range(m + 1):
            dp[0][0][prevMax] = 1

        for l in range(1, n + 1):
            for r in range(k + 1):
                for prevMax in range(m + 1):
                    ans = 0
                    for i in range(1, m + 1):
                        if i > prevMax and r > 0:
                            ans = (ans + dp[l - 1][r - 1][i]) % mod
                        if i <= prevMax:
                            ans = (ans + dp[l - 1][r][prevMax]) % mod

                    dp[l][r][prevMax] = ans % mod

        return dp[n][k][0]



Solution 3:


class Solution:
    def numOfArrays(self, n: int, m: int, k: int) -> int:
        mod = 1000000007
        prev = [[0 for _ in range(m + 1)] for _ in range(k + 1)]

        for num in range(m + 1):
            prev[0][num] = 1

        for l in range(1, n + 1):
            curr = [[0 for _ in range(m + 1)] for _ in range(k + 1)]
            for r in range(k + 1):
                for prevMax in range(m + 1):
                    ans = 0
                    for i in range(1, m + 1):
                        if i > prevMax and r > 0:
                            ans = (ans + prev[r - 1][i]) % mod
                        if i <= prevMax:
                            ans = (ans + prev[r][prevMax]) % mod

                    curr[r][prevMax] = ans % mod

            prev = curr

        return curr[k][0]
