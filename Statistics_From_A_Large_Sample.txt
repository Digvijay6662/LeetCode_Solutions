1093. Statistics from a Large Sample
Solved
Medium
Topics
Companies
Hint
You are given a large sample of integers in the range [0, 255]. Since the sample is so large, it is represented by an array count where count[k] is the number of times that k appears in the sample.

Calculate the following statistics:

minimum: The minimum element in the sample.
maximum: The maximum element in the sample.
mean: The average of the sample, calculated as the total sum of all elements divided by the total number of elements.
median:
If the sample has an odd number of elements, then the median is the middle element once the sample is sorted.
If the sample has an even number of elements, then the median is the average of the two middle elements once the sample is sorted.
mode: The number that appears the most in the sample. It is guaranteed to be unique.
Return the statistics of the sample as an array of floating-point numbers [minimum, maximum, mean, median, mode]. Answers within 10-5 of the actual answer will be accepted.

 

Example 1:

Input: count = [0,1,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
Output: [1.00000,3.00000,2.37500,2.50000,3.00000]
Explanation: The sample represented by count is [1,2,2,2,3,3,3,3].
The minimum and maximum are 1 and 3 respectively.
The mean is (1+2+2+2+3+3+3+3) / 8 = 19 / 8 = 2.375.
Since the size of the sample is even, the median is the average of the two middle elements 2 and 3, which is 2.5.
The mode is 3 as it appears the most in the sample.
Example 2:

Input: count = [0,4,3,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
Output: [1.00000,4.00000,2.18182,2.00000,1.00000]
Explanation: The sample represented by count is [1,1,1,1,2,2,2,3,3,4,4].
The minimum and maximum are 1 and 4 respectively.
The mean is (1+1+1+1+2+2+2+3+3+4+4) / 11 = 24 / 11 = 2.18181818... (for display purposes, the output shows the rounded number 2.18182).
Since the size of the sample is odd, the median is the middle element 2.
The mode is 1 as it appears the most in the sample.
 

Constraints:

count.length == 256
0 <= count[i] <= 109
1 <= sum(count) <= 109
The mode of the sample that count represents is unique.


Solution 1:

class Solution:
    def sampleStats(self, count: List[int]) -> List[float]:
        min_val = 256
        max_val = -1
        n = total = 0
        mode, mode_freq = -1, 0

        for i in range(256):
            if count[i]:
                min_val = min(min_val, i)
                max_val = max(max_val, i)
                n += count[i]
                total += i * count[i]
                if count[i] > mode_freq:
                    mode_freq = count[i]
                    mode = i

        mean = total / n

        def findKthElement(k):
            curr = 0
            for i in range(256):
                curr += count[i]
                if curr >= k:
                    return i

        if n % 2 == 1:
            median = findKthElement(n//2 + 1)
        else:
            median = (findKthElement(n//2) + findKthElement(n//2 + 1)) / 2

        result = [min_val, max_val, mean, median, mode]
        return result


Solution 2:

class Solution:
    def sampleStats(self, count: List[int]) -> List[float]:
        min_val, max_val, total, n = float('inf'), float('-inf'), 0, 0
        mode, mode_freq = -1, 0

        for i, freq in enumerate(count):
            if freq:
                min_val = min(min_val, i)
                max_val = max(max_val, i)
                total += i * freq
                n += freq
                if freq > mode_freq:
                    mode_freq = freq
                    mode = i

        mean = total / n
        left, right = 0, 255
        count_so_far = 0
        while left <= right:
            if count[left]:
                count_so_far += count[left]
                if n % 2 == 1 and count_so_far >= (n // 2 + 1):
                    median = left
                    break
                elif n % 2 == 0 and count_so_far >= n // 2:
                    if count_so_far > n // 2:
                        median = left
                    else:
                        next_val = left + 1
                        while count[next_val] == 0:
                            next_val += 1
                        median = (left + next_val) / 2
                    break
            left += 1

        return [min_val, max_val, mean, median, mode]


Solution 3:

class Solution:
    def sampleStats(self, count: List[int]) -> List[float]:
        min_val, max_val, total, n = float('inf'), float('-inf'), 0, 0
        mode, mode_freq = -1, 0

        for i, freq in enumerate(count):
            if freq:
                min_val = min(min_val, i)
                max_val = max(max_val, i)
                total += i * freq
                n += freq
                if freq > mode_freq:
                    mode_freq = freq
                    mode = i

        mean = total / n

        count_so_far = 0
        median1 = median2 = None
        
        for i, freq in enumerate(count):
            count_so_far += freq
            if median1 is None and count_so_far >= n // 2:
                median1 = i
            if count_so_far >= n//2 + 1:
                median2 = i
                break
        
        if n % 2 == 0:
            median = (median1 + median2) / 2
        else:
            median = median2

        return [min_val, max_val, mean, median, mode]
        