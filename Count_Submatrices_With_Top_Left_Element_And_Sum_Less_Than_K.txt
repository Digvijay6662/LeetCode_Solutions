3070. Count Submatrices with Top-Left Element and Sum Less Than k
Solved
Medium
Topics
Companies
You are given a 0-indexed integer matrix grid and an integer k.

Return the number of 
submatrices
 that contain the top-left element of the grid, and have a sum less than or equal to k.

 

Example 1:


Input: grid = [[7,6,3],[6,6,1]], k = 18
Output: 4
Explanation: There are only 4 submatrices, shown in the image above, that contain the top-left element of grid, and have a sum less than or equal to 18.
Example 2:


Input: grid = [[7,2,9],[1,5,0],[2,6,6]], k = 20
Output: 6
Explanation: There are only 6 submatrices, shown in the image above, that contain the top-left element of grid, and have a sum less than or equal to 20.
 

Constraints:

m == grid.length 
n == grid[i].length
1 <= n, m <= 1000 
0 <= grid[i][j] <= 1000
1 <= k <= 109


Solution 1:

class Solution:
    def countSubmatrices(self, grid: List[List[int]], k: int) -> int:
        n, m = len(grid), len(grid[0])
        prefix = [[0] * m for _ in range(n)]
        result = 0
        
        for i in range(n):
            for j in range(m):
                prefix[i][j] = grid[i][j] 
                prefix[i][j] += (prefix[i - 1][j] if i > 0 else 0) 
                prefix[i][j] += (prefix[i][j - 1] if j > 0 else 0) 
                prefix[i][j] -= (prefix[i-1][j-1] if i > 0 and j > 0 else 0)

                result += 1 if prefix[i][j] <= k else 0

        return result


Solution 2:

class Solution:
    def countSubmatrices(self, grid: List[List[int]], k: int) -> int:
        n, m = len(grid), len(grid[0])
        
        prefix = [[0] * (m + 1) for _ in range(n + 1)]
        for i in range(n):
            for j in range(m):
                prefix[i + 1][j + 1] = grid[i][j] + prefix[i][j + 1] + prefix[i + 1][j] - prefix[i][j]
        
        result = 0
        for i in range(1, n + 1):
            for j in range(1, m + 1):
                if prefix[i][j] <= k:
                    result += 1
        
        return result