845. Longest Mountain in Array
Solved
Medium
Topics
Companies
You may recall that an array arr is a mountain array if and only if:

arr.length >= 3
There exists some index i (0-indexed) with 0 < i < arr.length - 1 such that:
arr[0] < arr[1] < ... < arr[i - 1] < arr[i]
arr[i] > arr[i + 1] > ... > arr[arr.length - 1]
Given an integer array arr, return the length of the longest subarray, which is a mountain. Return 0 if there is no mountain subarray.

 

Example 1:

Input: arr = [2,1,4,7,3,2,5]
Output: 5
Explanation: The largest mountain is [1,4,7,3,2] which has length 5.
Example 2:

Input: arr = [2,2,2]
Output: 0
Explanation: There is no mountain.
 

Constraints:

1 <= arr.length <= 104
0 <= arr[i] <= 104
 

Follow up:

Can you solve it using only one pass?
Can you solve it in O(1) space?


Solution 1:

class Solution:
    def longestMountain(self, arr: List[int]) -> int:
        n = len(arr)
        prefix = [0] * n
        suffix = [0] * n

        result = 0

        for i in range(n - 2, -1, -1):
            if arr[i] > arr[i + 1]:
                suffix[i] = suffix[i + 1] + 1

        for i in range(n):
            if i > 0 and arr[i] > arr[i - 1]:
                prefix[i] = prefix[i - 1] + 1
                
            if prefix[i] and suffix[i]:
                result = max(result, prefix[i] + suffix[i] + 1)

        return result


Solution 2:

class Solution:
    def longestMountain(self, arr: List[int]) -> int:
        n = len(arr)
        if n < 3:
            return 0

        result = 0
        i = 1

        while i <= n - 2:
            if arr[i] > arr[i - 1] and arr[i] > arr[i + 1]:
                count = 0

                j = i

                while j > 0 and arr[j] > arr[j - 1]:
                    count += 1
                    j -= 1

                while i <= n - 2 and arr[i] > arr[i + 1]:
                    count += 1
                    i += 1
                result = max(result, count + 1)
            else:
                i += 1

        return result