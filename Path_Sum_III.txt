437. Path Sum III
Medium
9.6K
466
Companies
Given the root of a binary tree and an integer targetSum, return the number of paths where the sum of the values along the path equals targetSum.

The path does not need to start or end at the root or a leaf, but it must go downwards (i.e., traveling only from parent nodes to child nodes).

 

Example 1:


Input: root = [10,5,-3,3,2,null,11,3,-2,null,1], targetSum = 8
Output: 3
Explanation: The paths that sum to 8 are shown.
Example 2:

Input: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22
Output: 3
 

Constraints:

The number of nodes in the tree is in the range [0, 1000].
-109 <= Node.val <= 109
-1000 <= targetSum <= 1000


Solution 1:

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def pathSum(self, root: Optional[TreeNode], targetSum: int) -> int:
        self.count = 0  

        def dfs(node):
            if not node:
                return 
            helper(node, 0)
            dfs(node.left)
            dfs(node.right)

        def helper(node, pathSum):
            if not node:
                return 0

            helper(node.left, pathSum + node.val)
            helper(node.right, pathSum + node.val)

            if pathSum + node.val == targetSum:
                self.count+=1

        dfs(root)  

        return self.count


Solution 2:

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def pathSum(self, root: Optional[TreeNode], targetSum: int) -> int:
        if not root:
            return 0

        hashMap = defaultdict(int)
        hashMap[0] = 1

        def dfs(node, currSum):
            if not node:
                return 0

            res = 0
            currSum += node.val

            if (currSum - targetSum) in hashMap:
                res += hashMap[currSum - targetSum]

            hashMap[currSum] += 1

            res += dfs(node.left, currSum)
            res += dfs(node.right, currSum)

            hashMap[currSum] -= 1

            return res

        return dfs(root, 0)