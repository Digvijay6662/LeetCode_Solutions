3315. Construct the Minimum Bitwise Array II
Solved
Medium
Topics
Companies
Hint
You are given an array nums consisting of n 
prime
 integers.

You need to construct an array ans of length n, such that, for each index i, the bitwise OR of ans[i] and ans[i] + 1 is equal to nums[i], i.e. ans[i] OR (ans[i] + 1) == nums[i].

Additionally, you must minimize each value of ans[i] in the resulting array.

If it is not possible to find such a value for ans[i] that satisfies the condition, then set ans[i] = -1.

 

Example 1:

Input: nums = [2,3,5,7]

Output: [-1,1,4,3]

Explanation:

For i = 0, as there is no value for ans[0] that satisfies ans[0] OR (ans[0] + 1) = 2, so ans[0] = -1.
For i = 1, the smallest ans[1] that satisfies ans[1] OR (ans[1] + 1) = 3 is 1, because 1 OR (1 + 1) = 3.
For i = 2, the smallest ans[2] that satisfies ans[2] OR (ans[2] + 1) = 5 is 4, because 4 OR (4 + 1) = 5.
For i = 3, the smallest ans[3] that satisfies ans[3] OR (ans[3] + 1) = 7 is 3, because 3 OR (3 + 1) = 7.
Example 2:

Input: nums = [11,13,31]

Output: [9,12,15]

Explanation:

For i = 0, the smallest ans[0] that satisfies ans[0] OR (ans[0] + 1) = 11 is 9, because 9 OR (9 + 1) = 11.
For i = 1, the smallest ans[1] that satisfies ans[1] OR (ans[1] + 1) = 13 is 12, because 12 OR (12 + 1) = 13.
For i = 2, the smallest ans[2] that satisfies ans[2] OR (ans[2] + 1) = 31 is 15, because 15 OR (15 + 1) = 31.
 

Constraints:

1 <= nums.length <= 100
2 <= nums[i] <= 109
nums[i] is a prime number.


Solution 1:

class Solution:
    def minBitwiseArray(self, nums: List[int]) -> List[int]:
        n = len(nums)
        result = []

        for num in nums:
            curr = num + 1
            found = False

            for bit in range(31):
                if (num >> bit) & 1:
                    x = num & ~(1 << bit)
                    if x < 0:
                        continue
                    if (x | (x + 1)) == num:
                        if x < curr:
                            curr = x
                            found = True
                else:
                    break

            if found:
                result.append(curr)
            else:
                result.append(-1)

        return result


Solution 2:

class Solution:
    def minBitwiseArray(self, nums: List[int]) -> List[int]:
        result = []

        # Iterate through each prime number in the input array
        for num in nums:
            # Special case for num == 2, as there's no valid ans
            if num == 2:
                result.append(-1)
                continue

            last = -1  # To store the position of the rightmost set bit before 0

            # Find the rightmost set bit before zero in the binary representation of num
            for bit in range(32):  # Iterate over the first 32 bits
                if (num & (1 << bit)):  # Check if the bit at position `bit` is set (1)
                    last = bit  # Update the position of the last set bit
                else:
                    break  # Stop when we find the first zero bit

            # Flip the bits until the rightmost zero bit to create result[i]
            # The XOR with (1 << last) clears the rightmost 0, turning num into result[i]
            # For example = 13 1101, last set bit is 0
            # 1101 ^ (1 << 0) = 1100 = x, if we do x | (x + 1)
            # 1100 | 1101 = 1101
            result.append(num ^ (1 << last))

        return result