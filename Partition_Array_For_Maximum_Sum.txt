1043. Partition Array for Maximum Sum
Solved
Medium
Topics
Companies
Hint
Given an integer array arr, partition the array into (contiguous) subarrays of length at most k. After partitioning, each subarray has their values changed to become the maximum value of that subarray.

Return the largest sum of the given array after partitioning. Test cases are generated so that the answer fits in a 32-bit integer.

 

Example 1:

Input: arr = [1,15,7,9,2,5,10], k = 3
Output: 84
Explanation: arr becomes [15,15,15,9,10,10,10]
Example 2:

Input: arr = [1,4,1,5,7,3,6,1,9,9,3], k = 4
Output: 83
Example 3:

Input: arr = [1], k = 1
Output: 1
 

Constraints:

1 <= arr.length <= 500
0 <= arr[i] <= 109
1 <= k <= arr.length


Solution 1:

class Solution:
    def maxSumAfterPartitioning(self, arr: List[int], k: int) -> int:
        n = len(arr)
        dp = [-1] * n

        def solve(i):
            if i == n:
                return 0

            if dp[i] != -1:
                return dp[i]

            ans = 0
            curr_max = 0
            for j in range(i, min(n, i + k)):
                curr_max = max(curr_max, arr[j])
                window_size = j - i + 1
                ans = max(ans, curr_max * window_size + solve(j + 1))

            dp[i] = ans
            return ans

        return solve(0)


Solution 2:

class Solution:
    def maxSumAfterPartitioning(self, arr: List[int], k: int) -> int:
        n = len(arr)
        dp = [0] * (n + 1)

        for i in range(n - 1, -1, -1):
            curr_max = 0
            for j in range(i, min(n, i + k)):
                curr_max = max(curr_max, arr[j])
                window_size = j - i + 1
                dp[i] = max(dp[i], curr_max * window_size + dp[j + 1])

        return dp[0]


Solution 3:

class Solution:
    def maxSumAfterPartitioning(self, arr: List[int], k: int) -> int:
        n = len(arr)
        dp = [0] * k

        for i in range(n - 1, -1, -1):
            curr_max = ans = 0
            for j in range(i, min(n, i + k)):
                curr_max = max(curr_max, arr[j])
                window_size = j - i + 1
                ans = max(ans, curr_max * window_size + dp[(j + 1) % k])
            dp[i % k] = ans

        return dp[0]