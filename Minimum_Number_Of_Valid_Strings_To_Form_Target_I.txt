3291. Minimum Number of Valid Strings to Form Target I
Solved
Medium
Topics
Companies
Hint
You are given an array of strings words and a string target.

A string x is called valid if x is a 
prefix
 of any string in words.

Return the minimum number of valid strings that can be concatenated to form target. If it is not possible to form target, return -1.

 

Example 1:

Input: words = ["abc","aaaaa","bcdef"], target = "aabcdabc"

Output: 3

Explanation:

The target string can be formed by concatenating:

Prefix of length 2 of words[1], i.e. "aa".
Prefix of length 3 of words[2], i.e. "bcd".
Prefix of length 3 of words[0], i.e. "abc".
Example 2:

Input: words = ["abababab","ab"], target = "ababaababa"

Output: 2

Explanation:

The target string can be formed by concatenating:

Prefix of length 5 of words[0], i.e. "ababa".
Prefix of length 5 of words[0], i.e. "ababa".
Example 3:

Input: words = ["abcdef"], target = "xyz"

Output: -1

 

Constraints:

1 <= words.length <= 100
1 <= words[i].length <= 5 * 103
The input is generated such that sum(words[i].length) <= 105.
words[i] consists only of lowercase English letters.
1 <= target.length <= 5 * 103
target consists only of lowercase English letters.


Solution 1:

class TrieNode:
    def __init__(self):
        self.children = {}
        self.endOfWord = False

class Trie:

    def __init__(self):
        self.root = TrieNode()

    def insert(self, word: str) -> None:
        curr = self.root

        for c in word:
            if c not in curr.children:
                curr.children[c] = TrieNode()
            curr = curr.children[c]
        
        curr.endOfWord = True

class Solution:
    def minValidStrings(self, words: List[str], target: str) -> int:
        trie = Trie()

        for word in words:
            trie.insert(word)

        n = len(target)
        dp = [-1] * n

        def solve(i):
            if i == n:
                return 0

            if dp[i] != -1:
                return dp[i]

            ans = float('inf')
            curr = trie.root
            for j in range(i, n):
                if target[j] in curr.children:
                    ans = min(ans, 1 + solve(j + 1))
                    curr = curr.children[target[j]]
                else:
                    break

            dp[i] = ans
            return ans

        solve(0)

        return dp[0] if dp[0] != float('inf') else -1


Solution 2:

class TrieNode:
    def __init__(self):
        self.children = {}
        self.endOfWord = False

class Trie:

    def __init__(self):
        self.root = TrieNode()

    def insert(self, word: str) -> None:
        curr = self.root

        for c in word:
            if c not in curr.children:
                curr.children[c] = TrieNode()
            curr = curr.children[c]
        
        curr.endOfWord = True

class Solution:
    def minValidStrings(self, words: List[str], target: str) -> int:
        trie = Trie()

        for word in words:
            trie.insert(word)

        n = len(target)
        dp = [float('inf')] * (n + 1)
        dp[n] = 0

        for i in range(n - 1, -1, -1):
            curr = trie.root
            for j in range(i, n):
                if target[j] in curr.children:
                    dp[i] = min(dp[i], 1 + dp[j + 1])
                    curr = curr.children[target[j]]
                else:
                    break

        return dp[0] if dp[0] != float('inf') else -1


Solution 3:

class Solution:
    def minValidStrings(self, words: List[str], target: str) -> int:

        def zAlgorithm(string):
            n = len(string)
            z = [0] * n
            l = r = 0

            for i in range(1, n):
                if i > r:
                    l = r = i
                    while r < n and string[r] == string[r - l]:
                        r += 1
                    z[i] = r - l
                    r -= 1
                else:
                    idx = i - l
                    if i + z[idx] <= r:
                        z[i] = z[idx]
                    else:
                        l = i
                        while r < n and string[r] == string[r - l]:
                            r += 1
                        z[i] = r - l
                        r -= 1

            return z

        n = len(target)
        longest = [0] * n

        for word in words:
            z = zAlgorithm(word + "#" + target)[len(word) + 1:]
            for i in range(n):
                longest[i] = max(longest[i], z[i])

        dp = [float('inf')] * (n + 1)
        dp[0] = 0

        for i in range(n):
            if dp[i] != float('inf'):
                for j in range(1, longest[i] + 1):
                    dp[i + j] = min(dp[i + j], dp[i] + 1)
        
        return dp[n] if dp[n] != float('inf') else -1


Solution 4:

class SegmentTree:
    def __init__(self, n):
        # Initialize the segment tree with INF values
        self.n = n
        self.tree = [float('inf')] * (4 * n)
        self.lazy = [None] * (4 * n)  # Lazy array for propagation

    def build(self, arr, start, end, node):
        # Build the tree from the array
        if start == end:
            self.tree[node] = arr[start]
        else:
            mid = (start + end) // 2
            self.build(arr, start, mid, 2 * node + 1)
            self.build(arr, mid + 1, end, 2 * node + 2)
            self.tree[node] = min(self.tree[2 * node + 1], self.tree[2 * node + 2])

    def propagate(self, node, start, end):
        # Propagate the lazy updates
        if self.lazy[node] is not None:
            self.tree[node] = min(self.tree[node], self.lazy[node])  # Apply lazy value
            if start != end:
                # Propagate to children
                self.lazy[2 * node + 1] = self.lazy[node] if self.lazy[2 * node + 1] is None else min(self.lazy[2 * node + 1], self.lazy[node])
                self.lazy[2 * node + 2] = self.lazy[node] if self.lazy[2 * node + 2] is None else min(self.lazy[2 * node + 2], self.lazy[node])
            self.lazy[node] = None  # Clear lazy value after propagation

    def update_range(self, l, r, value, start, end, node):
        # Update the range [l, r] with the given value
        self.propagate(node, start, end)
        if r < start or l > end:
            return  # No overlap
        if l <= start and end <= r:
            # Total overlap
            self.tree[node] = min(self.tree[node], value)
            if start != end:
                self.lazy[2 * node + 1] = value if self.lazy[2 * node + 1] is None else min(self.lazy[2 * node + 1], value)
                self.lazy[2 * node + 2] = value if self.lazy[2 * node + 2] is None else min(self.lazy[2 * node + 2], value)
            return

        # Partial overlap
        mid = (start + end) // 2
        self.update_range(l, r, value, start, mid, 2 * node + 1)
        self.update_range(l, r, value, mid + 1, end, 2 * node + 2)
        self.tree[node] = min(self.tree[2 * node + 1], self.tree[2 * node + 2])

    def query_range(self, l, r, start, end, node):
        # Query the minimum value in the range [l, r]
        self.propagate(node, start, end)
        if r < start or l > end:
            return float('inf')  # No overlap
        if l <= start and end <= r:
            return self.tree[node]  # Total overlap

        # Partial overlap
        mid = (start + end) // 2
        left_min = self.query_range(l, r, start, mid, 2 * node + 1)
        right_min = self.query_range(l, r, mid + 1, end, 2 * node + 2)
        return min(left_min, right_min)

class Solution:
    def minValidStrings(self, words: List[str], target: str) -> int:

        def zAlgorithm(string):
            n = len(string)
            z = [0] * n
            l = r = 0

            for i in range(1, n):
                if i > r:
                    l = r = i
                    while r < n and string[r] == string[r - l]:
                        r += 1
                    z[i] = r - l
                    r -= 1
                else:
                    idx = i - l
                    if i + z[idx] <= r:
                        z[i] = z[idx]
                    else:
                        l = i
                        while r < n and string[r] == string[r - l]:
                            r += 1
                        z[i] = r - l
                        r -= 1

            return z

        n = len(target)
        longest = [0] * (n + 1)

        for word in words:
            z = zAlgorithm(word + "#" + target)[len(word) + 1:]
            for i in range(n):
                longest[i] = max(longest[i], z[i])

        dp = [float('inf')] * (n + 1)
        dp[0] = 0
        
        st = SegmentTree(n + 1)
        st.build(dp, 0, n, 0)
        
        for i in range(n + 1):
            dp[i] = st.query_range(i, i, 0, n, 0)
            x = longest[i]
            if x > 0:
                st.update_range(i + 1, i + x, dp[i] + 1, 0, n, 0)
        
        return dp[n] if dp[n] != float('inf') else -1


Solution 5:

class Solution:
    def minValidStrings(self, words: List[str], target: str) -> int:

        def zAlgorithm(string):
            n = len(string)
            z = [0] * n
            l = r = 0

            for i in range(1, n):
                if i > r:
                    l = r = i
                    while r < n and string[r] == string[r - l]:
                        r += 1
                    z[i] = r - l
                    r -= 1
                else:
                    idx = i - l
                    if i + z[idx] <= r:
                        z[i] = z[idx]
                    else:
                        l = i
                        while r < n and string[r] == string[r - l]:
                            r += 1
                        z[i] = r - l
                        r -= 1

            return z

        n = len(target)
        longest = [0] * n

        for word in words:
            z = zAlgorithm(word + "#" + target)[len(word) + 1:]
            for i in range(n):
                longest[i] = max(longest[i], z[i])

        result = 0
        farthest = 0
        next_farthest = 0

        for i in range(n):
            x = longest[i] + i
            next_farthest = max(x, next_farthest)

            if i >= farthest:
                farthest = next_farthest
                result += 1
            
            if i >= farthest:
                return -1
                
        return result


Solution 6:

class Solution:
    def minValidStrings(self, words: List[str], target: str) -> int:

        def KMP(word, pattern):
            string = word + "#" + pattern
            n = len(string)
            lps = [0] * n
            i, p = 1, 0

            while i < n:
                if string[i] == string[p]:
                    p += 1
                    lps[i] = p
                    i += 1
                elif p == 0:
                    lps[i] = 0
                    i += 1
                else:
                    p = lps[p - 1]

            return lps[len(word) + 1:]

        prefix_suffix_match = []
        for word in words:
            prefix_suffix_match.append(KMP(word, target))

        n = len(target)
        result = 0

        while n > 0:
            found = 0

            for i in range(len(words)):
                found = max(found, prefix_suffix_match[i][n - 1])

            if found == 0:
                return -1

            result += 1
            n -= found

        return result



