3180. Maximum Total Reward Using Operations I
Solved
Medium
Topics
Companies
Hint
You are given an integer array rewardValues of length n, representing the values of rewards.

Initially, your total reward x is 0, and all indices are unmarked. You are allowed to perform the following operation any number of times:

Choose an unmarked index i from the range [0, n - 1].
If rewardValues[i] is greater than your current total reward x, then add rewardValues[i] to x (i.e., x = x + rewardValues[i]), and mark the index i.
Return an integer denoting the maximum total reward you can collect by performing the operations optimally.

 

Example 1:

Input: rewardValues = [1,1,3,3]

Output: 4

Explanation:

During the operations, we can choose to mark the indices 0 and 2 in order, and the total reward will be 4, which is the maximum.

Example 2:

Input: rewardValues = [1,6,4,3,2]

Output: 11

Explanation:

Mark the indices 0, 2, and 1 in order. The total reward will then be 11, which is the maximum.

 

Constraints:

1 <= rewardValues.length <= 2000
1 <= rewardValues[i] <= 2000


Solution 1:

class Solution:
    def maxTotalReward(self, rewardValues: List[int]) -> int:
        n = len(rewardValues)
        rewardValues.sort()
        dp = {}
        dp[0] = 0
        
        for reward in rewardValues:
            nxt = dp.copy()
            
            for curr in list(nxt):
                if reward > curr:
                    temp = curr + reward
                    if temp not in dp or dp[temp] < nxt[curr] + reward:
                        dp[temp] = nxt[curr] + reward
                        
        return max(dp.values())


Solution 2:

class Solution:
    def maxTotalReward(self, rewardValues: List[int]) -> int:
        rewardValues.sort()
        possible = {0}

        for reward in rewardValues:
            new_possible = possible.copy()
            for prev in possible:
                if reward > prev:
                    new_possible.add(reward + prev)
            possible = new_possible

        return max(possible)  


Solution 3:

class Solution:
    def maxTotalReward(self, rewardValues: List[int]) -> int:
        rewardValues.sort()
        max_reward = rewardValues[-1]
        possible = 1

        for reward in rewardValues:
            mask =  (1 << reward) - 1
            possible |= (possible & mask) << reward
        
        for i in range(2 * max_reward, -1, -1):
            if (possible >> i) & 1:
                return i
        
        return -1