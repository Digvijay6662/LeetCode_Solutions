64. Minimum Path Sum
Medium
11.6K
150
Companies
Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.

 

Example 1:


Input: grid = [[1,3,1],[1,5,1],[4,2,1]]
Output: 7
Explanation: Because the path 1 → 3 → 1 → 1 → 1 minimizes the sum.
Example 2:

Input: grid = [[1,2,3],[4,5,6]]
Output: 12
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 200
0 <= grid[i][j] <= 200


Solution 1:

class Solution:
    def minPathSum(self, grid: List[List[int]]) -> int:
        m, n = len(grid), len(grid[0])
        dp = [[-1] * n for _ in range(m)]
        def solve(i, j):
            if i == m or j == n:
                return float('inf')
            
            if i == m - 1 and j == n - 1:
                return grid[i][j]
            
            if dp[i][j] != -1:
                return dp[i][j]
            
            op1 = op2 = 0

            op1 = grid[i][j] + solve(i + 1, j)
            op2 = grid[i][j] + solve(i, j + 1)

            dp[i][j] = min(op1, op2)
            return dp[i][j]

        return solve(0, 0)


Solution 2:

class Solution:
    def minPathSum(self, grid: List[List[int]]) -> int:
        m, n = len(grid), len(grid[0])
        dp = [[0] * (n + 1) for _ in range(m + 1)]        

        for i in range(m + 1):
            dp[i][n] = float('inf')

        for j in range(n + 1):
            dp[m][j] = float('inf')

        for i in range(m - 1, -1, -1):
            for j in range(n - 1, -1, -1):
                if i == m - 1 and j == n - 1:
                    dp[i][j] = grid[i][j]
                else:
                    dp[i][j] = grid[i][j] + min(dp[i + 1][j], dp[i][j + 1])

        return dp[0][0]


Solution 3:

class Solution:
    def minPathSum(self, grid: List[List[int]]) -> int:
        m, n = len(grid), len(grid[0])
        dp = [float('inf')] * (n + 1)

        for i in range(m - 1, -1, -1):
            for j in range(n - 1, -1, -1):
                if i == m - 1 and j == n - 1:
                    dp[j] = grid[i][j]
                else:
                    dp[j] = grid[i][j] + min(dp[j], dp[j + 1])

        return dp[0]


Solution 4:

class Solution:
    def minPathSum(self, grid: List[List[int]]) -> int:
        m, n = len(grid), len(grid[0])
        dp = [[0] * n for _ in range(m)]
        
        dp[m - 1][n - 1] = grid[m - 1][n - 1]
        
        for i in range(m - 2, -1, -1):
            dp[i][n - 1] = grid[i][n - 1] + dp[i + 1][n - 1]
        
        for j in range(n - 2, -1, -1):
            dp[m - 1][j] = grid[m - 1][j] + dp[m - 1][j + 1]
        
        for i in range(m - 2, -1, -1):
            for j in range(n - 2, -1, -1):
                dp[i][j] = grid[i][j] + min(dp[i + 1][j], dp[i][j + 1])
        
        return dp[0][0]


Solution 5:

class Solution:
    def minPathSum(self, grid: List[List[int]]) -> int:
        m, n = len(grid), len(grid[0])
        dp = [0] * n
        
        dp[n - 1] = grid[m - 1][n - 1]
        
        for j in range(n - 2, -1, -1):
            dp[j] = grid[m - 1][j] + dp[j + 1]
        
        for i in range(m - 2, -1, -1):
            dp[n - 1] += grid[i][n - 1]
                
            for j in range(n - 2, -1, -1):
                dp[j] = grid[i][j] + min(dp[j], dp[j + 1])
        
        return dp[0]
