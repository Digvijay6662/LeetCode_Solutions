1187. Make Array Strictly Increasing
Hard
1.1K
23
Companies
Given two integer arrays arr1 and arr2, return the minimum number of operations (possibly zero) needed to make arr1 strictly increasing.

In one operation, you can choose two indices 0 <= i < arr1.length and 0 <= j < arr2.length and do the assignment arr1[i] = arr2[j].

If there is no way to make arr1 strictly increasing, return -1.

 

Example 1:

Input: arr1 = [1,5,3,6,7], arr2 = [1,3,2,4]
Output: 1
Explanation: Replace 5 with 2, then arr1 = [1, 2, 3, 6, 7].
Example 2:

Input: arr1 = [1,5,3,6,7], arr2 = [4,3,1]
Output: 2
Explanation: Replace 5 with 3 and then replace 3 with 4. arr1 = [1, 3, 4, 6, 7].
Example 3:

Input: arr1 = [1,5,3,6,7], arr2 = [1,6,3,3]
Output: -1
Explanation: You can't make arr1 strictly increasing.
 

Constraints:

1 <= arr1.length, arr2.length <= 2000
0 <= arr1[i], arr2[i] <= 10^9


Solution:

class Solution:
    def makeArrayIncreasing(self, arr1: List[int], arr2: List[int]) -> int:
        n = len(arr1)
        arr2.sort()
        dp = {}

        def helper(prev, i):
            if i == n:
                return 0

            if (prev, i) in dp:
                return dp[(prev, i)]

            ans = float('inf')
            idx = bisect.bisect(arr2, prev)

            if arr1[i] > prev:
                ans = helper(arr1[i], i + 1)

            if idx < len(arr2):
                ans = min(ans, helper(arr2[idx], i + 1) + 1)

            dp[(prev, i)] = ans
            return ans

        res = helper(float('-inf'), 0)
        return res if res != float('inf') else -1