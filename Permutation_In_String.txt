567. Permutation in String
Medium
9.9K
317
Companies
Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.

In other words, return true if one of s1's permutations is the substring of s2.

 

Example 1:

Input: s1 = "ab", s2 = "eidbaooo"
Output: true
Explanation: s2 contains one permutation of s1 ("ba").
Example 2:

Input: s1 = "ab", s2 = "eidboaoo"
Output: false
 

Constraints:

1 <= s1.length, s2.length <= 104
s1 and s2 consist of lowercase English letters.


Solution 1:

class Solution:
    def checkInclusion(self, s1: str, s2: str) -> bool:
        if len(s1) > len(s2):
            return False

        def matches(s1map, s2map):
            for key in s1map:
                if s1map[key] - s2map.get(key, 0) != 0:
                    return False
            return True

        s1map = Counter(s1)

        for i in range(len(s2) - len(s1) + 1):
            s2map = Counter(s2[i:i+len(s1)])
            if matches(s1map, s2map):
                return True

        return False


Solution 2:

class Solution:
    def checkInclusion(self, s1: str, s2: str) -> bool:
        if len(s1) > len(s2):
            return False

        def matches(s1map, s2map):
            for i in range(26):
                if s1map[i] != s2map[i]:
                    return False
            return True

        s1map = [0] * 26

        for char in s1:
            s1map[ord(char) - ord('a')] += 1

        for i in range(len(s2) - len(s1) + 1):
            s2map = [0] * 26
            for j in range(len(s1)):
                s2map[ord(s2[i + j]) - ord('a')] += 1
            if matches(s1map, s2map):
                return True

        return False


Solution 3:

class Solution:
    def checkInclusion(self, s1: str, s2: str) -> bool:
        if len(s1) > len(s2):
            return False

        def matches(s1map, s2map):
            for i in range(26):
                if s1map[i] != s2map[i]:
                    return False
            return True

        s1map = [0] * 26
        s2map = [0] * 26

        for i in range(len(s1)):
            s1map[ord(s1[i]) - ord('a')] += 1
            s2map[ord(s2[i]) - ord('a')] += 1

        for i in range(len(s2) - len(s1)):
            if matches(s1map, s2map):
                return True
            s2map[ord(s2[i + len(s1)]) - ord('a')] += 1
            s2map[ord(s2[i]) - ord('a')] -= 1

        return matches(s1map, s2map)


Solution 4:

class Solution:
    def checkInclusion(self, s1: str, s2: str) -> bool:
        if len(s1) > len(s2):
            return False

        s1map = [0] * 26
        s2map = [0] * 26

        for i in range(len(s1)):
            s1map[ord(s1[i]) - ord('a')] += 1
            s2map[ord(s2[i]) - ord('a')] += 1

        count = 0

        for i in range(26):
            if s1map[i] == s2map[i]:
                count += 1

        for i in range(len(s2) - len(s1)):
            r = ord(s2[i + len(s1)]) - ord('a')
            l = ord(s2[i]) - ord('a')

            if count == 26:
                return True

            s2map[r] += 1
            if s2map[r] == s1map[r]:
                count += 1
            elif s2map[r] == s1map[r] + 1:
                count -= 1
            s2map[l] -= 1
            if s2map[l] == s1map[l]:
                count += 1
            elif s2map[l] == s1map[l] - 1:
                count -= 1

        return count == 26


