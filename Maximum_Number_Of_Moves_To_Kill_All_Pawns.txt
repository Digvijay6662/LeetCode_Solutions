3283. Maximum Number of Moves to Kill All Pawns
Solved
Hard
Topics
Companies
Hint
There is a 50 x 50 chessboard with one knight and some pawns on it. You are given two integers kx and ky where (kx, ky) denotes the position of the knight, and a 2D array positions where positions[i] = [xi, yi] denotes the position of the pawns on the chessboard.

Alice and Bob play a turn-based game, where Alice goes first. In each player's turn:

The player selects a pawn that still exists on the board and captures it with the knight in the fewest possible moves. Note that the player can select any pawn, it might not be one that can be captured in the least number of moves.
In the process of capturing the selected pawn, the knight may pass other pawns without capturing them. Only the selected pawn can be captured in this turn.
Alice is trying to maximize the sum of the number of moves made by both players until there are no more pawns on the board, whereas Bob tries to minimize them.

Return the maximum total number of moves made during the game that Alice can achieve, assuming both players play optimally.

Note that in one move, a chess knight has eight possible positions it can move to, as illustrated below. Each move is two cells in a cardinal direction, then one cell in an orthogonal direction.



 

Example 1:

Input: kx = 1, ky = 1, positions = [[0,0]]

Output: 4

Explanation:



The knight takes 4 moves to reach the pawn at (0, 0).

Example 2:

Input: kx = 0, ky = 2, positions = [[1,1],[2,2],[3,3]]

Output: 8

Explanation:



Alice picks the pawn at (2, 2) and captures it in two moves: (0, 2) -> (1, 4) -> (2, 2).
Bob picks the pawn at (3, 3) and captures it in two moves: (2, 2) -> (4, 1) -> (3, 3).
Alice picks the pawn at (1, 1) and captures it in four moves: (3, 3) -> (4, 1) -> (2, 2) -> (0, 3) -> (1, 1).
Example 3:

Input: kx = 0, ky = 0, positions = [[1,2],[2,4]]

Output: 3

Explanation:

Alice picks the pawn at (2, 4) and captures it in two moves: (0, 0) -> (1, 2) -> (2, 4). Note that the pawn at (1, 2) is not captured.
Bob picks the pawn at (1, 2) and captures it in one move: (2, 4) -> (1, 2).
 

Constraints:

0 <= kx, ky <= 49
1 <= positions.length <= 15
positions[i].length == 2
0 <= positions[i][0], positions[i][1] <= 49
All positions[i] are unique.
The input is generated such that positions[i] != [kx, ky] for all 0 <= i < positions.length.


Solution 1:

class Solution:
    def maxMoves(self, kx: int, ky: int, positions: List[List[int]]) -> int:
        # Possible knight moves in chess
        directions = [(2, 1), (2, -1), (-2, 1), (-2, -1), 
                      (1, 2), (1, -2), (-1, 2), (-1, -2)]

        # Add knight's initial position to the positions list
        positions.append([kx, ky])
        n = len(positions)  # Total number of positions (pawns + knight)

        def bfs(idx: int):
            """
            Perform BFS to calculate the minimum moves required from index "idx" to reach all other positions.
            """
            dist = [[-1 for _ in range(50)] for _ in range(50)]  # Distance grid initialized to -1
            x, y = positions[idx]  # Starting position (current pawn or knight)
            q = deque([(x, y)])
            dist[x][y] = 0  # Starting position has 0 distance

            while q:
                x, y = q.popleft()
                for dr, dc in directions:
                    r, c = x + dr, y + dc
                    # Check if the new position is within the board and hasn't been visited
                    if 0 <= r < 50 and 0 <= c < 50 and dist[r][c] == -1:
                        dist[r][c] = dist[x][y] + 1  # Update the distance
                        q.append((r, c))

            # Fill the min_moves matrix with distances from the current position to all others
            for i in range(n):
                x, y = positions[i]
                min_moves[idx][i] = dist[x][y]

        # Initialize the min_moves matrix to infinity
        min_moves = [[float('inf') for _ in range(n)] for _ in range(n)]
        for i in range(n):
            bfs(i)  # Calculate distances for each position

        @cache
        def solve(i: int, mask: int, alice: bool) -> int:
            """
            Recursive function using dynamic programming with memoization to calculate the maximum moves Alice can force.
            `i` is the current position index, `mask` is the bitmask of visited positions, `alice` is the current player's turn.
            """
            if mask == (1 << n) - 1:  # If all pawns have been captured
                return 0

            if alice:
                ans = float('-inf')
                # Alice tries to maximize the score
                for j in range(n):
                    if mask & (1 << j) == 0:  # If the j-th position is not visited
                        ans = max(ans, min_moves[i][j] + solve(j, mask | (1 << j), not alice))
            else:
                ans = float('inf')
                # Bob tries to minimize the score
                for j in range(n):
                    if mask & (1 << j) == 0:  # If the j-th position is not visited
                        ans = min(ans, min_moves[i][j] + solve(j, mask | (1 << j), not alice))

            return ans

        # Start from the knight's initial position and initiate the game
        return solve(n - 1, 1 << (n - 1), True)


Solution 2:

class Solution:
    def maxMoves(self, kx: int, ky: int, positions: List[List[int]]) -> int:
        # Possible knight moves in chess
        directions = [(2, 1), (2, -1), (-2, 1), (-2, -1), 
                      (1, 2), (1, -2), (-1, 2), (-1, -2)]

        # Add knight's initial position to the positions list
        positions.append([kx, ky])
        n = len(positions)  # Total number of positions (pawns + knight)

        def bfs(idx: int):
            """
            Perform BFS to calculate the minimum moves required from index "idx" to reach all other positions.
            """
            dist = [[-1 for _ in range(50)] for _ in range(50)]  # Distance grid initialized to -1
            x, y = positions[idx]  # Starting position (current pawn or knight)
            q = deque([(x, y)])
            dist[x][y] = 0  # Starting position has 0 distance

            while q:
                x, y = q.popleft()
                for dr, dc in directions:
                    r, c = x + dr, y + dc
                    # Check if the new position is within the board and hasn't been visited
                    if 0 <= r < 50 and 0 <= c < 50 and dist[r][c] == -1:
                        dist[r][c] = dist[x][y] + 1  # Update the distance
                        q.append((r, c))

            # Fill the min_moves matrix with distances from the current position to all others
            for i in range(n):
                x, y = positions[i]
                min_moves[idx][i] = dist[x][y]

        # Initialize the min_moves matrix to infinity
        min_moves = [[float('inf') for _ in range(n)] for _ in range(n)]
        for i in range(n):
            bfs(i)  # Calculate distances for each position

        dp = [[-1 for _ in range(1 << n)] for _ in range(n)]
        
        def solve(i: int, mask: int, alice: bool) -> int:
            """
            Recursive function using dynamic programming with memoization to calculate the maximum moves Alice can force.
            `i` is the current position index, `mask` is the bitmask of visited positions, `alice` is the current player's turn.
            """
            if mask == (1 << n) - 1:  # If all pawns have been captured
                return 0

            if dp[i][mask] != -1:
                return dp[i][mask]

            if alice:
                ans = float('-inf')
                # Alice tries to maximize the score
                for j in range(n):
                    if mask & (1 << j) == 0:  # If the j-th position is not visited
                        ans = max(ans, min_moves[i][j] + solve(j, mask | (1 << j), not alice))
            else:
                ans = float('inf')
                # Bob tries to minimize the score
                for j in range(n):
                    if mask & (1 << j) == 0:  # If the j-th position is not visited
                        ans = min(ans, min_moves[i][j] + solve(j, mask | (1 << j), not alice))

            dp[i][mask] = ans
            return ans

        # Start from the knight's initial position and initiate the game
        return solve(n - 1, 1 << (n - 1), True)