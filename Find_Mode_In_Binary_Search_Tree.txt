501. Find Mode in Binary Search Tree
Solved
Easy
Topics
Companies
Given the root of a binary search tree (BST) with duplicates, return all the mode(s) (i.e., the most frequently occurred element) in it.

If the tree has more than one mode, return them in any order.

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than or equal to the node's key.
The right subtree of a node contains only nodes with keys greater than or equal to the node's key.
Both the left and right subtrees must also be binary search trees.
 

Example 1:


Input: root = [1,null,2,2]
Output: [2]
Example 2:

Input: root = [0]
Output: [0]
 

Constraints:

The number of nodes in the tree is in the range [1, 104].
-105 <= Node.val <= 105
 

Follow up: Could you do that without using any extra space? (Assume that the implicit stack space incurred due to recursion does not count).


Solution 1:

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def findMode(self, root: Optional[TreeNode]) -> List[int]:
        freq_map = defaultdict(int)

        def dfs(node):
            if not node:
                return  
            
            freq_map[node.val] += 1
            dfs(node.left)
            dfs(node.right)

        dfs(root)
        max_freq = max(freq_map.values())
        return [val for val, freq in freq_map.items() if freq == max_freq]
  

Solution 2:

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def findMode(self, root: Optional[TreeNode]) -> List[int]:
        def inorder(node):
            nonlocal prev, max_freq, current_freq, modes

            if not node:
                return
            
            inorder(node.left)
            
            if node.val == prev:
                current_freq += 1
            else:
                current_freq = 1
                
            if current_freq == max_freq:
                modes.append(node.val)
            elif current_freq > max_freq:
                max_freq = current_freq
                modes = [node.val]

            prev = node.val
            inorder(node.right)
        
        prev = None
        max_freq = 0
        current_freq = 0
        modes = []
        
        inorder(root)
        
        return modes


Solution 3:


# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def findMode(self, root: Optional[TreeNode]) -> List[int]:
        max_freq = 0
        current_freq = 0
        prev = 0
        modes = []
        
        curr = root
        while curr:
            if curr.left:
                friend = curr.left
                while friend.right:
                    friend = friend.right
                
                friend.right = curr
                
                left = curr.left
                curr.left = None
                curr = left
            else:
                if curr.val == prev:
                    current_freq += 1
                else:
                    current_freq = 1

                if current_freq == max_freq:
                    modes.append(curr.val)
                elif current_freq > max_freq:
                    max_freq = current_freq
                    modes = [curr.val]

                prev = curr.val
                curr = curr.right
        
        return modes
