3145. Find Products of Elements of Big Array
Solved
Hard
Topics
Companies
Hint
A powerful array for an integer x is the shortest sorted array of powers of two that sum up to x. For example, the powerful array for 11 is [1, 2, 8].

The array big_nums is created by concatenating the powerful arrays for every positive integer i in ascending order: 1, 2, 3, and so forth. Thus, big_nums starts as [1, 2, 1, 2, 4, 1, 4, 2, 4, 1, 2, 4, 8, ...].

You are given a 2D integer matrix queries, where for queries[i] = [fromi, toi, modi] you should calculate (big_nums[fromi] * big_nums[fromi + 1] * ... * big_nums[toi]) % modi.

Return an integer array answer such that answer[i] is the answer to the ith query.

 

Example 1:

Input: queries = [[1,3,7]]

Output: [4]

Explanation:

There is one query.

big_nums[1..3] = [2,1,2]. The product of them is 4. The remainder of 4 under 7 is 4.

Example 2:

Input: queries = [[2,5,3],[7,7,4]]

Output: [2,2]

Explanation:

There are two queries.

First query: big_nums[2..5] = [1,2,4,1]. The product of them is 8. The remainder of 8 under 3 is 2.

Second query: big_nums[7] = 2. The remainder of 2 under 4 is 2.

 

Constraints:

1 <= queries.length <= 500
queries[i].length == 3
0 <= queries[i][0] <= queries[i][1] <= 1015
1 <= queries[i][2] <= 105


Solution 1:

class Solution:
    def findProductsOfElements(self, queries: List[List[int]]) -> List[int]:
        
        def countOnes(num):
            num += 1
            count = 0
            power = 1
            while power <= num:
                count += num // (power * 2) * (power)
                extra = num % (power * 2)
                count += max(0, extra - power)
                power <<= 1
            return count

        def countTwos(num):
            num += 1
            count = 0
            power = 1
            position = 0

            while power <= num:
                count += num // (power * 2) * (power) * (position)
                extra = num % (power * 2)
                count += max(0, extra - power) * (position)
                power <<= 1
                position += 1

            return count

        def query(num):
            num += 1
            l, r = 0, num
            ans = num
            extra = 0

            while l <= r:
                m = (l + r) >> 1
                no_of_ones = countOnes(m)
                if no_of_ones <= num:
                    ans = m
                    extra = num - no_of_ones
                    l = m + 1
                else:
                    r = m - 1

            no_of_twos = countTwos(ans)
            if extra:
                ans += 1
                i = 0
                while extra:
                    if ans & (1 << i) != 0:
                        extra -= 1
                        no_of_twos += i
                    i += 1
            return no_of_twos

        return [pow(2, query(y) - query(x - 1), mod) for x, y, mod in queries]