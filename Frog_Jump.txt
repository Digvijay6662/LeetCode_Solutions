403. Frog Jump
Hard
4.1K
204
Companies
A frog is crossing a river. The river is divided into some number of units, and at each unit, there may or may not exist a stone. The frog can jump on a stone, but it must not jump into the water.

Given a list of stones' positions (in units) in sorted ascending order, determine if the frog can cross the river by landing on the last stone. Initially, the frog is on the first stone and assumes the first jump must be 1 unit.

If the frog's last jump was k units, its next jump must be either k - 1, k, or k + 1 units. The frog can only jump in the forward direction.

 

Example 1:

Input: stones = [0,1,3,5,6,8,12,17]
Output: true
Explanation: The frog can jump to the last stone by jumping 1 unit to the 2nd stone, then 2 units to the 3rd stone, then 2 units to the 4th stone, then 3 units to the 6th stone, 4 units to the 7th stone, and 5 units to the 8th stone.
Example 2:

Input: stones = [0,1,2,3,4,8,9,11]
Output: false
Explanation: There is no way to jump to the last stone as the gap between the 5th and 6th stone is too large.
 

Constraints:

2 <= stones.length <= 2000
0 <= stones[i] <= 231 - 1
stones[0] == 0
stones is sorted in a strictly increasing order.


Solution 1:

class Solution:
    def canCross(self, stones: List[int]) -> bool:
        n = len(stones)
        dp = [[-1 for _ in range(n)] for _ in range(n)]

        def solve(i, k):
            if i >= n:
                return False
            
            if i == n - 1:
                return True

            if dp[i][k] != -1:
                return dp[i][k]

            ans = False
            if i == 0:
                jump = stones[i + 1] - stones[i]
                if jump == 1:
                    ans |= solve(i + 1, 1)
            else:
                for j in range(i + 1, n):
                    jump = stones[j] - stones[i]

                    if k - 1 > 0 and jump == k - 1:
                        ans |= solve(j, k - 1)
                        if ans:
                            return True

                    if jump == k:
                        ans |= solve(j, k)
                        if ans:
                            return True

                    if jump == k + 1:
                        ans |= solve(j, k + 1)
                        if ans:
                            return True
                            
            dp[i][k] = ans
            return ans


        return solve(0, 1)


Solution 2:

class Solution:
    def canCross(self, stones: List[int]) -> bool:
        stoneMap = {}
        n = len(stones)
        dp = [[-1] * n for _ in range(n)]
        
        def solve(i, k):
            if i == n - 1:
                return True
            
            if dp[i][k] != -1:
                return dp[i][k]
            
            ans = False
            for nextJump in range(k - 1, k + 2):
                if nextJump > 0 and stones[i] + nextJump in stoneMap:
                    ans = ans or solve(stoneMap[stones[i] + nextJump], nextJump)
            
            dp[i][k] = 1 if ans else 0
            return ans
        
        for i in range(n):
            stoneMap[stones[i]] = i
        
        return solve(0, 0)


Solution 3:

class Solution:
    def canCross(self, stones: List[int]) -> bool:
        stoneMap = {}
        n = len(stones)
        dp = [[False] * (n + 1) for _ in range(n)]
        
        for i in range(n):
            stoneMap[stones[i]] = i

        dp[0][0] = True
        for i in range(n):
            for k in range(n):
                if dp[i][k]:
                    if stones[i] + k in stoneMap:
                        dp[stoneMap[stones[i] + k]][k] = True
                    if stones[i] + k + 1 in stoneMap:
                        dp[stoneMap[stones[i] + k + 1]][k + 1] = True
                    if k - 1 > 0 and stones[i] + k - 1 in stoneMap:
                        dp[stoneMap[stones[i] + k - 1]][k - 1] = True
        
        for i in range(n):
            if dp[n - 1][i]:
                return True
        
        return False


Solution 4:

class Solution:
    def canCross(self, stones: List[int]) -> bool:
        n = len(stones)
        
        jumpMap = {stone: set() for stone in stones}
        jumpMap[0].add(0)
        
        for i in range(n):
            for k in jumpMap[stones[i]]:
                for nextJump in range(k - 1, k + 2):
                    if nextJump > 0 and stones[i] + nextJump in jumpMap:
                        jumpMap[stones[i] + nextJump].add(nextJump)
                        
        return len(jumpMap[stones[-1]]) > 0
