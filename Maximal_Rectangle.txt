85. Maximal Rectangle
Solved
Hard
Topics
Companies
Given a rows x cols binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.

 

Example 1:


Input: matrix = [["1","0","1","0","0"],["1","0","1","1","1"],["1","1","1","1","1"],["1","0","0","1","0"]]
Output: 6
Explanation: The maximal rectangle is shown in the above picture.
Example 2:

Input: matrix = [["0"]]
Output: 0
Example 3:

Input: matrix = [["1"]]
Output: 1
 

Constraints:

rows == matrix.length
cols == matrix[i].length
1 <= row, cols <= 200
matrix[i][j] is '0' or '1'.


Solution 1:

class Solution:
    def maximalRectangle(self, matrix: List[List[str]]) -> int:

        def solve(heights):
            n = len(heights)
            stack = []
            maxArea = 0

            for i, h in enumerate(heights):
                start = i
                while stack and stack[-1][1] > h:
                    idx, height = stack.pop()
                    maxArea = max(maxArea, height * (i - idx))
                    start = idx

                stack.append((start, h))

            for i, h in stack:
                maxArea = max(maxArea, h * (n - i))

            return maxArea

        if not matrix or not matrix[0]:
            return 0

        n, m = len(matrix), len(matrix[0])
        dp = [0] * m
        max_area = 0

        for i in range(n):
            for j in range(m):
                dp[j] = dp[j] + 1 if matrix[i][j] == '1' else 0
            max_area = max(max_area, solve(dp))

        return max_area


Solution 2:

class Solution:
    def maximalRectangle(self, matrix: List[List[str]]) -> int:

        def largestRectangle(arr):
            n = len(arr)
            stack = []
            max_area = 0

            for i in range(n):
                while stack and arr[stack[-1]] >= arr[i]:
                    height = arr[stack.pop()]
                    width = i if not stack else i - stack[-1] - 1
                    area = height * width
                    max_area = max(max_area, area)
                stack.append(i)

            while stack:
                height = arr[stack.pop()]
                width = n if not stack else n - stack[-1] - 1
                area = height * width
                max_area = max(max_area, area)

            return max_area

        if not matrix or not matrix[0]:
            return 0

        n, m = len(matrix), len(matrix[0])
        dp = [0] * m
        max_area = 0

        for i in range(n):
            for j in range(m):
                dp[j] = dp[j] + 1 if matrix[i][j] == '1' else 0
            max_area = max(max_area, largestRectangle(dp))

        return max_area