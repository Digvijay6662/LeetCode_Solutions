126. Word Ladder II
Solved
Hard
Topics
Companies
A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:

Every adjacent pair of words differs by a single letter.
Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.
sk == endWord
Given two words, beginWord and endWord, and a dictionary wordList, return all the shortest transformation sequences from beginWord to endWord, or an empty list if no such sequence exists. Each sequence should be returned as a list of the words [beginWord, s1, s2, ..., sk].

 

Example 1:

Input: beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log","cog"]
Output: [["hit","hot","dot","dog","cog"],["hit","hot","lot","log","cog"]]
Explanation: There are 2 shortest transformation sequences:
"hit" -> "hot" -> "dot" -> "dog" -> "cog"
"hit" -> "hot" -> "lot" -> "log" -> "cog"
Example 2:

Input: beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log"]
Output: []
Explanation: The endWord "cog" is not in wordList, therefore there is no valid transformation sequence.
 

Constraints:

1 <= beginWord.length <= 5
endWord.length == beginWord.length
1 <= wordList.length <= 500
wordList[i].length == beginWord.length
beginWord, endWord, and wordList[i] consist of lowercase English letters.
beginWord != endWord
All the words in wordList are unique.
The sum of all shortest transformation sequences does not exceed 105.


Solution 1:

class Solution:
    def findLadders(self, beginWord: str, endWord: str, wordList: List[str]) -> List[List[str]]:
        if endWord not in wordList:
            return []

        if beginWord not in wordList:
            wordList.append(beginWord)

        notVisited = set(wordList)
        word_size = len(beginWord)
        neighbors = defaultdict(list)

        for word in wordList:
            for i in range(word_size):
                key = word[:i] + "*" + word[i+1:]
                neighbors[key].append(word)

        reverse_neighbors = defaultdict(list)
        word_q = [beginWord]
        notVisited.remove(beginWord)

        while word_q:
            visited_level = set()
            for word in word_q:
                for i in range(word_size):
                    key = word[:i] + "*" + word[i+1:]
                    for neighbor in neighbors[key]:
                        if neighbor in notVisited:
                            reverse_neighbors[neighbor].append(word)
                            visited_level.add(neighbor)

            word_q = list(visited_level)
            notVisited -= visited_level

            if reverse_neighbors[endWord]:
                break

        if not reverse_neighbors[endWord]:
            return []
    
        paths = [[endWord]]

        while True:
            new_paths = []
            for path in paths:
                last_node = path[-1]
                for reverse_neighbor in reverse_neighbors[last_node]:
                    new_paths.append(path + [reverse_neighbor])
            paths = new_paths
            if paths[0][-1] == beginWord:
                break
                
        result = []
        for path in paths:
            path.reverse()
            result.append(path)
            
        return result