3212. Count Submatrices With Equal Frequency of X and Y
Solved
Medium
Topics
Companies
Hint
Given a 2D character matrix grid, where grid[i][j] is either 'X', 'Y', or '.', return the number of 
submatrices
 that contains:

grid[0][0]
an equal frequency of 'X' and 'Y'.
at least one 'X'.
 

Example 1:

Input: grid = [["X","Y","."],["Y",".","."]]

Output: 3

Explanation:



Example 2:

Input: grid = [["X","X"],["X","Y"]]

Output: 0

Explanation:

No submatrix has an equal frequency of 'X' and 'Y'.

Example 3:

Input: grid = [[".","."],[".","."]]

Output: 0

Explanation:

No submatrix has at least one 'X'.

 

Constraints:

1 <= grid.length, grid[i].length <= 1000
grid[i][j] is either 'X', 'Y', or '.'.


Solution 1:

class Solution:
    def numberOfSubmatrices(self, grid: List[List[str]]) -> int:
        n, m = len(grid), len(grid[0])
        prefix = [[[0, 0] for _ in range(m + 1)] for _ in range(n + 1)]
        
        for i in range(1, n + 1):
            for j in range(1, m + 1):
                prefix[i][j][0] = prefix[i][j - 1][0] + prefix[i - 1][j][0] - \
                                prefix[i - 1][j - 1][0] + (1 if grid[i - 1][j - 1] == 'X' else 0)
                
                prefix[i][j][1] = prefix[i][j - 1][1] + prefix[i - 1][j][1] - \
                                prefix[i - 1][j - 1][1] + (1 if grid[i - 1][j - 1] == 'Y' else 0)
                  
        result = 0
        for i in range(1, n + 1):
            for j in range(1, m + 1):
                if prefix[i][j][0] > 0 and prefix[i][j][0] == prefix[i][j][1]:
                    result += 1
                    
        return result


Solution 2:

class Solution:
    def numberOfSubmatrices(self, grid: List[List[str]]) -> int:
        n, m = len(grid), len(grid[0])

        prefixX = [[0] * (m + 1) for _ in range(n + 1)]
        prefixY = [[0] * (m + 1) for _ in range(n + 1)]

        for i in range(1, n + 1):
            for j in range(1, m + 1):
                prefixX[i][j] = prefixX[i - 1][j] + prefixX[i][j - 1] - \
                                prefixX[i - 1][j - 1] + (1 if grid[i - 1][j - 1] == 'X' else 0)
                prefixY[i][j] = prefixY[i - 1][j] + prefixY[i][j - 1] - \
                                prefixY[i - 1][j - 1] + (1 if grid[i - 1][j - 1] == 'Y' else 0)

        result = 0
        for i in range(1, n + 1):
            for j in range(1, m + 1):
                if prefixX[i][j] > 0 and prefixX[i][j] == prefixY[i][j]:
                    result += 1

        return result