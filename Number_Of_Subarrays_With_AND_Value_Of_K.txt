3209. Number of Subarrays With AND Value of K
Solved
Hard
Companies
Hint
Given an array of integers nums and an integer k, return the number of 
subarrays
 of nums where the bitwise AND of the elements of the subarray equals k.

 

Example 1:

Input: nums = [1,1,1], k = 1

Output: 6

Explanation:

All subarrays contain only 1's.

Example 2:

Input: nums = [1,1,2], k = 1

Output: 3

Explanation:

Subarrays having an AND value of 1 are: [1,1,2], [1,1,2], [1,1,2].

Example 3:

Input: nums = [1,2,3], k = 2

Output: 2

Explanation:

Subarrays having an AND value of 2 are: [1,2,3], [1,2,3].

 

Constraints:

1 <= nums.length <= 105
0 <= nums[i], k <= 109


Solution 1:

class Solution:
    def countSubarrays(self, nums: List[int], k: int) -> int:
        prev_count = defaultdict(int)
        result = 0

        for num in nums:
            new_count = defaultdict(int)
            for prev_and, cnt in prev_count.items():
                new_count[prev_and & num] += cnt
            new_count[num] += 1

            result += new_count[k]
                
            prev_count = new_count
            
        return result


Solution 2:

class Solution:
    def countSubarrays(self, nums: List[int], k: int) -> int:
        n = len(nums)

        @cache
        def solve(i, curr):
            if i == n:
                if curr == k:
                    return 1
                return 0
            ans = solve(i + 1, curr & nums[i])
            if curr == k:
                ans += 1
            return ans
                
        result = 0
        for i in range(n):
            result += solve(i, -1)

        return result


Solution 3:

class Solution:
    def countSubarrays(self, nums: List[int], k: int) -> int:

        def atLeastK(nums, k):
            n = len(nums)
            count = 0
            bits = [0] * 32
            l = 0
            
            for r in range(n):
                for i in range(32):
                    if nums[r] & (1 << i):
                        bits[i] += 1
                
                while l <= r and andValue(bits, r - l + 1) < k:
                    for i in range(32):
                        if nums[l] & (1 << i):
                            bits[i] -= 1
                    l += 1
                
                count += (r - l + 1)
            
            return count
        
        def andValue(bits, one_count):
            curr_val = 0
            for i in range(32):
                if bits[i] == one_count:
                    curr_val += (1 << i)
            return curr_val
        
        return atLeastK(nums, k) - atLeastK(nums, k + 1)
        