1031. Maximum Sum of Two Non-Overlapping Subarrays
Solved
Medium
Topics
Companies
Hint
Given an integer array nums and two integers firstLen and secondLen, return the maximum sum of elements in two non-overlapping subarrays with lengths firstLen and secondLen.

The array with length firstLen could occur before or after the array with length secondLen, but they have to be non-overlapping.

A subarray is a contiguous part of an array.

 

Example 1:

Input: nums = [0,6,5,2,2,5,1,9,4], firstLen = 1, secondLen = 2
Output: 20
Explanation: One choice of subarrays is [9] with length 1, and [6,5] with length 2.
Example 2:

Input: nums = [3,8,1,3,2,1,8,9,0], firstLen = 3, secondLen = 2
Output: 29
Explanation: One choice of subarrays is [3,8,1] with length 3, and [8,9] with length 2.
Example 3:

Input: nums = [2,1,5,6,0,9,5,0,3,8], firstLen = 4, secondLen = 3
Output: 31
Explanation: One choice of subarrays is [5,6,0,9] with length 4, and [0,3,8] with length 3.
 

Constraints:

1 <= firstLen, secondLen <= 1000
2 <= firstLen + secondLen <= 1000
firstLen + secondLen <= nums.length <= 1000
0 <= nums[i] <= 1000


Solution 1:

class Solution:
    def maxSumTwoNoOverlap(self, nums: List[int], firstLen: int, secondLen: int) -> int:
        n = len(nums)
        prefix = [0] * (n + 1)
        maxSum = float('-inf')

        for i in range(n):
            prefix[i + 1] = prefix[i] + nums[i]

        for i in range(firstLen, n + 1):
            s1 = prefix[i] - prefix[i - firstLen]
            j = i - firstLen

            while j - secondLen >= 0:
                s2 = prefix[j] - prefix[j - secondLen]
                maxSum = max(maxSum, s1 + s2)
                j -= 1

            j = i
            while j + secondLen <= n:
                s2 = prefix[j + secondLen] - prefix[j]
                maxSum = max(maxSum, s1 + s2)
                j += 1

        return maxSum


Solution 2:

class Solution:
    def maxSumTwoNoOverlap(self, nums: List[int], firstLen: int, secondLen: int) -> int:
        n = len(nums)
        prefix = [0] * (n + 1)

        for i in range(n):
            prefix[i + 1] = prefix[i] + nums[i]

        max_sum = float('-inf')
        max_first, max_second = prefix[firstLen], prefix[secondLen]
        
        for i in range(firstLen + secondLen, n + 1):
            max_first = max(max_first, prefix[i - secondLen] - prefix[i - firstLen - secondLen])
            max_sum = max(max_sum, max_first + prefix[i] - prefix[i - secondLen])

        for i in range(firstLen + secondLen, n + 1):
            max_second = max(max_second, prefix[i - firstLen] - prefix[i - firstLen - secondLen])
            max_sum = max(max_sum, max_second + prefix[i] - prefix[i - firstLen])

        return max_sum