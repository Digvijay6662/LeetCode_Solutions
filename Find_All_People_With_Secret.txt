2092. Find All People With Secret
Solved
Hard
Topics
Companies
Hint
You are given an integer n indicating there are n people numbered from 0 to n - 1. You are also given a 0-indexed 2D integer array meetings where meetings[i] = [xi, yi, timei] indicates that person xi and person yi have a meeting at timei. A person may attend multiple meetings at the same time. Finally, you are given an integer firstPerson.

Person 0 has a secret and initially shares the secret with a person firstPerson at time 0. This secret is then shared every time a meeting takes place with a person that has the secret. More formally, for every meeting, if a person xi has the secret at timei, then they will share the secret with person yi, and vice versa.

The secrets are shared instantaneously. That is, a person may receive the secret and share it with people in other meetings within the same time frame.

Return a list of all the people that have the secret after all the meetings have taken place. You may return the answer in any order.

 

Example 1:

Input: n = 6, meetings = [[1,2,5],[2,3,8],[1,5,10]], firstPerson = 1
Output: [0,1,2,3,5]
Explanation:
At time 0, person 0 shares the secret with person 1.
At time 5, person 1 shares the secret with person 2.
At time 8, person 2 shares the secret with person 3.
At time 10, person 1 shares the secret with person 5.​​​​
Thus, people 0, 1, 2, 3, and 5 know the secret after all the meetings.
Example 2:

Input: n = 4, meetings = [[3,1,3],[1,2,2],[0,3,3]], firstPerson = 3
Output: [0,1,3]
Explanation:
At time 0, person 0 shares the secret with person 3.
At time 2, neither person 1 nor person 2 know the secret.
At time 3, person 3 shares the secret with person 0 and person 1.
Thus, people 0, 1, and 3 know the secret after all the meetings.
Example 3:

Input: n = 5, meetings = [[3,4,2],[1,2,1],[2,3,1]], firstPerson = 1
Output: [0,1,2,3,4]
Explanation:
At time 0, person 0 shares the secret with person 1.
At time 1, person 1 shares the secret with person 2, and person 2 shares the secret with person 3.
Note that person 2 can share the secret at the same time as receiving it.
At time 2, person 3 shares the secret with person 4.
Thus, people 0, 1, 2, 3, and 4 know the secret after all the meetings.
 

Constraints:

2 <= n <= 105
1 <= meetings.length <= 105
meetings[i].length == 3
0 <= xi, yi <= n - 1
xi != yi
1 <= timei <= 105
1 <= firstPerson <= n - 1


Solution 1:

class Solution:
    def findAllPeople(self, n: int, meetings: List[List[int]], firstPerson: int) -> List[int]:
        timeMeetings = defaultdict(list)

        for p1, p2, time in meetings:
            timeMeetings[time].append((p1, p2))

        knowsSecret = [False] * n
        knowsSecret[0] = True
        knowsSecret[firstPerson] = True

        for t, meets in sorted(timeMeetings.items()):
            graph = defaultdict(list)
            q = deque()
            visited = set()

            for p1, p2 in meets:
                graph[p1].append(p2)
                graph[p2].append(p1)

                if knowsSecret[p1] and p1 not in visited:
                    q.append(p1)
                    visited.add(p1)
                if knowsSecret[p2] and p2 not in visited:
                    q.append(p2)
                    visited.add(p2)

            while q:
                person = q.popleft()
                for nextPerson in graph[person]:
                    if not knowsSecret[nextPerson]:
                        knowsSecret[nextPerson] = True
                        q.append(nextPerson)

        result = [i for i in range(n) if knowsSecret[i]]
        return result


Solution 2:

class Solution:
    def findAllPeople(self, n: int, meetings: List[List[int]], firstPerson: int) -> List[int]:
        size = len(meetings)
        meetings.sort(key = lambda x:x[2])

        knowsSecret = [False] * n
        knowsSecret[0] = True
        knowsSecret[firstPerson] = True

        i = 0
        while i < size:
            t = meetings[i][2]
            graph = defaultdict(list)
            q = deque()
            visited = set()

            while i < size and meetings[i][2] == t:
                p1, p2, t = meetings[i]
            
                graph[p1].append(p2)
                graph[p2].append(p1)

                if knowsSecret[p1] and p1 not in visited:
                    q.append(p1)
                    visited.add(p1)
                if knowsSecret[p2] and p2 not in visited:
                    q.append(p2)
                    visited.add(p2)
                i += 1

            while q:
                person = q.popleft()
                for nextPerson in graph[person]:
                    if not knowsSecret[nextPerson]:
                        knowsSecret[nextPerson] = True
                        q.append(nextPerson)

        result = [i for i in range(n) if knowsSecret[i]]
        return result


Solution 3:

class Solution:
    def findAllPeople(self, n: int, meetings: List[List[int]], firstPerson: int) -> List[int]:
        size = len(meetings)
        graph = defaultdict(list)

        for p1, p2, t in meetings:
            graph[p1].append([p2, t])
            graph[p2].append([p1, t])

        q = deque()
        q.append([0, 0])
        q.append([firstPerson, 0])
        minTime = [float('inf')] * n
        minTime[0] = minTime[firstPerson] = 0
        
        while q:
            person, time = q.popleft()
            for nextPerson, nextTime in graph[person]:
                if time <= nextTime and minTime[nextPerson] > nextTime:
                    minTime[nextPerson] = nextTime
                    q.append([nextPerson, nextTime])

        result = [i for i in range(n) if minTime[i] != float('inf')]
        return result


Solution 4:

class Solution:
    def findAllPeople(self, n: int, meetings: List[List[int]], firstPerson: int) -> List[int]:
        graph = defaultdict(list)

        for p1, p2, t in meetings:
            graph[p1].append([p2, t])
            graph[p2].append([p1, t])

        minTime = [float('inf')] * n
        minTime[0] = minTime[firstPerson] = 0

        def dfs(person, time):
            for nextPerson, nextTime in graph[person]:
                if time <= nextTime and minTime[nextPerson] > nextTime:
                    minTime[nextPerson] = nextTime
                    dfs(nextPerson, nextTime)

        dfs(0, 0)
        dfs(firstPerson, 0)

        result = [i for i in range(n) if minTime[i] != float('inf')]
        return result


Solution 5:

class Solution:
    def findAllPeople(self, n: int, meetings: List[List[int]], firstPerson: int) -> List[int]:
        graph = defaultdict(list)

        for p1, p2, t in meetings:
            graph[p1].append([p2, t])
            graph[p2].append([p1, t])


        minHeap = [(0, 0), (0, firstPerson)]
        visited = [False] * n

        while minHeap:
            time, person = heapq.heappop(minHeap)
            if visited[person]:
                continue
            visited[person] = True
            for nextPerson, nextTime in graph[person]:
                if time <= nextTime and not visited[nextPerson]:
                    heapq.heappush(minHeap, (nextTime, nextPerson))

        result = [i for i in range(n) if visited[i]]
        return result


Solution 6:

class UnionFind:
    def __init__(self, n):
        self.parent = [i for i in range(n)]
        self.size = [1] * n

    def find(self, node):
        while node != self.parent[node]:
            self.parent[node] = self.parent[self.parent[node]]
            node = self.parent[node]
        return node

    def union(self, node1, node2):
        p1, p2 = self.find(node1), self.find(node2)
        if p1 == p2:
            return False

        if self.size[p1] > self.size[p2]:
            self.parent[p2] = p1
            self.size[p1] += self.size[p2]
        else:
            self.parent[p1] = p2
            self.size[p2] += self.size[p1]

        return True

    def reset(self, node):
        self.parent[node] = node
        self.size[node] = 1


class Solution:
    def findAllPeople(self, n: int, meetings: List[List[int]], firstPerson: int) -> List[int]:
        size = len(meetings)
        meetings.sort(key = lambda x:x[2])
        i = 0

        dsu = UnionFind(n)
        dsu.union(0, firstPerson)

        while i < size:
            t = meetings[i][2]
            currPeople = set()
            while i < size and meetings[i][2] == t:
                p1, p2, t = meetings[i]
                dsu.union(p1, p2)
                currPeople.add(p1)
                currPeople.add(p2)
                i += 1

            for p1 in currPeople:
                if dsu.find(p1) != dsu.find(0):
                    dsu.reset(p1)

        result = [i for i in range(n) if dsu.find(i) == dsu.find(0)]
        return result