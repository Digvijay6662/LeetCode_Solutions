3319. K-th Largest Perfect Subtree Size in Binary Tree
Solved
Medium
Topics
Companies
Hint
You are given the root of a binary tree and an integer k.

Return an integer denoting the size of the kth largest perfect binary 
subtree
, or -1 if it doesn't exist.

A perfect binary tree is a tree where all leaves are on the same level, and every parent has two children.

 

Example 1:

Input: root = [5,3,6,5,2,5,7,1,8,null,null,6,8], k = 2

Output: 3

Explanation:



The roots of the perfect binary subtrees are highlighted in black. Their sizes, in non-increasing order are [3, 3, 1, 1, 1, 1, 1, 1].
The 2nd largest size is 3.

Example 2:

Input: root = [1,2,3,4,5,6,7], k = 1

Output: 7

Explanation:



The sizes of the perfect binary subtrees in non-increasing order are [7, 3, 3, 1, 1, 1, 1]. The size of the largest perfect binary subtree is 7.

Example 3:

Input: root = [1,2,3,null,4], k = 3

Output: -1

Explanation:



The sizes of the perfect binary subtrees in non-increasing order are [1, 1]. There are fewer than 3 perfect binary subtrees.

 

Constraints:

The number of nodes in the tree is in the range [1, 2000].
1 <= Node.val <= 2000
1 <= k <= 1024


Solution 1:

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def kthLargestPerfectSubtree(self, root: Optional[TreeNode], k: int) -> int:
        if not root:
            return -1

        result = []

        def solve(node):
            if not node:
                return (0, True)

            left_height, is_left_perfect = solve(node.left)
            right_height, is_right_perfect = solve(node.right)

            if is_left_perfect and is_right_perfect and left_height == right_height:
                result.append(left_height + 1)
                return (left_height + 1, True)
            else:
                return (-1, False)

        solve(root)
        result.sort(reverse = True)
        return ((1 << result[k - 1]) - 1) if len(result) >= k else -1


Solution 2:

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def kthLargestPerfectSubtree(self, root: Optional[TreeNode], k: int) -> int:
        if not root:
            return -1

        minHeap = []

        def solve(node):
            if not node:
                return (0, True)

            left_height, is_left_perfect = solve(node.left)
            right_height, is_right_perfect = solve(node.right)

            if is_left_perfect and is_right_perfect and left_height == right_height:
                heapq.heappush(minHeap, left_height + 1)
                if len(minHeap) > k:
                    heapq.heappop(minHeap)
                return (left_height + 1, True)
            else:
                return (-1, False)

        solve(root)
        return ((1 << minHeap[0]) - 1) if len(minHeap) == k else -1


Solution 3:

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def kthLargestPerfectSubtree(self, root: Optional[TreeNode], k: int) -> int:
        if not root:
            return -1

        minHeap = []

        def solve(node):
            if not node:
                return 0

            left_height = solve(node.left)
            right_height = solve(node.right)

            if left_height != -1 and right_height != -1 and left_height == right_height:
                heapq.heappush(minHeap, left_height + 1)
                if len(minHeap) > k:
                    heapq.heappop(minHeap)
                return left_height + 1
            else:
                return -1

        solve(root)
        return ((1 << minHeap[0]) - 1) if len(minHeap) == k else -1
