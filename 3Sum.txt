15. 3Sum
Medium
25.3K
2.3K
Companies
Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

 

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.
Example 2:

Input: nums = [0,1,1]
Output: []
Explanation: The only possible triplet does not sum up to 0.
Example 3:

Input: nums = [0,0,0]
Output: [[0,0,0]]
Explanation: The only possible triplet sums up to 0.
 

Constraints:

3 <= nums.length <= 3000
-105 <= nums[i] <= 105


Solution:

class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        res = []
        nums.sort()

        for l in range(len(nums)):
            if nums[l] > 0:
                break
            if (l > 0) and nums[l] == nums[l-1]:
                continue
            k = l + 1
            r = len(nums) - 1
            while k<r:
                current_sum = nums[l] + nums[k] + nums[r]
                if current_sum < 0:
                    k += 1
                elif current_sum > 0:
                    r -= 1
                else:
                    res.append([nums[l], nums[k], nums[r]])
                    k+=1
                    r-=1
                    while (k < r) and nums[k] == nums[k-1]:
                        k += 1
                    while (k < r) and nums[r] == nums[r+1]:
                        r -= 1

        return res
            