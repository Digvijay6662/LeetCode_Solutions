2781. Length of the Longest Valid Substring
Hard
256
3
Companies
You are given a string word and an array of strings forbidden.

A string is called valid if none of its substrings are present in forbidden.

Return the length of the longest valid substring of the string word.

A substring is a contiguous sequence of characters in a string, possibly empty.

 

Example 1:

Input: word = "cbaaaabc", forbidden = ["aaa","cb"]
Output: 4
Explanation: There are 9 valid substrings in word: "c", "b", "a", "ba", "aa", "bc", "baa", "aab", and "aabc". The length of the longest valid substring is 4. 
It can be shown that all other substrings contain either "aaa" or "cb" as a substring. 
Example 2:

Input: word = "leetcode", forbidden = ["de","le","e"]
Output: 4
Explanation: There are 11 valid substrings in word: "l", "t", "c", "o", "d", "tc", "co", "od", "tco", "cod", and "tcod". The length of the longest valid substring is 4.
It can be shown that all other substrings contain either "de", "le", or "e" as a substring. 
 

Constraints:

1 <= word.length <= 105
word consists only of lowercase English letters.
1 <= forbidden.length <= 105
1 <= forbidden[i].length <= 10
forbidden[i] consists only of lowercase English letters.

Solution 1:

class Solution:
    def longestValidSubstring(self, word: str, forbidden: List[str]) -> int:
        setF = set(forbidden)
        n = len(word)
        end = n
        res = 0

        for i in range(n - 1, -1, -1):
            for j in range(i, min(i + 10, end)):
                if word[i:j + 1] in setF:
                    end = j
                    break

            res = max(res, end - i)

        return res

Solution 2:

class TrieNode:
    def __init__(self):
        self.children = {}
        self.end = False

class Trie:
    def __init__(self):
        self.root = TrieNode()

    def insert(self, word: str) -> None:
        node = self.root
        for ch in word:
            if ch not in node.children:
                node.children[ch] = TrieNode()
            node = node.children[ch]
        node.end = True

    def search(self, word: str) -> bool:
        node = self.root
        for ch in word:
            if ch not in node.children:
                return False
            node = node.children[ch]
        return node.end

class Solution:
    def longestValidSubstring(self, word: str, forbidden: List[str]) -> int:
        n = len(word)
        trie = Trie()
        for f in forbidden:
            trie.insert(f)

        last = n
        res = 0
        for i in range(n - 1, -1, -1):
            for j in range(i, min(i+10, last)):
                if trie.search(word[i : j + 1]):
                    last = j
                    break
            res = max(res, last - i)

        return res