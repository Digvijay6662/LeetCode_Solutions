459. Repeated Substring Pattern
Easy
5.4K
448
Companies
Given a string s, check if it can be constructed by taking a substring of it and appending multiple copies of the substring together.

 

Example 1:

Input: s = "abab"
Output: true
Explanation: It is the substring "ab" twice.
Example 2:

Input: s = "aba"
Output: false
Example 3:

Input: s = "abcabcabcabc"
Output: true
Explanation: It is the substring "abc" four times or the substring "abcabc" twice.
 

Constraints:

1 <= s.length <= 104
s consists of lowercase English letters.


Solution 1:

class Solution:
    def repeatedSubstringPattern(self, s: str) -> bool:
        n = len(s)

        for i in range(1, n // 2 + 1):
            if n % i == 0:
                if s == s[:i] * (n // i):
                    return True
        return False


Solution 2:

class Solution:
    def repeatedSubstringPattern(self, s: str) -> bool:
        n = len(s)
        newString = s + s
        newString = newString[1:-1]
        
        return s in newString
