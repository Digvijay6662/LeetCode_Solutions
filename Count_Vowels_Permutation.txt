1220. Count Vowels Permutation
Solved
Hard
Topics
Companies
Hint
Given an integer n, your task is to count how many strings of length n can be formed under the following rules:

Each character is a lower case vowel ('a', 'e', 'i', 'o', 'u')
Each vowel 'a' may only be followed by an 'e'.
Each vowel 'e' may only be followed by an 'a' or an 'i'.
Each vowel 'i' may not be followed by another 'i'.
Each vowel 'o' may only be followed by an 'i' or a 'u'.
Each vowel 'u' may only be followed by an 'a'.
Since the answer may be too large, return it modulo 10^9 + 7.

 

Example 1:

Input: n = 1
Output: 5
Explanation: All possible strings are: "a", "e", "i" , "o" and "u".
Example 2:

Input: n = 2
Output: 10
Explanation: All possible strings are: "ae", "ea", "ei", "ia", "ie", "io", "iu", "oi", "ou" and "ua".
Example 3: 

Input: n = 5
Output: 68
 

Constraints:

1 <= n <= 2 * 10^4


Solution 1:

class Solution:
    def countVowelPermutation(self, n: int) -> int:
        mod = 1000000007
        vMap = {'a' : 0, 'e' : 1, 'i': 2, 'o' : 3, 'u': 4}

        dp = [[-1] * 5 for _ in range(n)]
        def solve(length, prev):
            if length == n:
                return 1

            if dp[length][vMap[prev]] != -1:
                return dp[length][vMap[prev]]
            ans = 0
            if prev == 'a':
                ans += solve(length + 1, 'e')
            elif prev == 'e':
                ans += solve(length + 1, 'a') + solve(length + 1, 'i')
            elif prev == 'o':
                ans += solve(length + 1, 'i') + solve(length + 1, 'u')
            elif prev == 'u':
                ans += solve(length + 1, 'a')
            elif prev == 'i':
                ans += solve(length + 1, 'a') + solve(length + 1, 'u') + solve(length + 1, 'o') + solve(length + 1, 'e')

            dp[length][vMap[prev]] = ans % mod
            return ans % mod

        res = 0
        for v in vMap.keys():
            res = (res + solve(1, v)) % mod

        return res


Solution 2:

class Solution:
    def countVowelPermutation(self, n: int) -> int:
        mod = 1000000007
        vMap = {'a': 0, 'e': 1, 'i': 2, 'o': 3, 'u': 4}

        dp = [[0] * 5 for _ in range(n + 1)]

        for i in range(5):
            dp[n][i] = 1

        for length in range(n - 1, 0, -1):
            for v in vMap.keys():
                if v == 'a':
                    dp[length][vMap[v]] += dp[length + 1][vMap['e']]
                elif v == 'e':
                    dp[length][vMap[v]] += dp[length + 1][vMap['a']] + dp[length + 1][vMap['i']]
                elif v == 'o':
                    dp[length][vMap[v]] += dp[length + 1][vMap['i']] + dp[length + 1][vMap['u']]
                elif v == 'u':
                    dp[length][vMap[v]] += dp[length + 1][vMap['a']]
                elif v == 'i':
                    dp[length][vMap[v]] += (
                        dp[length + 1][vMap['a']] +
                        dp[length + 1][vMap['u']] +
                        dp[length + 1][vMap['o']] +
                        dp[length + 1][vMap['e']]
                    )

        return sum(dp[1]) % mod


Solution 3:

class Solution:
    def countVowelPermutation(self, n: int) -> int:
        mod = 1000000007
        vMap = {'a': 0, 'e': 1, 'i': 2, 'o': 3, 'u': 4}

        prev = [1] * 5

        for length in range(n - 1, 0, -1):
            curr = [0] * 5
            for v in vMap.keys():
                if v == 'a':
                    curr[vMap[v]] += prev[vMap['e']]
                elif v == 'e':
                    curr[vMap[v]] += prev[vMap['a']] + prev[vMap['i']]
                elif v == 'o':
                    curr[vMap[v]] += prev[vMap['i']] + prev[vMap['u']]
                elif v == 'u':
                    curr[vMap[v]] += prev[vMap['a']]
                elif v == 'i':
                    curr[vMap[v]] += (
                        prev[vMap['a']] +
                        prev[vMap['u']] +
                        prev[vMap['o']] +
                        prev[vMap['e']]
                    )

            prev = curr

        return sum(prev) % mod


Solution 4:

class Solution:
    def countVowelPermutation(self, n: int) -> int:
        mod = 1000000007
        prev = [1] * 5

        for length in range(2, n + 1):
            curr = [0] * 5
            curr[0] = prev[1]  # 'a' can be followed by 'e'
            curr[1] = (prev[0] + prev[2]) % mod  # 'e' can be followed by 'a' or 'i'
            curr[2] = (
                prev[0] + prev[1] + prev[3] + prev[4]
            ) % mod  # 'i' has restrictions
            curr[3] = (prev[2] + prev[4]) % mod  # 'o' can be followed by 'i' or 'u'
            curr[4] = prev[0]  # 'u' can be followed by 'a'

            prev = curr

        return sum(prev) % mod