Facebook
31
Microsoft
4
Amazon
3
129. Sum Root to Leaf Numbers
Medium
7K
107
Companies
You are given the root of a binary tree containing digits from 0 to 9 only.

Each root-to-leaf path in the tree represents a number.

For example, the root-to-leaf path 1 -> 2 -> 3 represents the number 123.
Return the total sum of all root-to-leaf numbers. Test cases are generated so that the answer will fit in a 32-bit integer.

A leaf node is a node with no children.

 

Example 1:


Input: root = [1,2,3]
Output: 25
Explanation:
The root-to-leaf path 1->2 represents the number 12.
The root-to-leaf path 1->3 represents the number 13.
Therefore, sum = 12 + 13 = 25.
Example 2:


Input: root = [4,9,0,5,1]
Output: 1026
Explanation:
The root-to-leaf path 4->9->5 represents the number 495.
The root-to-leaf path 4->9->1 represents the number 491.
The root-to-leaf path 4->0 represents the number 40.
Therefore, sum = 495 + 491 + 40 = 1026.
 

Constraints:

The number of nodes in the tree is in the range [1, 1000].
0 <= Node.val <= 9
The depth of the tree will not exceed 10.


Solution 1:

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def sumNumbers(self, root: Optional[TreeNode]) -> int:
        res = 0

        def dfs(node, val):
            nonlocal res
            if node.left is None and node.right is None:
                res += val
                return

            if node.left:
                dfs(node.left, val * 10 + node.left.val)
            if node.right:
                dfs(node.right, val * 10 + node.right.val)


        dfs(root, root.val)
        return res


Solution 2:

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def sumNumbers(self, root: Optional[TreeNode]) -> int:
        stack = [(root, root.val)]
        res = 0

        while stack:
            node, val = stack.pop()

            if node.left is None and node.right is None:
                res += val

            if node.left:
                stack.append((node.left, val * 10 + node.left.val))

            if node.right:
                stack.append((node.right, val * 10 + node.right.val))

        return res


Solution 3:

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def sumNumbers(self, root: Optional[TreeNode]) -> int:
        cur = root
        totalSum = 0
        currentSum = 0
        
        while cur:
            if cur.left is None:
                currentSum = currentSum * 10 + cur.val
                if cur.right is None:
                    totalSum += currentSum
                cur = cur.right
            else:
                prev = cur.left
                depth = 1
                while prev.right and prev.right != cur:
                    prev = prev.right
                    depth += 1

                if prev.right is None:
                    prev.right = cur
                    currentSum = currentSum * 10 + cur.val
                    cur = cur.left
                else:
                    prev.right = None
                    if prev.left is None:
                        totalSum += currentSum
                    currentSum = currentSum // 10 ** depth
                    cur = cur.right
        
        return totalSum