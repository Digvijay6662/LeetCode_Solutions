3292. Minimum Number of Valid Strings to Form Target II
Solved
Hard
Topics
Companies
Hint
You are given an array of strings words and a string target.

A string x is called valid if x is a 
prefix
 of any string in words.

Return the minimum number of valid strings that can be concatenated to form target. If it is not possible to form target, return -1.

 

Example 1:

Input: words = ["abc","aaaaa","bcdef"], target = "aabcdabc"

Output: 3

Explanation:

The target string can be formed by concatenating:

Prefix of length 2 of words[1], i.e. "aa".
Prefix of length 3 of words[2], i.e. "bcd".
Prefix of length 3 of words[0], i.e. "abc".
Example 2:

Input: words = ["abababab","ab"], target = "ababaababa"

Output: 2

Explanation:

The target string can be formed by concatenating:

Prefix of length 5 of words[0], i.e. "ababa".
Prefix of length 5 of words[0], i.e. "ababa".
Example 3:

Input: words = ["abcdef"], target = "xyz"

Output: -1

 

Constraints:

1 <= words.length <= 100
1 <= words[i].length <= 5 * 104
The input is generated such that sum(words[i].length) <= 105.
words[i] consists only of lowercase English letters.
1 <= target.length <= 5 * 104
target consists only of lowercase English letters.


Solution 1:

class Solution:
    def minValidStrings(self, words: List[str], target: str) -> int:

        def KMP(word, pattern):
            string = word + "#" + pattern
            n = len(string)
            lps = [0] * n
            i, p = 1, 0

            while i < n:
                if string[i] == string[p]:
                    p += 1
                    lps[i] = p
                    i += 1
                elif p == 0:
                    lps[i] = 0
                    i += 1
                else:
                    p = lps[p - 1]

            return lps[len(word) + 1:]

        prefix_suffix_match = []
        for word in words:
            prefix_suffix_match.append(KMP(word, target))

        n = len(target)
        result = 0

        while n > 0:
            found = 0

            for i in range(len(words)):
                found = max(found, prefix_suffix_match[i][n - 1])

            if found == 0:
                return -1

            result += 1
            n -= found

        return result


Solution 2:

class Solution:
    def minValidStrings(self, words: List[str], target: str) -> int:

        def zAlgorithm(string):
            n = len(string)
            z = [0] * n
            l = r = 0

            for i in range(1, n):
                if i > r:
                    l = r = i
                    while r < n and string[r] == string[r - l]:
                        r += 1
                    z[i] = r - l
                    r -= 1
                else:
                    idx = i - l
                    if i + z[idx] <= r:
                        z[i] = z[idx]
                    else:
                        l = i
                        while r < n and string[r] == string[r - l]:
                            r += 1
                        z[i] = r - l
                        r -= 1

            return z

        n = len(target)
        longest = [0] * n

        for word in words:
            z = zAlgorithm(word + "#" + target)[len(word) + 1:]
            for i in range(n):
                longest[i] = max(longest[i], z[i])

        result = 0
        farthest = 0
        next_farthest = 0

        for i in range(n):
            x = longest[i] + i
            next_farthest = max(x, next_farthest)

            if i >= farthest:
                farthest = next_farthest
                result += 1
            
            if i >= farthest:
                return -1
                
        return result