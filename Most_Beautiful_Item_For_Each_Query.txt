2070. Most Beautiful Item for Each Query
Solved
Medium
Topics
Companies
Hint
You are given a 2D integer array items where items[i] = [pricei, beautyi] denotes the price and beauty of an item respectively.

You are also given a 0-indexed integer array queries. For each queries[j], you want to determine the maximum beauty of an item whose price is less than or equal to queries[j]. If no such item exists, then the answer to this query is 0.

Return an array answer of the same length as queries where answer[j] is the answer to the jth query.

 

Example 1:

Input: items = [[1,2],[3,2],[2,4],[5,6],[3,5]], queries = [1,2,3,4,5,6]
Output: [2,4,5,5,6,6]
Explanation:
- For queries[0]=1, [1,2] is the only item which has price <= 1. Hence, the answer for this query is 2.
- For queries[1]=2, the items which can be considered are [1,2] and [2,4]. 
  The maximum beauty among them is 4.
- For queries[2]=3 and queries[3]=4, the items which can be considered are [1,2], [3,2], [2,4], and [3,5].
  The maximum beauty among them is 5.
- For queries[4]=5 and queries[5]=6, all items can be considered.
  Hence, the answer for them is the maximum beauty of all items, i.e., 6.
Example 2:

Input: items = [[1,2],[1,2],[1,3],[1,4]], queries = [1]
Output: [4]
Explanation: 
The price of every item is equal to 1, so we choose the item with the maximum beauty 4. 
Note that multiple items can have the same price and/or beauty.  
Example 3:

Input: items = [[10,1000]], queries = [5]
Output: [0]
Explanation:
No item has a price less than or equal to 5, so no item can be chosen.
Hence, the answer to the query is 0.
 

Constraints:

1 <= items.length, queries.length <= 105
items[i].length == 2
1 <= pricei, beautyi, queries[j] <= 109


Solution 1:

class Solution:
    def maximumBeauty(self, items: List[List[int]], queries: List[int]) -> List[int]:
        items.sort()
        
        max_beauty = []
        prev_max = 0
        for price, beauty in items:
            prev_max = max(prev_max, beauty)
            max_beauty.append((price, prev_max))
        
        queries_with_idx = sorted((q, i) for i, q in enumerate(queries))
        result = [0] * len(queries)
        
        for q, idx in queries_with_idx:
            pos = bisect_right(max_beauty, (q, float('inf'))) - 1
            if pos >= 0:
                result[idx] = max_beauty[pos][1]

        return result


Solution 2:

class Solution:
    def maximumBeauty(self, items: List[List[int]], queries: List[int]) -> List[int]:
        
        def binary_search(arr, target):
            left, right = 0, len(arr) - 1
            while left <= right:
                mid = left + (right - left) // 2
                if arr[mid][0] <= target:
                    left = mid + 1
                else:
                    right = mid - 1
            return right

        items.sort()
        max_beauty = []
        max_b = 0
        
        for price, beauty in items:
            max_b = max(max_b, beauty)
            max_beauty.append((price, max_b))

        result = []
        for q in queries:
            pos = binary_search(max_beauty, q)
            if pos == -1:
                result.append(0)
            else:
                result.append(max_beauty[pos][1])

        return result

Solution 3:

class Solution:
    def maximumBeauty(self, items: List[List[int]], queries: List[int]) -> List[int]:
        n = len(items)
        queries = [(q, i) for i, q in enumerate(queries)]
        items.sort()
        queries.sort()

        result = [0] * len(queries)
        price = i = 0

        for q, idx in queries:
            while i < n and items[i][0] <= q:
                price = max(price, items[i][1])
                i += 1

            result[idx] = price

        return result
