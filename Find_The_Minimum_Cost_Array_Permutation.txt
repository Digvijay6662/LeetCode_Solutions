3149. Find the Minimum Cost Array Permutation
Solved
Hard
Topics
Companies
Hint
You are given an array nums which is a 
permutation
 of [0, 1, 2, ..., n - 1]. The score of any permutation of [0, 1, 2, ..., n - 1] named perm is defined as:

score(perm) = |perm[0] - nums[perm[1]]| + |perm[1] - nums[perm[2]]| + ... + |perm[n - 1] - nums[perm[0]]|

Return the permutation perm which has the minimum possible score. If multiple permutations exist with this score, return the one that is 
lexicographically smallest
 among them.

 

Example 1:

Input: nums = [1,0,2]

Output: [0,1,2]

Explanation:



The lexicographically smallest permutation with minimum cost is [0,1,2]. The cost of this permutation is |0 - 0| + |1 - 2| + |2 - 1| = 2.

Example 2:

Input: nums = [0,2,1]

Output: [0,2,1]

Explanation:



The lexicographically smallest permutation with minimum cost is [0,2,1]. The cost of this permutation is |0 - 1| + |2 - 2| + |1 - 0| = 2.

 

Constraints:

2 <= n == nums.length <= 14
nums is a permutation of [0, 1, 2, ..., n - 1].


Solution 1:

class Solution:
    def findPermutation(self, nums: List[int]) -> List[int]:
        n = len(nums)
        all_set = (1 << n) - 1

        @cache
        def solve(mask, last):
            if mask == all_set:
                return abs(last - nums[0]), [last]

            min_score = float("inf")
            best_perm = []

            for i in range(1, n):
                if (1 << i) & mask == 0:
                    curr_score, curr_perm = solve(mask | (1 << i), i)
                    curr_score += abs(last - nums[i])
                    if curr_score < min_score:
                        best_perm = curr_perm
                        min_score = curr_score

            return min_score, [last] + best_perm

        return solve(1, 0)[1]