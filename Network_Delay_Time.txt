743. Network Delay Time
Medium
6.6K
337
Companies
You are given a network of n nodes, labeled from 1 to n. You are also given times, a list of travel times as directed edges times[i] = (ui, vi, wi), where ui is the source node, vi is the target node, and wi is the time it takes for a signal to travel from source to target.

We will send a signal from a given node k. Return the minimum time it takes for all the n nodes to receive the signal. If it is impossible for all the n nodes to receive the signal, return -1.

 

Example 1:


Input: times = [[2,1,1],[2,3,1],[3,4,1]], n = 4, k = 2
Output: 2
Example 2:

Input: times = [[1,2,1]], n = 2, k = 1
Output: 1
Example 3:

Input: times = [[1,2,1]], n = 2, k = 2
Output: -1
 

Constraints:

1 <= k <= n <= 100
1 <= times.length <= 6000
times[i].length == 3
1 <= ui, vi <= n
ui != vi
0 <= wi <= 100
All the pairs (ui, vi) are unique. (i.e., no multiple edges.)


Solution 1:

class Solution:
    def networkDelayTime(self, times: List[List[int]], n: int, k: int) -> int:
        adj = defaultdict(list)
        visited = set()

        for src, dest, t in times:
            adj[src].append((t, dest))

        minHeap = [(0, k)]
        res = 0

        while minHeap:
            t, node = heapq.heappop(minHeap)
            if node in visited:
                continue

            res = t
            visited.add(node)

            for w, nei in adj[node]:
                if nei not in visited:
                    heapq.heappush(minHeap, (w + t, nei))

        return res if len(visited) == n else -1


Solution 2:

class Solution:
    def networkDelayTime(self, times: List[List[int]], n: int, k: int) -> int:
        distance = [float("inf") for _ in range(n)]
        distance[k-1] = 0

        for _ in range(n-1):
            updated = False

            for u, v, w in times:
                if distance[u-1] + w < distance[v-1]:
                    distance[v-1] = distance[u-1] + w
                    updated = True

            if not updated:
                break

        return max(distance) if max(distance) != float("inf") else -1

