1424. Diagonal Traverse II
Solved
Medium
Topics
Companies
Hint
Given a 2D integer array nums, return all elements of nums in diagonal order as shown in the below images.

 

Example 1:


Input: nums = [[1,2,3],[4,5,6],[7,8,9]]
Output: [1,4,2,7,5,3,8,6,9]
Example 2:


Input: nums = [[1,2,3,4,5],[6,7],[8],[9,10,11],[12,13,14,15,16]]
Output: [1,6,2,8,7,3,9,4,12,10,5,13,11,14,15,16]
 

Constraints:

1 <= nums.length <= 105
1 <= nums[i].length <= 105
1 <= sum(nums[i].length) <= 105
1 <= nums[i][j] <= 105


Solution 1:

class Solution:
    def findDiagonalOrder(self, nums: List[List[int]]) -> List[int]:
        rows = len(nums)
        hashMap = defaultdict(list)

        for i in range(rows):
            cols = len(nums[i])
            for j in range(cols):
                hashMap[i + j].append(nums[i][j])
        
        res = []

        for key, val in hashMap.items():
            res.extend(reversed(val))

        return res


Solution 2:

class Solution:
    def findDiagonalOrder(self, nums: List[List[int]]) -> List[int]:
        rows = len(nums)
        queue = deque([(0, 0)])
        res = []
        
        while queue:
            r, c = queue.popleft()
            res.append(nums[r][c])
            
            if c == 0 and r + 1 < rows:
                queue.append((r + 1, c))
                
            if c + 1 < len(nums[r]):
                queue.append((r, c + 1))
        
        return res


Solution 3:

class Solution:
    def findDiagonalOrder(self, nums: List[List[int]]) -> List[int]:
        rows = len(nums)
        hashMap = defaultdict(list)

        for i in range(rows - 1, -1, -1):
            cols = len(nums[i])
            for j in range(cols):
                hashMap[i + j].append(nums[i][j])
        
        res = []
        curr = 0

        while curr in hashMap:
            res.extend(hashMap[curr])
            curr += 1
            
        return res


