188. Best Time to Buy and Sell Stock IV
Hard
6.9K
201
Companies
You are given an integer array prices where prices[i] is the price of a given stock on the ith day, and an integer k.

Find the maximum profit you can achieve. You may complete at most k transactions: i.e. you may buy at most k times and sell at most k times.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

 

Example 1:

Input: k = 2, prices = [2,4,1]
Output: 2
Explanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.
Example 2:

Input: k = 2, prices = [3,2,6,5,0,3]
Output: 7
Explanation: Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.
 

Constraints:

1 <= k <= 100
1 <= prices.length <= 1000
0 <= prices[i] <= 1000


Solution 1:

class Solution:
    def maxProfit(self, k: int, prices: List[int]) -> int:
        n = len(prices)
        dp = [[[-1 for _ in range(k + 1)] for _ in range(2)] for _ in range(n)]
        
        def solve(i, buy, transactions):
            if i == n or transactions == k:
                return 0

            profit = 0
            if dp[i][buy][transactions] != -1:
                return dp[i][buy][transactions]
            if buy:
                profit = -prices[i] + solve(i + 1, not buy, transactions)
            else:
                profit = prices[i] + solve(i + 1, not buy, transactions + 1)

            notPick = solve(i + 1, buy, transactions)
            dp[i][buy][transactions] = max(profit, notPick)
            return max(profit, notPick)

        return solve(0, True, 0)
        


Solution 2:

class Solution:
    def maxProfit(self, k: int, prices: List[int]) -> int:
        n = len(prices)
        dp = [[[0 for _ in range(k + 1)] for _ in range(2)] for _ in range(n + 1)]

        for i in range(n - 1, -1, -1):
            for buy in range(2):
                for transactions in range(k - 1, -1, -1):
                    if buy:
                        profit = -prices[i] + dp[i + 1][not buy][transactions]
                    else:
                        profit = prices[i] + dp[i + 1][not buy][transactions + 1]

                    notPick = dp[i + 1][buy][transactions]
                    dp[i][buy][transactions] = max(profit, notPick)

        return dp[0][1][0]


Solution 3:

class Solution:
    def maxProfit(self, k: int, prices: List[int]) -> int:
        n = len(prices)
        after = [[0 for _ in range(k + 1)] for _ in range(2)]
        curr = [[0 for _ in range(k + 1)] for _ in range(2)]


        for i in range(n - 1, -1, -1):
            for buy in range(2):
                for transactions in range(k - 1, -1, -1):
                    if buy:
                        profit = -prices[i] + after[not buy][transactions]
                    else:
                        profit = prices[i] + after[not buy][transactions + 1]

                    notPick = after[buy][transactions]
                    curr[buy][transactions] = max(profit, notPick)
            after = curr

        return curr[1][0]



Solution 4:

class Solution:
    def maxProfit(self, k: int, prices: List[int]) -> int:
        n = len(prices)
        dp = [[0 for _ in range(k + 1)] for _ in range(2)]

        for i in range(n - 1, -1, -1):
            for buy in range(2):
                for transactions in range(k - 1, -1, -1):
                    if buy:
                        profit = -prices[i] + dp[not buy][transactions]
                    else:
                        profit = prices[i] + dp[not buy][transactions + 1]

                    notPick = dp[buy][transactions]
                    dp[buy][transactions] = max(profit, notPick)

        return dp[1][0]


Solution 5:

class Solution:
    def maxProfit(self, k: int, prices: List[int]) -> int:
        n = len(prices)
        dp = [[-1 for _ in range(2 * k)] for _ in range(n)]
        
        def solve(i, transactions):
            if i == n or transactions == 2 * k:
                return 0

            profit = 0
            if dp[i][transactions] != -1:
                return dp[i][transactions]
            if transactions % 2 == 0:
                profit = -prices[i] + solve(i + 1, transactions + 1)
            else:
                profit = prices[i] + solve(i + 1, transactions + 1)

            notPick = solve(i + 1, transactions)
            dp[i][transactions] = max(profit, notPick)
            return max(profit, notPick)

        return solve(0, 0)

Solution 6:

class Solution:
    def maxProfit(self, k: int, prices: List[int]) -> int:
        n = len(prices)
        dp = [0 for _ in range(2 * k  + 1)]

        for i in range(n - 1, -1, -1):
            for transactions in range(2 * k - 1, -1, -1):
                if transactions % 2 == 0:
                    dp[transactions] = max(-prices[i] + dp[transactions + 1], dp[transactions])
                else:
                    dp[transactions] = max(prices[i] + dp[transactions + 1], dp[transactions])

        return dp[0]


Solution 7:

class Solution:
    def maxProfit(self, k: int, prices: List[int]) -> int:
        if k == 0 or not prices:
            return 0

        if k >= len(prices) // 2:
            max_profit = 0
            for i in range(1, len(prices)):
                if prices[i] > prices[i - 1]:
                    max_profit += prices[i] - prices[i - 1]
            return max_profit

        cost = [float('inf')] * (k + 1)
        profit = [0] * (k + 1)

        for price in prices:
            for j in range(1, k + 1):
                cost[j] = min(cost[j], price - profit[j - 1])
                profit[j] = max(profit[j], price - cost[j])

        return profit[k]


Solution 8:

class Solution:
    def maxProfit(self, k: int, prices: List[int]) -> int:
        if k == 0 or not prices:
            return 0

        if k >= len(prices) // 2:
            max_profit = 0
            for i in range(1, len(prices)):
                if prices[i] > prices[i - 1]:
                    max_profit += prices[i] - prices[i - 1]
            return max_profit

        buy = [float('-inf')] * (k + 1)
        sell = [0] * (k + 1)

        for price in prices:
            for j in range(1, k + 1):
                buy[j] = max(buy[j], sell[j - 1] - price)
                sell[j] = max(sell[j], buy[j] + price)

        return sell[k]