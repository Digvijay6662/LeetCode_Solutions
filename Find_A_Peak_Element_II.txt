1901. Find a Peak Element II
Solved
Medium
Topics
Companies
Hint
A peak element in a 2D grid is an element that is strictly greater than all of its adjacent neighbors to the left, right, top, and bottom.

Given a 0-indexed m x n matrix mat where no two adjacent cells are equal, find any peak element mat[i][j] and return the length 2 array [i,j].

You may assume that the entire matrix is surrounded by an outer perimeter with the value -1 in each cell.

You must write an algorithm that runs in O(m log(n)) or O(n log(m)) time.

 

Example 1:



Input: mat = [[1,4],[3,2]]
Output: [0,1]
Explanation: Both 3 and 4 are peak elements so [1,0] and [0,1] are both acceptable answers.
Example 2:



Input: mat = [[10,20,15],[21,30,14],[7,16,32]]
Output: [1,1]
Explanation: Both 30 and 32 are peak elements so [1,1] and [2,2] are both acceptable answers.
 

Constraints:

m == mat.length
n == mat[i].length
1 <= m, n <= 500
1 <= mat[i][j] <= 105
No two adjacent cells are equal.


Solution 1:

class Solution:
    def findPeakGrid(self, mat: List[List[int]]) -> List[int]:

        def findMaxElement(col):
            max_idx = -1
            max_val = -1
            for i in range(rows):
                if mat[i][col] > max_val:
                    max_val = mat[i][col]
                    max_idx = i

            return max_idx, max_val

        rows, cols = len(mat), len(mat[0])
        left, right = 0, cols - 1

        while left <= right:
            mid = left + (right - left)//2

            max_idx, max_val = findMaxElement(mid)

            top_val = mat[max_idx - 1][mid] if max_idx > 0 else -1
            bottom_val = mat[max_idx + 1][mid] if max_idx < rows - 1 else -1
            right_val = mat[max_idx][mid + 1] if mid < cols - 1 else -1
            left_val = mat[max_idx][mid - 1] if mid > 0 else -1

            flag = True

            for val in [top_val, bottom_val, left_val, right_val]:
                if max_val < val:
                    flag = False
                    break

            if flag:
                return [max_idx, mid]

            if max_val < left_val:
                right = mid - 1
            else:
                left = mid + 1

        return [-1, -1]
