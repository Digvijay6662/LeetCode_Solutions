1081. Smallest Subsequence of Distinct Characters
Medium
2.4K
174
Companies
Given a string s, return the 
lexicographically smallest
 
subsequence
 of s that contains all the distinct characters of s exactly once.

 

Example 1:

Input: s = "bcabc"
Output: "abc"
Example 2:

Input: s = "cbacdcbc"
Output: "acdb"
 

Constraints:

1 <= s.length <= 1000
s consists of lowercase English letters.
 

Note: This question is the same as 316: https://leetcode.com/problems/remove-duplicate-letters/


Solution 1:

class Solution:
    def smallestSubsequence(self, s: str) -> str:
        n = len(s)
        indices = [0] * 26
        visited = set()

        for i in range(n):
            ch = ord(s[i]) - ord('a')
            indices[ch] = i
        
        stack = []
        for i in range(n):
            ch = s[i]
            if ch in visited:
                continue

            visited.add(ch)
            while stack and stack[-1] > ch and indices[ord(stack[-1]) - ord('a')] > i:
                visited.remove(stack[-1])
                stack.pop()

            stack.append(ch)

        return ''.join(stack)


