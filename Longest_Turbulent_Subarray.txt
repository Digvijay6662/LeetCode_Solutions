978. Longest Turbulent Subarray
Medium
Topics
Companies
Given an integer array arr, return the length of a maximum size turbulent subarray of arr.

A subarray is turbulent if the comparison sign flips between each adjacent pair of elements in the subarray.

More formally, a subarray [arr[i], arr[i + 1], ..., arr[j]] of arr is said to be turbulent if and only if:

For i <= k < j:
arr[k] > arr[k + 1] when k is odd, and
arr[k] < arr[k + 1] when k is even.
Or, for i <= k < j:
arr[k] > arr[k + 1] when k is even, and
arr[k] < arr[k + 1] when k is odd.
 

Example 1:

Input: arr = [9,4,2,10,7,8,8,1,9]
Output: 5
Explanation: arr[1] > arr[2] < arr[3] > arr[4] < arr[5]
Example 2:

Input: arr = [4,8,12,16]
Output: 2
Example 3:

Input: arr = [100]
Output: 1
 

Constraints:

1 <= arr.length <= 4 * 104
0 <= arr[i] <= 109


Solution 1:

class Solution:
    def maxTurbulenceSize(self, arr: List[int]) -> int:
        n = len(arr)
        result = length = 0

        for i in range(n):
            if i >= 2 and (arr[i - 2] > arr[i - 1] < arr[i]
                or arr[i - 2] < arr[i - 1] > arr[i]):
                length += 1
            elif i >= 1 and arr[i] != arr[i - 1]:
                length = 2
            else:
                length = 1
            
            result = max(result, length)

        return result


Solution 2:

class Solution:
    def maxTurbulenceSize(self, arr: List[int]) -> int:
        n = len(arr)
        increasing = decreasing = result = 1

        for i in range(1, n):
            if arr[i] < arr[i - 1]:
                decreasing = increasing + 1
                increasing = 1
            elif arr[i] > arr[i - 1]:
                increasing = decreasing + 1
                decreasing = 1
            else:
                increasing = decreasing = 1

            result = max(result, max(increasing, decreasing))

        return result

        