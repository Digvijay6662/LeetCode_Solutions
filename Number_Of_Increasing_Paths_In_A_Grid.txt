2328. Number of Increasing Paths in a Grid
Hard
1.4K
32
Companies
You are given an m x n integer matrix grid, where you can move from a cell to any adjacent cell in all 4 directions.

Return the number of strictly increasing paths in the grid such that you can start from any cell and end at any cell. Since the answer may be very large, return it modulo 109 + 7.

Two paths are considered different if they do not have exactly the same sequence of visited cells.

 

Example 1:


Input: grid = [[1,1],[3,4]]
Output: 8
Explanation: The strictly increasing paths are:
- Paths with length 1: [1], [1], [3], [4].
- Paths with length 2: [1 -> 3], [1 -> 4], [3 -> 4].
- Paths with length 3: [1 -> 3 -> 4].
The total number of paths is 4 + 3 + 1 = 8.
Example 2:

Input: grid = [[1],[2]]
Output: 3
Explanation: The strictly increasing paths are:
- Paths with length 1: [1], [2].
- Paths with length 2: [1 -> 2].
The total number of paths is 2 + 1 = 3.
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 1000
1 <= m * n <= 105
1 <= grid[i][j] <= 105


Solution 1:

class Solution:
    def countPaths(self, grid: List[List[int]]) -> int:
        n, m = len(grid), len(grid[0])
        directions = [[1,  0], [0, 1], [-1, 0], [0, -1]]
        res = 0
        mod = 1000000007

        @cache
        def dfs(i, j):
            ans = 1
            for dr, dc in directions:
                r, c = i + dr, j + dc
                if r < 0 or r >= n or c < 0 or c >= m:
                    continue
                if grid[r][c] > grid[i][j]:
                    ans += dfs(r, c)
            return ans

        for i in range(n):
            for j in range(m):
                res += dfs(i, j)
                res %= mod

        return res

Solution 2:

class Solution:
    def countPaths(self, grid: List[List[int]]) -> int:
        n, m = len(grid), len(grid[0])
        directions = [[1,  0], [0, 1], [-1, 0], [0, -1]]
        res = 0
        mod = 1000000007

        dp = {}

        def dfs(i, j):
            if (i, j) in dp:
                return dp[(i, j)]
                
            ans = 1
            for dr, dc in directions:
                r, c = i + dr, j + dc
                if r < 0 or r >= n or c < 0 or c >= m:
                    continue
                if grid[r][c] > grid[i][j]:
                    ans += dfs(r, c)

            dp[(i,j)] = ans
            return ans

        for i in range(n):
            for j in range(m):
                res += dfs(i, j)
                res %= mod

        return res

Solution 3:

class Solution:
    def countPaths(self, grid: List[List[int]]) -> int:
        n, m = len(grid), len(grid[0])
        directions = [[1, 0], [0, 1], [-1, 0], [0, -1]]
        res = 0
        mod = 1000000007

        dp = [[-1] * m for _ in range(n)]

        def dfs(i, j):
            if dp[i][j] != -1:
                return dp[i][j]

            ans = 1
            for dr, dc in directions:
                r, c = i + dr, j + dc
                if 0 <= r < n and 0 <= c < m and grid[r][c] > grid[i][j]:
                    ans += dfs(r, c)

            dp[i][j] = ans
            return ans

        for i in range(n):
            for j in range(m):
                res += dfs(i, j)
                res %= mod

        return res