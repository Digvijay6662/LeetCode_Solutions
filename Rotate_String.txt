796. Rotate String
Solved
Easy
Topics
Companies
Given two strings s and goal, return true if and only if s can become goal after some number of shifts on s.

A shift on s consists of moving the leftmost character of s to the rightmost position.

For example, if s = "abcde", then it will be "bcdea" after one shift.
 

Example 1:

Input: s = "abcde", goal = "cdeab"
Output: true
Example 2:

Input: s = "abcde", goal = "abced"
Output: false
 

Constraints:

1 <= s.length, goal.length <= 100
s and goal consist of lowercase English letters.


Solution 1:

class Solution:
    def rotateString(self, s: str, goal: str) -> bool:
        if len(s) != len(goal):
            return False

        rotated_s = s + s
        
        return goal in rotated_s


Solution 2:

class Solution:
    def rotateString(self, s: str, goal: str) -> bool:
        if len(s) != len(goal):
            return False

        n = len(s)
        for i in range(n):
            if s[i:] + s[:i] == goal:
                return True
        return False


Solution 3:

class Solution:
    def rotateString(self, s: str, goal: str) -> bool:

        def build_lps(pattern):
            m = len(pattern)
            lps = [0] * m
            p, i = 0, 1

            while i < m:
                if pattern[p] == pattern[i]:
                    lps[i] = p + 1
                    p += 1
                    i += 1
                elif p == 0:
                    lps[i] = 0
                    i += 1
                else:
                    p = lps[p - 1]

            return lps

        if len(s) != len(goal):
            return False

        concatenated = s + s

        n = len(concatenated)
        m = len(goal)

        lps = build_lps(goal)
        i = j = 0

        while i < n:
            if concatenated[i] == goal[j]:
                i += 1
                j += 1
            else:
                if j == 0:
                    i += 1
                else:
                    j = lps[j - 1]

            if j == m:
                return True

        return False


Solution 4:

class Solution:
    def rotateString(self, s: str, goal: str) -> bool:
        if len(s) != len(goal):
            return False

        def zAlgorithm(string):
            n = len(string)
            z = [0] * n
            l = r = 0

            for i in range(1, n):
                if i > r:
                    l = r = i
                    while r < n and string[r] == string[r - l]:
                        r += 1
                    z[i] = r - l
                    r -= 1
                else:
                    idx = i - l
                    if i + z[idx] <= r:
                        z[i] = z[idx]
                    else:
                        l = i
                        while r < n and string[r] == string[r - l]:
                            r += 1
                        z[i] = r - l
                        r -= 1

            return z

        concatenated = s + s
        n = len(concatenated)
        m = len(goal)

        string = goal + '*' + concatenated
        z = zAlgorithm(string)

        for i in range(m + n + 1):
            if z[i] == m:
                return True

        return False


Solution 5:

class Solution:
    def rotateString(self, s: str, goal: str) -> bool:
        
        def rabinKarp(text, pattern):
            base = 1000
            if not text or not pattern:
                return -1

            n = len(text)
            m = len(pattern)
            p = 1

            for i in range(m):
                p = (p * 31) % base

            target = 0
            for i in range(m):
                target = (target * 31 + ord(pattern[i])) % base 

            curr = 0
            for i in range(n):
                curr = (curr * 31 + ord(text[i])) % base
                if i < m - 1:
                    continue
                if i >= m:
                    curr = (curr - ord(text[i - m]) * p) % base

                if curr < 0:
                    curr += base

                if target == curr and text[i - m + 1:i + 1] == pattern:
                    return i - m + 1

            return -1

        n = len(s)
        m = len(goal)

        if n != m:
            return False

        text = s + s
        index = rabinKarp(text, goal)

        if index == -1:
            return False 

        return True