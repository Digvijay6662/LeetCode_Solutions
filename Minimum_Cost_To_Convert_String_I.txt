2976. Minimum Cost to Convert String I
Solved
Medium
Companies
Hint
You are given two 0-indexed strings source and target, both of length n and consisting of lowercase English letters. You are also given two 0-indexed character arrays original and changed, and an integer array cost, where cost[i] represents the cost of changing the character original[i] to the character changed[i].

You start with the string source. In one operation, you can pick a character x from the string and change it to the character y at a cost of z if there exists any index j such that cost[j] == z, original[j] == x, and changed[j] == y.

Return the minimum cost to convert the string source to the string target using any number of operations. If it is impossible to convert source to target, return -1.

Note that there may exist indices i, j such that original[j] == original[i] and changed[j] == changed[i].

 

Example 1:

Input: source = "abcd", target = "acbe", original = ["a","b","c","c","e","d"], changed = ["b","c","b","e","b","e"], cost = [2,5,5,1,2,20]
Output: 28
Explanation: To convert the string "abcd" to string "acbe":
- Change value at index 1 from 'b' to 'c' at a cost of 5.
- Change value at index 2 from 'c' to 'e' at a cost of 1.
- Change value at index 2 from 'e' to 'b' at a cost of 2.
- Change value at index 3 from 'd' to 'e' at a cost of 20.
The total cost incurred is 5 + 1 + 2 + 20 = 28.
It can be shown that this is the minimum possible cost.
Example 2:

Input: source = "aaaa", target = "bbbb", original = ["a","c"], changed = ["c","b"], cost = [1,2]
Output: 12
Explanation: To change the character 'a' to 'b' change the character 'a' to 'c' at a cost of 1, followed by changing the character 'c' to 'b' at a cost of 2, for a total cost of 1 + 2 = 3. To change all occurrences of 'a' to 'b', a total cost of 3 * 4 = 12 is incurred.
Example 3:

Input: source = "abcd", target = "abce", original = ["a"], changed = ["e"], cost = [10000]
Output: -1
Explanation: It is impossible to convert source to target because the value at index 3 cannot be changed from 'd' to 'e'.
 

Constraints:

1 <= source.length == target.length <= 105
source, target consist of lowercase English letters.
1 <= cost.length == original.length == changed.length <= 2000
original[i], changed[i] are lowercase English letters.
1 <= cost[i] <= 106
original[i] != changed[i]


Solution 1:

class Solution:
    def minimumCost(self, source: str, target: str, original: List[str], changed: List[str], cost: List[int]) -> int:
        dist = [[float('inf') for _ in range(26)] for _ in range(26)]

        for i in range(26):
            dist[i][i] = 0

        n = len(original)

        for i in range(n):
            src = ord(original[i]) - ord('a')
            dest = ord(changed[i]) - ord('a')
            path_cost = cost[i]
            dist[src][dest] = min(dist[src][dest], path_cost)

        for k in range(26):
            for i in range(26):
                for j in range(26):
                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])

        result = 0
        size = len(source)
        
        for i in range(size):
            src = ord(source[i]) - ord('a')
            dest = ord(target[i]) - ord('a')

            if src == dest:
                continue
            if dist[src][dest] == float('inf'):
                return -1
            else:
                result += dist[src][dest]

        return result
                

Solution 2:

class Solution:
    def minimumCost(self, source: str, target: str, original: List[str], changed: List[str], cost: List[int]) -> int:

        n = len(original)
        graph = defaultdict(list)

        for i in range(n):
            src = ord(original[i]) - ord('a')
            dest = ord(changed[i]) - ord('a')
            graph[src].append((dest, cost[i]))

        def dijkstras(start):
            dist = [float('inf')] * 26
            dist[start] = 0
            minHeap = [(0, start)]

            while minHeap:
                cost, node = heapq.heappop(minHeap)

                if cost > dist[node]:
                    continue

                for neighbor, neighbor_cost in graph[node]:
                    new_cost = cost + neighbor_cost
                    if new_cost < dist[neighbor]:
                        dist[neighbor] = new_cost
                        heapq.heappush(minHeap, (new_cost, neighbor))

            return dist

        dist = [[float('inf') for _ in range(26)] for _ in range(26)]

        for ch in range(0, 26):
            dist[ch] = dijkstras(ch)

        result = 0
        size = len(source)

        for i in range(size):
            src = ord(source[i]) - ord('a')
            dest = ord(target[i]) - ord('a')

            if src == dest:
                continue
            if dist[src][dest] == float('inf'):
                return -1
            else:
                result += dist[src][dest]

        return result