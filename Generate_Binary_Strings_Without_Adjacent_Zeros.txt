3211. Generate Binary Strings Without Adjacent Zeros
Solved
Medium
Topics
Companies
Hint
You are given a positive integer n.

A binary string x is valid if all 
substrings
 of x of length 2 contain at least one "1".

Return all valid strings with length n, in any order.

 

Example 1:

Input: n = 3

Output: ["010","011","101","110","111"]

Explanation:

The valid strings of length 3 are: "010", "011", "101", "110", and "111".

Example 2:

Input: n = 1

Output: ["0","1"]

Explanation:

The valid strings of length 1 are: "0" and "1".

 

Constraints:

1 <= n <= 18


Solution 1:

class Solution:
    def validStrings(self, n: int) -> List[str]:
        result = []
        
        def solve(curr, l):
            if len(curr) == n:
                result.append(curr)
                return
                
                
            if l < 1:
                solve(curr + '0', l + 1)
                solve(curr + '1', 0)
            else:
                solve(curr + '1', 0)
            
        solve("", 0)
        return result


Solution 2:

class Solution:
    def validStrings(self, n: int) -> List[str]:
        result = []

        def backtrack(current):
            if len(current) == n:
                result.append(current)
                return
            if len(current) == 0 or current[-1] == '1':
                backtrack(current + '0')
            backtrack(current + '1')

        backtrack('')
        return result


Solution 3:

class Solution:
    def validStrings(self, n: int) -> List[str]:
        queue = deque(['0', '1'])
        result = []

        while queue:
            current = queue.popleft()
            if len(current) == n:
                result.append(current)
            else:
                if current[-1] == '1':
                    queue.append(current + '0')
                queue.append(current + '1')

        return result


Solution 4:

class Solution:
    def validStrings(self, n: int) -> List[str]:
        if n == 1:
            return ['0', '1']

        valid = ['0', '1']
        for _ in range(n - 1):
            new_valid = []
            for s in valid:
                if s[-1] == '1':
                    new_valid.append(s + '0')
                    new_valid.append(s + '1')
                else:
                    new_valid.append(s + '1')
            valid = new_valid
        
        return valid