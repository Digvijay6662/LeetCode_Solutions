564. Find the Closest Palindrome
Solved
Hard
Topics
Companies
Hint
Given a string n representing an integer, return the closest integer (not including itself), which is a palindrome. If there is a tie, return the smaller one.

The closest is defined as the absolute difference minimized between two integers.

 

Example 1:

Input: n = "123"
Output: "121"
Example 2:

Input: n = "1"
Output: "0"
Explanation: 0 and 2 are the closest palindromes but we return the smallest which is 0.
 

Constraints:

1 <= n.length <= 18
n consists of only digits.
n does not have leading zeros.
n is representing an integer in the range [1, 1018 - 1].


Solution 1:

class Solution:
    def nearestPalindromic(self, n: str) -> str:
        length = len(n)
        original_num = int(n)

        if length == 1:
            return str(original_num - 1)
            
        candidates = set()
        
        candidates.add("9" * (length - 1))
        candidates.add("1" + "0" * (length - 1) + "1")
        
        prefix = n[:(length + 1) // 2]
        for delta in [-1, 0, 1]:
            new_prefix = str(int(prefix) + delta)
            if length % 2 == 0:
                candidate = new_prefix + new_prefix[::-1]
            else:
                candidate = new_prefix + new_prefix[-2::-1]
            candidates.add(candidate)
        
        candidates.discard(n)

        closest_palindrome = None
        min_diff = float('inf')
        
        for candidate in candidates:
            candidate_num = int(candidate)
            diff = abs(candidate_num - original_num)
            
            if diff < min_diff or (diff == min_diff and candidate_num < int(closest_palindrome)):
                min_diff = diff
                closest_palindrome = candidate
        
        return closest_palindrome


Solution 2:

class Solution:
    def nearestPalindromic(self, n: str) -> str:
        orginal_num = int(n)
        if orginal_num <= 10:
            return str(orginal_num - 1)

        length = len(n)
        leftHalf = int(n[:(length + 1) // 2])
        
        def generatePalindromeFromLeft(leftHalf, isEvenLength):
            palindrome = leftHalf
            if not isEvenLength:
                leftHalf //= 10
            while leftHalf > 0:
                palindrome = palindrome * 10 + leftHalf % 10
                leftHalf //= 10
            return palindrome
        
        candidates = [
            generatePalindromeFromLeft(leftHalf - 1, length % 2 == 0),
            generatePalindromeFromLeft(leftHalf, length % 2 == 0),
            generatePalindromeFromLeft(leftHalf + 1, length % 2 == 0),
            10**(length - 1) - 1,
            10**length + 1
        ]

        closest_palindrome = 0
        min_diff = float('inf')

        for candidate in candidates:
            if candidate == orginal_num:
                continue
            difference = abs(candidate - orginal_num)
            if difference < min_diff or (difference == min_diff and candidate < closest_palindrome):
                min_diff = difference
                closest_palindrome = candidate

        return str(closest_palindrome)
