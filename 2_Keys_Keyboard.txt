650. 2 Keys Keyboard
Solved
Medium
Topics
Companies
Hint
There is only one character 'A' on the screen of a notepad. You can perform one of two operations on this notepad for each step:

Copy All: You can copy all the characters present on the screen (a partial copy is not allowed).
Paste: You can paste the characters which are copied last time.
Given an integer n, return the minimum number of operations to get the character 'A' exactly n times on the screen.

 

Example 1:

Input: n = 3
Output: 3
Explanation: Initially, we have one character 'A'.
In step 1, we use Copy All operation.
In step 2, we use Paste operation to get 'AA'.
In step 3, we use Paste operation to get 'AAA'.
Example 2:

Input: n = 1
Output: 0
 

Constraints:

1 <= n <= 1000


Solution 1:

class Solution:
    def minSteps(self, n: int) -> int:
        dp = [[-1] * (n//2 + 1) for _ in range(n)]

        def solve(total, curr):
            if total > n:
                return float('inf')
            
            if total == n:
                return 0

            if dp[total][curr] != -1:
                return dp[total][curr]

            copy_paste = 2 + solve(total + total, total)
            paste = float('inf')
            if curr > 0:
                paste = 1 + solve(total + curr, curr)
    
            dp[total][curr] = min(copy_paste, paste)
            return dp[total][curr]

        return solve(1, 0)

Solution 2:

class Solution:
    def minSteps(self, n: int) -> int:
        if n == 1:
            return 0

        dp = [float('inf')] * (n + 1)
        dp[1] = 0

        for i in range(2, n + 1):
            for j in range(1, i // 2 + 1):
                if i % j == 0:
                    dp[i] = min(dp[i], dp[j] + (i // j))
        
        return dp[n]


Solution 3:

class Solution:
    def minSteps(self, n: int) -> int:
        if n == 1:
            return 0
        
        total_operations = 0
        factor = 2
        while factor * factor <= n:
            while n % factor == 0:
                total_operations += factor
                n //= factor
            factor += 1
        
        if n > 1:
            total_operations += n
        
        return total_operations