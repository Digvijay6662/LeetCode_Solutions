2707. Extra Characters in a String
Medium
678
40
Companies
You are given a 0-indexed string s and a dictionary of words dictionary. You have to break s into one or more non-overlapping substrings such that each substring is present in dictionary. There may be some extra characters in s which are not present in any of the substrings.

Return the minimum number of extra characters left over if you break up s optimally.

 

Example 1:

Input: s = "leetscode", dictionary = ["leet","code","leetcode"]
Output: 1
Explanation: We can break s in two substrings: "leet" from index 0 to 3 and "code" from index 5 to 8. There is only 1 unused character (at index 4), so we return 1.

Example 2:

Input: s = "sayhelloworld", dictionary = ["hello","world"]
Output: 3
Explanation: We can break s in two substrings: "hello" from index 3 to 7 and "world" from index 8 to 12. The characters at indices 0, 1, 2 are not used in any substring and thus are considered as extra characters. Hence, we return 3.
 

Constraints:

1 <= s.length <= 50
1 <= dictionary.length <= 50
1 <= dictionary[i].length <= 50
dictionary[i] and s consists of only lowercase English letters
dictionary contains distinct words


Solution 1:

class Solution:
    def minExtraChar(self, s: str, dictionary: List[str]) -> int:
        n = len(s)
        dp = [-1 for _ in range(n)]

        def solve(i):
            if i == n:
                return 0

            if dp[i] != -1:
                return dp[i]
            
            minExtra = n
            for word in dictionary:
                if s[i: i + len(word)] == word:
                    minExtra = min(minExtra, 0 + solve(i + len(word)))

            minExtra = min(minExtra, 1 + solve(i + 1))
            dp[i] = minExtra
            return minExtra

        return solve(0)


Solution 2:

class Solution:
    def minExtraChar(self, s: str, dictionary: List[str]) -> int:
        n = len(s)
        dp = [n] * (n + 1)
        dp[n] = 0

        for i in range(n - 1, -1, -1):
            for word in dictionary:
                if s[i:i + len(word)] == word:
                    dp[i] = min(dp[i], dp[i + len(word)])

            dp[i] = min(dp[i], 1 + dp[i + 1])

        return dp[0]


Solution 3:

class Solution:
    def minExtraChar(self, s: str, dictionary: List[str]) -> int:
        n = len(s)
        dictSet = set(dictionary)
        dp = [-1 for _ in range(n)]

        def solve(i):
            if i == n:
                return 0

            if dp[i] != -1:
                return dp[i]

            currString = ""
            minExtra = n

            for j in range(i, n):
                currString += s[j]

                currExtra = len(currString) if currString not in dictSet else 0
                nextExtra = solve(j + 1)
                totalExtra = currExtra + nextExtra

                minExtra = min(minExtra, totalExtra)

            dp[i] = minExtra
            return minExtra

        return solve(0)


Solution 4:

class Solution:
    def minExtraChar(self, s: str, dictionary: List[str]) -> int:
        n = len(s)
        dictSet = set(dictionary)
        dp = [n for _ in range(n + 1)]
        dp[n] = 0

        for i in range(n - 1, -1, -1):
            currString = ''
            for j in range(i, n):
                currString += s[j]
                currExtra = len(currString) if currString not in dictSet else 0
                nextExtra = dp[j + 1]
                totalExtra = currExtra + nextExtra

                dp[i] = min(dp[i], totalExtra)
                
        return dp[0]


Solution 5:

class Solution:
    def minExtraChar(self, s: str, dictionary: List[str]) -> int:
        n = len(s)
        dictSet = set(dictionary)
        dp = [-1 for _ in range(n)]

        def solve(i):
            if i == n:
                return 0

            if dp[i] != -1:
                return dp[i]

            minExtra = solve(i + 1) + 1
            for j in range(i, n):
                curr = s[i: j + 1]
                if curr in dictSet:
                    minExtra = min(minExtra, solve(j + 1))

            dp[i] = minExtra
            return minExtra
            
        return solve(0)


Solution 6:

class Solution:
    def minExtraChar(self, s: str, dictionary: List[str]) -> int:
        n = len(s)
        dictSet = set(dictionary)
        dp = [0 for _ in range(n + 1)]

        for i in range(n - 1, -1, -1):
            dp[i] = dp[i + 1] + 1
            for j in range(i, n):
                curr = s[i: j + 1]
                if curr in dictSet:
                    dp[i] = min(dp[i], dp[j + 1])

        return dp[0]



Solution 7:

class TrieNode:
    def __init__(self):
        self.children = {}
        self.isWord = False

class Trie:
    def __init__(self, dictionary):
        self.root = TrieNode()
        for word in dictionary:
            node = self.root
            for char in word:
                if char not in node.children:
                    node.children[char] = TrieNode()
                node = node.children[char]
            node.isWord = True

class Solution:
    def minExtraChar(self, s: str, dictionary: List[str]) -> int:
        n = len(s)
        trie = Trie(dictionary)
        
        dp = [-1 for _ in range(n)]

        def solve(i):
            if i == n:
                return 0

            if dp[i] != -1:
                return dp[i]

            minExtra = solve(i + 1) + 1
            node = trie.root
            for j in range(i, n):
                if s[j] not in node.children:
                    break
                node = node.children[s[j]]
                if node.isWord:
                    minExtra = min(minExtra, solve(j + 1))
            dp[i] = minExtra
            return minExtra
            
        return solve(0)


Solution 8:


class TrieNode:
    def __init__(self):
        self.children = {}
        self.isWord = False

class Trie:
    def __init__(self, dictionary):
        self.root = TrieNode()
        for word in dictionary:
            node = self.root
            for char in word:
                if char not in node.children:
                    node.children[char] = TrieNode()
                node = node.children[char]
            node.isWord = True

class Solution:
    def minExtraChar(self, s: str, dictionary: List[str]) -> int:
        n = len(s)
        trie = Trie(dictionary)
        dp = [0 for _ in range(n + 1)]

        for i in range(n - 1, -1, -1):
            dp[i] = dp[i + 1] + 1
            node = trie.root
            for j in range(i, n):
                if s[j] not in node.children:
                    break
                node = node.children[s[j]]
                if node.isWord:
                    dp[i] = min(dp[i], dp[j + 1])

        return dp[0]
