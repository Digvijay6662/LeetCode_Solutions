1658. Minimum Operations to Reduce X to Zero
Medium
4.8K
96
Companies
You are given an integer array nums and an integer x. In one operation, you can either remove the leftmost or the rightmost element from the array nums and subtract its value from x. Note that this modifies the array for future operations.

Return the minimum number of operations to reduce x to exactly 0 if it is possible, otherwise, return -1.

 

Example 1:

Input: nums = [1,1,4,2,3], x = 5
Output: 2
Explanation: The optimal solution is to remove the last two elements to reduce x to zero.
Example 2:

Input: nums = [5,6,7,8,9], x = 4
Output: -1
Example 3:

Input: nums = [3,2,20,1,1,3], x = 10
Output: 5
Explanation: The optimal solution is to remove the last three elements and the first two elements (5 operations in total) to reduce x to zero.
 

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= 104
1 <= x <= 109


Solution 1:

class Solution:
    def minOperations(self, nums: List[int], x: int) -> int:
        n = len(nums)
        target = sum(nums) - x

        if target < 0:
            return -1

        left, right, currSum, maxLength = 0, 0, 0, -1

        while right < n:
            currSum += nums[right]

            while currSum > target and left <= right:
                currSum -= nums[left]
                left += 1

            if currSum == target:
                maxLength = max(maxLength, right - left + 1)

            right += 1
        
        return -1 if maxLength == -1 else n - maxLength


Solution 2:


class Solution:
    def minOperations(self, nums: List[int], x: int) -> int:
        n = len(nums)
        target = sum(nums) - x

        if target < 0:
            return -1

        if target == 0:
            return n

        maxLength = -1
        currSum = 0
        hashMap = {0: -1}

        for i, num in enumerate(nums):
            currSum += num

            if currSum - target in hashMap:
                maxLength = max(maxLength, i - hashMap[currSum - target])

            hashMap[currSum] = i

        return -1 if maxLength == -1 else n - maxLength



Solution 3:

class Solution:
    def minOperations(self, nums: List[int], x: int) -> int:
        n = len(nums)
        totalSum = 0
        hashMap = {0: -1}

        for i in range(n):
            totalSum += nums[i]
            hashMap[totalSum] = i

        if totalSum < x:
            return -1

        target = totalSum - x
        maxLength = -1
        currSum = 0

        for i in range(n):
            currSum += nums[i]

            if currSum - target in hashMap:
                maxLength = max(maxLength, i - hashMap[currSum - target])

        return -1 if maxLength == -1 else n - maxLength