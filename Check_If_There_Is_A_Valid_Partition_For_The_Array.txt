2369. Check if There is a Valid Partition For The Array
Medium
1.3K
155
Companies
You are given a 0-indexed integer array nums. You have to partition the array into one or more contiguous subarrays.

We call a partition of the array valid if each of the obtained subarrays satisfies one of the following conditions:

The subarray consists of exactly 2 equal elements. For example, the subarray [2,2] is good.
The subarray consists of exactly 3 equal elements. For example, the subarray [4,4,4] is good.
The subarray consists of exactly 3 consecutive increasing elements, that is, the difference between adjacent elements is 1. For example, the subarray [3,4,5] is good, but the subarray [1,3,5] is not.
Return true if the array has at least one valid partition. Otherwise, return false.

 

Example 1:

Input: nums = [4,4,4,5,6]
Output: true
Explanation: The array can be partitioned into the subarrays [4,4] and [4,5,6].
This partition is valid, so we return true.
Example 2:

Input: nums = [1,1,1,2]
Output: false
Explanation: There is no valid partition for this array.
 

Constraints:

2 <= nums.length <= 105
1 <= nums[i] <= 106


Solution 1:

class Solution:
    def validPartition(self, nums: List[int]) -> bool:
        n = len(nums)
        dp = [-1] * n

        def solve(i):
            if i == n:
                return True

            if dp[i] != -1:
                return dp[i]

            res = False
            if i + 1 < n and nums[i] == nums[i + 1]:
                res |= solve(i + 2)
            
            if i + 2 < n and nums[i] == nums[i + 1] == nums[i + 2]:
                res |= solve(i + 3)

            if i + 2 < n and nums[i] + 2 == nums[i + 1] + 1 == nums[i + 2]:
                res |= solve(i + 3)

            dp[i] = res
            return res


        return solve(0)



Solution 2:

class Solution:
    def validPartition(self, nums: List[int]) -> bool:
        n = len(nums)
        dp = [False] * (n + 1)
        dp[n] = True
        for i in range(n - 1, -1, -1):
            if i + 1 < n and nums[i] == nums[i + 1]:
                dp[i] = dp[i + 2]
            if i + 2 < n and nums[i] == nums[i + 1] == nums[i + 2]:
                dp[i] |= dp[i + 3]
            if i + 2 < n and nums[i] + 2 == nums[i + 1] + 1 == nums[i + 2]:
                dp[i] |= dp[i + 3]

        return dp[0] 


Solution 3:

class Solution:
    def validPartition(self, nums: List[int]) -> bool:
        n = len(nums)
        dp = [True, False, False]

        for i in range(n):
            dp_index = i + 1
            ans = False
            
            if i > 0 and nums[i] == nums[i - 1]:
                ans = dp[(dp_index - 2) % 3]
            if i > 1 and nums[i] == nums[i - 1] == nums[i - 2]:
                ans |= dp[(dp_index - 3) % 3]
            if i > 1 and nums[i] == nums[i - 1] + 1 and nums[i] == nums[i - 2] + 2:
                ans |= dp[(dp_index - 3) % 3]
            
            dp[dp_index % 3] = ans
        
        return dp[n % 3]


Solution 4:

class Solution:
    def validPartition(self, nums: List[int]) -> bool:
        n = len(nums)
        dp = [False, False, False, True]

        for i in range(n):
            dp[i % 4] = False
            if i - 1 >= 0 and nums[i] == nums[i-1]:
                dp[i % 4] |= dp[(i - 2) % 4]
            if i - 2 >= 0 and nums[i] == nums[i-1] == nums[i-2]:
                dp[i % 4] |= dp[(i - 3) % 4]
            if i - 2 >= 0 and nums[i] == nums[i-1] + 1 == nums[i-2] + 2:
                dp[i % 4] |= dp[(i - 3) % 4]
                
        return dp[(n - 1) % 4]


Solution 5:

class Solution:
    def validPartition(self, nums: List[int]) -> bool:
        n = len(nums)
        dp_1 = True
        dp_2 = True
        dp_3 = True
        
        for i in range(n - 1, -1, -1):
            cur = False
            if i + 1 < n and nums[i] == nums[i+1]:
                cur = cur or dp_2
            if i + 2 < n and nums[i] == nums[i+1] == nums[i+2]:
                cur = cur or dp_3
            if i + 2 < n and nums[i] + 2 == nums[i + 1] + 1 == nums[i + 2]:
                cur = cur or dp_3
            dp_1, dp_2, dp_3 = cur, dp_1, dp_2

        return dp_1
