1155. Number of Dice Rolls With Target Sum
Solved
Medium
Topics
Companies
Hint
You have n dice, and each die has k faces numbered from 1 to k.

Given three integers n, k, and target, return the number of possible ways (out of the kn total ways) to roll the dice, so the sum of the face-up numbers equals target. Since the answer may be too large, return it modulo 109 + 7.

 

Example 1:

Input: n = 1, k = 6, target = 3
Output: 1
Explanation: You throw one die with 6 faces.
There is only one way to get a sum of 3.
Example 2:

Input: n = 2, k = 6, target = 7
Output: 6
Explanation: You throw two dice, each with 6 faces.
There are 6 ways to get a sum of 7: 1+6, 2+5, 3+4, 4+3, 5+2, 6+1.
Example 3:

Input: n = 30, k = 30, target = 500
Output: 222616187
Explanation: The answer must be returned modulo 109 + 7.
 

Constraints:

1 <= n, k <= 30
1 <= target <= 1000


Solution 1:

class Solution:
    def numRollsToTarget(self, n: int, k: int, target: int) -> int:
        mod = 1000000007
        dp = [[-1 for _ in range(target + 1)] for _ in range(n)]

        def solve(dice, total):
            if total > target:
                return 0

            if dice == n:
                if total == target:
                    return 1
                return 0

            if dp[dice][total] != -1:
                return dp[dice][total]

            ans = 0
            for i in range(1, k + 1):
                ans = (ans + solve(dice + 1, total + i)) % mod

            dp[dice][total] = ans
            return ans

        return solve(0, 0)
        

Solution 2:

class Solution:
    def numRollsToTarget(self, n: int, k: int, target: int) -> int:
        mod = 1000000007
        dp = [[0 for _ in range(target + 1)] for _ in range(n + 1)]
        dp[n][target] = 1

        for dice in range(n - 1, -1, -1):
            for total in range(target - 1, -1, -1):
                for i in range(1, k + 1):
                    if total + i <= target:
                        dp[dice][total] = (dp[dice][total] + dp[dice + 1][total + i]) % mod

        return dp[0][0]


Solution 3:

class Solution:
    def numRollsToTarget(self, n: int, k: int, target: int) -> int:
        mod = 1000000007
        prev = [0 for _ in range(target + 1)]
        prev[target] = 1

        for dice in range(n - 1, -1, -1):
            curr = [0 for _ in range(target + 1)]
            for total in range(target - 1, -1, -1):
                for i in range(1, k + 1):
                    if total + i <= target:
                        curr[total] = (curr[total] + prev[total + i]) % mod
            prev = curr

        return prev[0]