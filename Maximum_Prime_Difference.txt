3115. Maximum Prime Difference
Solved
Medium
Companies
Hint
You are given an integer array nums.

Return an integer that is the maximum distance between the indices of two (not necessarily different) prime numbers in nums.

 

Example 1:

Input: nums = [4,2,9,5,3]

Output: 3

Explanation: nums[1], nums[3], and nums[4] are prime. So the answer is |4 - 1| = 3.

Example 2:

Input: nums = [4,8,2,8]

Output: 0

Explanation: nums[2] is prime. Because there is just one prime number, the answer is |2 - 2| = 0.

 

Constraints:

1 <= nums.length <= 3 * 105
1 <= nums[i] <= 100
The input is generated such that the number of prime numbers in the nums is at least one.


Solution 1:

class Solution:
    def maximumPrimeDifference(self, nums: List[int]) -> int:
        n = len(nums)
        
        def is_prime(num):
            if num < 2:
                return False
            for i in range(2, int(num ** 0.5) + 1):
                if num % i == 0:
                    return False
            return True
        
        first = last = -1
        for i in range(n):
            if is_prime(nums[i]):
                if first == -1:
                    first = last = i
                else:
                    last = i
        
        return last - first


Solution 2:

class Solution:
    def maximumPrimeDifference(self, nums: List[int]) -> int:
        n = len(nums)
        max_num = max(nums) + 1
        
        primes = [True] * max_num
        primes[0] = primes[1] = False

        for p in range(2, int(max_num**0.5) + 1):
            if primes[p]:
                primes[p * p:max_num:p] = [False] * len(primes[p * p:max_num:p])         
        
        first = last = -1
        for i in range(n):
            if primes[nums[i]]:
                if first == -1:
                    first = last = i
                else:
                    last = i

        return last - first
