1091. Shortest Path in Binary Matrix
Medium
4.8K
187
Companies
Given an n x n binary matrix grid, return the length of the shortest clear path in the matrix. If there is no clear path, return -1.

A clear path in a binary matrix is a path from the top-left cell (i.e., (0, 0)) to the bottom-right cell (i.e., (n - 1, n - 1)) such that:

All the visited cells of the path are 0.
All the adjacent cells of the path are 8-directionally connected (i.e., they are different and they share an edge or a corner).
The length of a clear path is the number of visited cells of this path.

 

Example 1:


Input: grid = [[0,1],[1,0]]
Output: 2
Example 2:


Input: grid = [[0,0,0],[1,1,0],[1,1,0]]
Output: 4
Example 3:

Input: grid = [[1,0,0],[1,1,0],[1,1,0]]
Output: -1
 

Constraints:

n == grid.length
n == grid[i].length
1 <= n <= 100
grid[i][j] is 0 or 1


Solution 1:

class Solution:
    def shortestPathBinaryMatrix(self, grid: List[List[int]]) -> int:

        queue = deque([(0, 0, 1)])
        visited = set([(0, 0)])
        n = len(grid)
        directions = [[1, 0], [0, 1], [-1, 0], [0, -1], [1, 1], [-1, 1], [1, -1], [-1, -1]]

        while queue:
            r, c, length = queue.popleft()

            if min(r, c) < 0 or max(r, c) >= n or grid[r][c] == 1:
                continue

            if r == n - 1 and c == n - 1:
                return length

            for dr, dc in directions:
                if (r + dr, c + dc) not in visited:
                    queue.append((r + dr, c + dc, length + 1))
                    visited.add((r + dr, c + dc))

        return -1


Solution 2:

class Solution:
    def shortestPathBinaryMatrix(self, grid: List[List[int]]) -> int:

        if grid[0][0] == 1 or grid[-1][-1] == 1:
            return -1

        n = len(grid)
        queue = deque([(0, 0, 1)])
        directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]
        visited = set([(0, 0)])

        while queue:
            row, col, pathLength = queue.popleft()

            if row == n - 1 and col == n - 1:
                return pathLength

            for dr, dc in directions:
                nextRow, nextCol = row + dr, col + dc

                if 0 <= nextRow < n and 0 <= nextCol < n and grid[nextRow][nextCol] == 0 and (nextRow, nextCol) not in visited:
                    visited.add((nextRow, nextCol))
                    queue.append((nextRow, nextCol, pathLength + 1))

        return -1


