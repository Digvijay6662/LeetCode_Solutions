729. My Calendar I
Solved
Medium
Topics
Companies
Hint
You are implementing a program to use as your calendar. We can add a new event if adding the event will not cause a double booking.

A double booking happens when two events have some non-empty intersection (i.e., some moment is common to both events.).

The event can be represented as a pair of integers start and end that represents a booking on the half-open interval [start, end), the range of real numbers x such that start <= x < end.

Implement the MyCalendar class:

MyCalendar() Initializes the calendar object.
boolean book(int start, int end) Returns true if the event can be added to the calendar successfully without causing a double booking. Otherwise, return false and do not add the event to the calendar.
 

Example 1:

Input
["MyCalendar", "book", "book", "book"]
[[], [10, 20], [15, 25], [20, 30]]
Output
[null, true, false, true]

Explanation
MyCalendar myCalendar = new MyCalendar();
myCalendar.book(10, 20); // return True
myCalendar.book(15, 25); // return False, It can not be booked because time 15 is already booked by another event.
myCalendar.book(20, 30); // return True, The event can be booked, as the first event takes every time less than 20, but not including 20.
 

Constraints:

0 <= start < end <= 109
At most 1000 calls will be made to book.


Solution 1:

from sortedcontainers import SortedList

class MyCalendar:

    def __init__(self):
        self.events = SortedList()

    def book(self, start: int, end: int) -> bool:
        idx = self.events.bisect_left((start, end))

        if idx == 0 or self.events[idx-1][1] <= start:
            if idx == len(self.events) or self.events[idx][0] >= end:
                self.events.add((start, end))
                return True

        return False

# Your MyCalendar object will be instantiated and called as such:
# obj = MyCalendar()
# param_1 = obj.book(start,end)


Solution 2:

from sortedcontainers import SortedList

class MyCalendar:
    def __init__(self):
        self.events = SortedList()

    def book(self, start: int, end: int) -> bool:
        # Find the position to insert the new event
        idx = self.events.bisect_right((start, end))
        
        # Check for overlap with the previous event
        if idx > 0 and self.events[idx - 1][1] > start:
            return False
        
        # Check for overlap with the next event
        if idx < len(self.events) and self.events[idx][0] < end:
            return False
        
        # If no overlap, add the new event
        self.events.add((start, end))
        return True

# Your MyCalendar object will be instantiated and called as such:
# obj = MyCalendar()
# param_1 = obj.book(start,end)


Solution 3:

class Tree:
    def __init__(self, start, end):
        self.left = None
        self.right = None
        self.start = start
        self.end = end

    def insert(self, start, end):
        curr = self
        while curr:
            if end <= curr.start:
                if not curr.left:
                    curr.left = Tree(start, end)
                    break
                curr = curr.left
            elif curr.end <= start:
                if not curr.right:
                    curr.right = Tree(start, end)
                    break
                curr = curr.right
            else:
                return False

        return True

class MyCalendar:

    def __init__(self):
        self.root = None

    def book(self, start: int, end: int) -> bool:
        if not self.root:
            self.root = Tree(start, end)
            return True

        return self.root.insert(start, end)
        


# Your MyCalendar object will be instantiated and called as such:
# obj = MyCalendar()
# param_1 = obj.book(start,end)
