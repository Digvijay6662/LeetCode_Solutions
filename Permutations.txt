46. Permutations
Medium
16.1K
262
Companies
Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
Example 2:

Input: nums = [0,1]
Output: [[0,1],[1,0]]
Example 3:

Input: nums = [1]
Output: [[1]]
 

Constraints:

1 <= nums.length <= 6
-10 <= nums[i] <= 10
All the integers of nums are unique.


Solution 1:

class Solution:
    def permute(self, nums: List[int]) -> List[List[int]]:
        n = len(nums)
        res = []

        def backtrack(arr):
            if len(arr) == n:
                res.append(arr.copy())
                return

            for num in nums:
                if num not in arr:
                    backtrack(arr + [num])

        backtrack([])

        return res


Solution 2:

class Solution:
    def permute(self, nums: List[int]) -> List[List[int]]:
        n = len(nums)
        res = []

        def backtrack(arr):
            if len(arr) == n:
                res.append(arr.copy())
                return

            for num in nums:
                if num not in arr:
                    arr.append(num)
                    backtrack(arr)
                    arr.pop()

        backtrack([])

        return res


Solution 3:

class Solution:
    def permute(self, nums: List[int]) -> List[List[int]]:
        n = len(nums)
        res = []

        def backtrack(start):
            if start == n:
                res.append(nums.copy())
                return

            for i in range(start, n):
                nums[start], nums[i] = nums[i], nums[start]  # Swap elements
                backtrack(start + 1)
                nums[start], nums[i] = nums[i], nums[start]  # Backtrack, restore original order

        backtrack(0)

        return res

