1721. Swapping Nodes in a Linked List
Medium
4.7K
156
Companies
You are given the head of a linked list, and an integer k.

Return the head of the linked list after swapping the values of the kth node from the beginning and the kth node from the end (the list is 1-indexed).

 

Example 1:


Input: head = [1,2,3,4,5], k = 2
Output: [1,4,3,2,5]
Example 2:

Input: head = [7,9,6,6,7,8,3,0,9,5], k = 5
Output: [7,9,6,6,8,7,3,0,9,5]
 

Constraints:

The number of nodes in the list is n.
1 <= k <= n <= 105
0 <= Node.val <= 100


Solution 1:


# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def swapNodes(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:
        left , right = head, head

        for i in range(1, k):
            right = right.next
        
        curr = right

        while curr.next:
            left = left.next
            curr = curr.next

        left.val, right.val = right.val, left.val

        return head


Solution 2:# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def swapNodes(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:
        dummy = pLeft = pRight = ListNode(next=head)
        left = right = head

        for i in range(k-1):
            pLeft = left
            left = left.next
        
        temp = left
        
        while temp.next:
            pRight = right
            right = right.next
            temp = temp.next
            
        if left == right:
            return head
        
        pLeft.next, pRight.next = right, left
        left.next, right.next = right.next, left.next

        return dummy.next

        


