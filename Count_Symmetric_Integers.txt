2843. Count Symmetric Integers
Easy
105
5
Companies
You are given two positive integers low and high.

An integer x consisting of 2 * n digits is symmetric if the sum of the first n digits of x is equal to the sum of the last n digits of x. Numbers with an odd number of digits are never symmetric.

Return the number of symmetric integers in the range [low, high].

 

Example 1:

Input: low = 1, high = 100
Output: 9
Explanation: There are 9 symmetric integers between 1 and 100: 11, 22, 33, 44, 55, 66, 77, 88, and 99.
Example 2:

Input: low = 1200, high = 1230
Output: 4
Explanation: There are 4 symmetric integers between 1200 and 1230: 1203, 1212, 1221, and 1230.
 

Constraints:

1 <= low <= high <= 104


Solution 1:

class Solution:
    def countSymmetricIntegers(self, low: int, high: int) -> int:
        
        low = str(low-1)
        high = str(high)
        
        @cache
        def solve(i, tight, leadingZeroes, countLeadingZeroes, SymmetricSum, target):
            if i == len(target):
                return i - countLeadingZeroes > 0 and (i - countLeadingZeroes) % 2 == 0 and SymmetricSum == 0
            
            ans = 0        
            end = int(target[i]) if tight else 9
            
            flag = i - countLeadingZeroes < (len(target) - countLeadingZeroes) // 2
            
            for digit in range(end+1):
                if leadingZeroes and digit == 0:
                    ans += solve(i+1, tight and digit == end, leadingZeroes and digit == 0, countLeadingZeroes+1, SymmetricSum, target)
                else:
                    currSum = SymmetricSum + (digit if flag else -digit)
                    if currSum >= 0:
                        ans += solve(i+1, tight and digit == end, leadingZeroes and digit == 0, countLeadingZeroes, currSum, target)
            
            return ans
        
        highCount = solve(0, True, True, 0, 0, high)
        lowCount = solve(0, True, True, 0, 0, low)

        return highCount - lowCount


Solution 2:


class Solution:
    def countSymmetricIntegers(self, low: int, high: int) -> int:
        
        count = 0
        
        def check(num):
            n = len(num)
            if n % 2 == 1:
                return 0
            
            left, right = 0, n - 1
            leftSum, rightSum = 0, 0
            
            while left < right:
                leftSum += int(num[left])
                left += 1
                rightSum += int(num[right])
                right -= 1
            
            return leftSum == rightSum
        
        for num in range(low, high + 1):
            if check(str(num)):
                count += 1
                
        return count
            
        
