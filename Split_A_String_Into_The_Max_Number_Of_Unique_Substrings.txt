1593. Split a String Into the Max Number of Unique Substrings
Solved
Medium
Topics
Companies
Hint
Given a string s, return the maximum number of unique substrings that the given string can be split into.

You can split string s into any list of non-empty substrings, where the concatenation of the substrings forms the original string. However, you must split the substrings such that all of them are unique.

A substring is a contiguous sequence of characters within a string.

 

Example 1:

Input: s = "ababccc"
Output: 5
Explanation: One way to split maximally is ['a', 'b', 'ab', 'c', 'cc']. Splitting like ['a', 'b', 'a', 'b', 'c', 'cc'] is not valid as you have 'a' and 'b' multiple times.
Example 2:

Input: s = "aba"
Output: 2
Explanation: One way to split maximally is ['a', 'ba'].
Example 3:

Input: s = "aa"
Output: 1
Explanation: It is impossible to split the string any further.
 

Constraints:

1 <= s.length <= 16

s contains only lower case English letters.


Solution 1:

class Solution:
    def maxUniqueSplit(self, s: str) -> int:
        n = len(s)
        result = 0

        def solve(i, unique_substrings):
            nonlocal result
            if i == n:
                result = max(result, len(unique_substrings))
                return

            for j in range(i, n):
                substring = s[i:j+1]
                if substring not in unique_substrings:
                    unique_substrings.add(substring)
                    solve(j + 1, unique_substrings)
                    unique_substrings.remove(substring)

        solve(0, set())
        return result


Solution 2:

class Solution:
    def maxUniqueSplit(self, s: str) -> int:
        n = len(s)

        def solve(i, unique_substrings):
            if i == n:
                return 0
            ans = 0
            for j in range(i, n):
                substring = s[i:j+1]
                if substring not in unique_substrings:
                    unique_substrings.add(substring)
                    ans = max(ans, 1 + solve(j + 1, unique_substrings))
                    unique_substrings.remove(substring)

            return ans

        return solve(0, set())