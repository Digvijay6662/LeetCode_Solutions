3139. Minimum Cost to Equalize Array
Solved
Hard
Companies
Hint
You are given an integer array nums and two integers cost1 and cost2. You are allowed to perform either of the following operations any number of times:

Choose an index i from nums and increase nums[i] by 1 for a cost of cost1.
Choose two different indices i, j, from nums and increase nums[i] and nums[j] by 1 for a cost of cost2.
Return the minimum cost required to make all elements in the array equal.

Since the answer may be very large, return it modulo 109 + 7.

 

Example 1:

Input: nums = [4,1], cost1 = 5, cost2 = 2

Output: 15

Explanation:

The following operations can be performed to make the values equal:

Increase nums[1] by 1 for a cost of 5. nums becomes [4,2].
Increase nums[1] by 1 for a cost of 5. nums becomes [4,3].
Increase nums[1] by 1 for a cost of 5. nums becomes [4,4].
The total cost is 15.

Example 2:

Input: nums = [2,3,3,3,5], cost1 = 2, cost2 = 1

Output: 6

Explanation:

The following operations can be performed to make the values equal:

Increase nums[0] and nums[1] by 1 for a cost of 1. nums becomes [3,4,3,3,5].
Increase nums[0] and nums[2] by 1 for a cost of 1. nums becomes [4,4,4,3,5].
Increase nums[0] and nums[3] by 1 for a cost of 1. nums becomes [5,4,4,4,5].
Increase nums[1] and nums[2] by 1 for a cost of 1. nums becomes [5,5,5,4,5].
Increase nums[3] by 1 for a cost of 2. nums becomes [5,5,5,5,5].
The total cost is 6.

Example 3:

Input: nums = [3,5,3], cost1 = 1, cost2 = 3

Output: 4

Explanation:

The following operations can be performed to make the values equal:

Increase nums[0] by 1 for a cost of 1. nums becomes [4,5,3].
Increase nums[0] by 1 for a cost of 1. nums becomes [5,5,3].
Increase nums[2] by 1 for a cost of 1. nums becomes [5,5,4].
Increase nums[2] by 1 for a cost of 1. nums becomes [5,5,5].
The total cost is 4.

 

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= 106
1 <= cost1 <= 106
1 <= cost2 <= 106


Solution 1:

class Solution:
    def minCostToEqualizeArray(self, nums: List[int], cost1: int, cost2: int) -> int:
        n = len(nums)
        mod = 1000000007
        max_val = max(nums)
        min_val = min(nums)
        total = sum(nums)
        max_gap = max_val - min_val
        total_gaps = max_val * n - total
        
        # Cheaper to use cost1 easy case
        if 2 * cost1 <= cost2:
            return (total_gaps * cost1) % mod
        
        # if max_gap <= total_gaps - max_gap (i.e remaining gaps)
        # It means it is always possible to pair the max_gaps expcet if a spot is left
        if 2 * max_gap <= total_gaps:
            result =  total_gaps // 2 * cost2
            # if a spot is left case
            if total_gaps % 2 == 1:
                # if n is odd we will increase the gap by 1 and then pair them
                if n % 2 == 1:
                    result += min(cost1, cost2 * (n+1) // 2)
                # if n is even its not possible to make pairs
                else:
                    result += cost1
            return result % mod
        
        # Two Operations:
        #   Op1: Directly fill max_gap
        #   Op2: Pair max_gap with other nums, which increases the final level.

        result = cost2 * (total_gaps - max_gap)
        max_gap = max_gap - (total_gaps - max_gap)

        if max_gap >= n-1:
            if cost2 * (n-1) >= cost1 * (n-2):
                # Op 1 is better
                result += (max_gap - max_gap % (n-1)) * cost1
                max_gap %= n - 1
            else:
                # Op 2 is better
                result += max_gap // (n-2) * (n-1) * cost2
                max_gap %= n - 2

        if max_gap:
            # For the last round, Op 2: Increase the level by 1 to get (n + max_gap)//2 pairs
            op2 = (n + max_gap) // 2 * cost2 # = (max_gap + (n - max_gap)//2) * cost2
            if (n + max_gap) % 2 == 1:
                # The last one spot left
                if n % 2 == 1:
                    op2 += min(cost1, cost2 * (n + 1)//2)
                else:
                    op2 += cost1

            # Compare it with Op 1 
            result += min(op2, max_gap * cost1)

        return result % mod


Solution 2:

class Solution:
    def minCostToEqualizeArray(self, nums: List[int], cost1: int, cost2: int) -> int:
        n = len(nums)
        mod = 1000000007
        max_val = max(nums)
        min_val = min(nums)
        total_sum = sum(nums)
        max_gap = max_val - min_val
        total_gaps = max_val * n - total_sum

        if n <= 2 or 2 * cost1 <= cost2:
            return (total_gaps * cost1) % mod

        singles = max(0, 2 * max_gap - total_gaps)
        pairs = total_gaps - singles
        result = (singles + pairs % 2) * cost1 + (pairs // 2) * cost2

        total_gaps += (singles // (n - 2)) * n
        singles %= n - 2
        pairs = total_gaps - singles
        result = min(result, (singles + pairs % 2) * cost1 + pairs // 2 * cost2)

        for _ in range(2):
            total_gaps += n
            result = min(result, total_gaps % 2 * cost1 + total_gaps // 2 * cost2)

        return result % mod

        