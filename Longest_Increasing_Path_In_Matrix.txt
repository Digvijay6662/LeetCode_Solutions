329. Longest Increasing Path in a Matrix
Hard
8.3K
121
Companies
Given an m x n integers matrix, return the length of the longest increasing path in matrix.

From each cell, you can either move in four directions: left, right, up, or down. You may not move diagonally or move outside the boundary (i.e., wrap-around is not allowed).

 

Example 1:


Input: matrix = [[9,9,4],[6,6,8],[2,1,1]]
Output: 4
Explanation: The longest increasing path is [1, 2, 6, 9].
Example 2:


Input: matrix = [[3,4,5],[3,2,6],[2,2,1]]
Output: 4
Explanation: The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.
Example 3:

Input: matrix = [[1]]
Output: 1
 

Constraints:

m == matrix.length
n == matrix[i].length
1 <= m, n <= 200
0 <= matrix[i][j] <= 231 - 1

Solution 1:

class Solution:
    def longestIncreasingPath(self, matrix: List[List[int]]) -> int:
        if not matrix or not matrix[0]:
            return 0
        rows, cols = len(matrix), len(matrix[0])
        directions = [[0, 1], [0, -1], [-1, 0], [1, 0]]
        dp = [[0] * cols for _ in range(rows)]

        def dfs(i, j):
            if dp[i][j] != 0:
                return dp[i][j]

            length = 1
            for dr, dc in directions:
                r, c = i + dr, j + dc
                if 0 <= r < rows and 0 <= c < cols and matrix[r][c] > matrix[i][j]:
                    length = max(length, 1 + dfs(r, c))

            dp[i][j] = length
            return length

        res = 1
        for i in range(rows):
            for j in range(cols):
                res = max(res, dfs(i, j))

        return res


Solution 2:

class Solution:
    def longestIncreasingPath(self, matrix: List[List[int]]) -> int:
        if not matrix or not matrix[0]:
            return 0
        rows, cols = len(matrix), len(matrix[0])
        directions = [[0, 1], [0, -1], [-1, 0], [1, 0]]
        indegree = [[0] * cols for _ in range(rows)]

        q = deque()
        res = 0
        for i in range(rows):
            for j in range(cols):
                for dr, dc in directions:
                    r, c = i + dr, j + dc
                    if 0 <= r < rows and 0 <= c < cols:
                        if matrix[i][j] > matrix[r][c]:
                            indegree[i][j] += 1


        for i in range(rows):
            for j in range(cols):
                if indegree[i][j] == 0:
                    q.append((i, j))

        while q:
            for _ in range(len(q)):
                i, j = q.popleft()
                for dr, dc in directions:
                    r, c = i + dr, j + dc
                    if 0 <= r < rows and 0 <= c < cols:
                        if matrix[i][j] < matrix[r][c]:
                            indegree[r][c] -= 1
                            if indegree[r][c] == 0:
                                q.append((r, c))

            res += 1

        return res

