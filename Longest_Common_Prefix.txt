14. Longest Common Prefix
Easy
13.3K
3.8K
Companies
Write a function to find the longest common prefix string amongst an array of strings.

If there is no common prefix, return an empty string "".

 

Example 1:

Input: strs = ["flower","flow","flight"]
Output: "fl"
Example 2:

Input: strs = ["dog","racecar","car"]
Output: ""
Explanation: There is no common prefix among the input strings.
 

Constraints:

1 <= strs.length <= 200
0 <= strs[i].length <= 200
strs[i] consists of only lowercase English letters.


Solution 1:


class Solution:
    def longestCommonPrefix(self, strs: List[str]) -> str:
        if len(strs) == 0:
            return ''
        elif len(strs) == 1:
            return strs[0]
        m = len(min(strs, key=len))
        i = 0
        ans = strs[0]
        while i < m:        
            for s in strs:
                if s[i] != ans[i]:
                    return ans[:i]
            i += 1
        return ans[:m]


Solution 2:

class TrieNode:
    def __init__(self):
        self.children = {}
        self.endOfWord = False

class Trie:

    def __init__(self):
        self.root = TrieNode()

    def insert(self, word: str) -> None:
        curr = self.root

        for c in word:
            if c not in curr.children:
                curr.children[c] = TrieNode()
            curr = curr.children[c]
        
        curr.endOfWord = True

class Solution:
    def longestCommonPrefix(self, strs: List[str]) -> str:
        trie = Trie()

        for word in strs:
            trie.insert(word)

        curr = trie.root
        common_prefix = []
        while len(curr.children) == 1 and not curr.endOfWord:
            key = next(iter(curr.children.keys()))
            common_prefix.append(key)
            curr = curr.children[key]

        return ''.join(common_prefix)
