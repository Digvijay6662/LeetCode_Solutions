3296. Minimum Number of Seconds to Make Mountain Height Zero
Solved
Medium
Companies
Hint
You are given an integer mountainHeight denoting the height of a mountain.

You are also given an integer array workerTimes representing the work time of workers in seconds.

The workers work simultaneously to reduce the height of the mountain. For worker i:

To decrease the mountain's height by x, it takes workerTimes[i] + workerTimes[i] * 2 + ... + workerTimes[i] * x seconds. For example:
To reduce the height of the mountain by 1, it takes workerTimes[i] seconds.
To reduce the height of the mountain by 2, it takes workerTimes[i] + workerTimes[i] * 2 seconds, and so on.
Return an integer representing the minimum number of seconds required for the workers to make the height of the mountain 0.

 

Example 1:

Input: mountainHeight = 4, workerTimes = [2,1,1]

Output: 3

Explanation:

One way the height of the mountain can be reduced to 0 is:

Worker 0 reduces the height by 1, taking workerTimes[0] = 2 seconds.
Worker 1 reduces the height by 2, taking workerTimes[1] + workerTimes[1] * 2 = 3 seconds.
Worker 2 reduces the height by 1, taking workerTimes[2] = 1 second.
Since they work simultaneously, the minimum time needed is max(2, 3, 1) = 3 seconds.

Example 2:

Input: mountainHeight = 10, workerTimes = [3,2,2,4]

Output: 12

Explanation:

Worker 0 reduces the height by 2, taking workerTimes[0] + workerTimes[0] * 2 = 9 seconds.
Worker 1 reduces the height by 3, taking workerTimes[1] + workerTimes[1] * 2 + workerTimes[1] * 3 = 12 seconds.
Worker 2 reduces the height by 3, taking workerTimes[2] + workerTimes[2] * 2 + workerTimes[2] * 3 = 12 seconds.
Worker 3 reduces the height by 2, taking workerTimes[3] + workerTimes[3] * 2 = 12 seconds.
The number of seconds needed is max(9, 12, 12, 12) = 12 seconds.

Example 3:

Input: mountainHeight = 5, workerTimes = [1]

Output: 15

Explanation:

There is only one worker in this example, so the answer is workerTimes[0] + workerTimes[0] * 2 + workerTimes[0] * 3 + workerTimes[0] * 4 + workerTimes[0] * 5 = 15.

 

Constraints:

1 <= mountainHeight <= 105
1 <= workerTimes.length <= 104
1 <= workerTimes[i] <= 106


Solution 1:

class Solution:
    def minNumberOfSeconds(self, mountainHeight: int, workerTimes: List[int]) -> int:
        
        def check(seconds):
            total_height_reduced = 0
            for w in workerTimes:
                left, right = 0, mountainHeight
                
                while left <= right:
                    mid_k = (left + right) // 2
                    total_time = w * (mid_k * (mid_k + 1)) // 2
                    
                    if total_time <= seconds:
                        left = mid_k + 1
                    else:
                        right = mid_k - 1
                
                total_height_reduced += right 
                
                if total_height_reduced >= mountainHeight:
                    return True
            
            return total_height_reduced >= mountainHeight
        
        l, r = 0, max(workerTimes) * mountainHeight * (mountainHeight + 1) // 2
        
        while l <= r:
            mid = (l + r) >> 1
            
            if check(mid):
                r = mid - 1
            else:
                l = mid + 1
                
        return l


Solution 2:

class Solution:
    def minNumberOfSeconds(self, mountainHeight: int, workerTimes: List[int]) -> int:
        
        def check(seconds):
            total_height_reduced = 0
            for w in workerTimes:
                # We need to solve for x such that workerTimes[i] * (x * (x + 1)) / 2 <= seconds
                # This means solving: x * (x + 1) / 2 * w <= seconds
                # => x * (x + 1) <= 2 * seconds / w
                
                # Calculate the maximum `x` (height) a worker can reduce within `seconds`
                limit = 2 * seconds / w
                discriminant = 1 + 4 * limit  # (x^2 + x) * w <= 2 * seconds
                
                if discriminant < 0:
                    continue
                
                # Solve quadratic equation: x^2 + x - 2 * seconds / w <= 0
                max_height = (-1 + sqrt(discriminant)) / 2
                
                total_height_reduced += floor(max_height)
                
                if total_height_reduced >= mountainHeight:
                    return True
            
            return total_height_reduced >= mountainHeight
        
        # Binary search to find the minimum time required
        l, r = 0, max(workerTimes) * mountainHeight * (mountainHeight + 1) // 2
        
        while l <= r:
            mid = (l + r) // 2
            
            if check(mid):
                r = mid - 1
            else:
                l = mid + 1
                
        return l


Solution 3:

class Solution:
    def minNumberOfSeconds(self, mountainHeight: int, workerTimes: List[int]) -> int:
        minHeap = []

        for i, time in enumerate(workerTimes):
            heapq.heappush(minHeap, (time, 1, i))
        
        total_time = 0

        while mountainHeight > 0:
            # Pop the worker who will finish their task the earliest
            current_time, height_reduced_by, worker_index = heapq.heappop(minHeap)
            
            # Reduce the mountain height by 1
            mountainHeight -= 1
            
            total_time = current_time
            
            # Calculate the next time this worker will finish reducing another height unit
            next_time = current_time + workerTimes[worker_index] * (height_reduced_by + 1)
            
            # Push the updated worker with their next task time back into the heap
            heapq.heappush(minHeap, (next_time, height_reduced_by + 1, worker_index))
        
        return total_time