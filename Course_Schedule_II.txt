210. Course Schedule II
Medium
9.5K
300
Companies
There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.

For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.
Return the ordering of courses you should take to finish all courses. If there are many valid answers, return any of them. If it is impossible to finish all courses, return an empty array.

 

Example 1:

Input: numCourses = 2, prerequisites = [[1,0]]
Output: [0,1]
Explanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is [0,1].
Example 2:

Input: numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]]
Output: [0,2,1,3]
Explanation: There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0.
So one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3].
Example 3:

Input: numCourses = 1, prerequisites = []
Output: [0]
 

Constraints:

1 <= numCourses <= 2000
0 <= prerequisites.length <= numCourses * (numCourses - 1)
prerequisites[i].length == 2
0 <= ai, bi < numCourses
ai != bi
All the pairs [ai, bi] are distinct.


Solution 1:

class Solution:
    def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:

        adj = {i: [] for i in range(numCourses)}
        inDegree = [0] * numCourses
        res = []

        for c, p in prerequisites:
            adj[p].append(c)
            inDegree[c] += 1

        q = deque()

        for i in range(numCourses):
            if inDegree[i] == 0:
                q.append(i)

        while q:
            curr = q.popleft()
            res.append(curr)

            for nei in adj[curr]:
                inDegree[nei] -= 1

                if inDegree[nei] == 0:
                    q.append(nei)

        if len(res) != numCourses:
            return []

        return res


Solution 2:

class Solution:
    def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:

        adj = {i: [] for i in range(numCourses)}
        visited = set() 
        path = set()
        res = []

        for c, p in prerequisites:
            adj[c].append(p)

        def dfs(crs):
            if crs in path:
                return False

            if crs in visited:
                return True

            path.add(crs)

            for pre in adj[crs]:
                if not dfs(pre):
                    return False

            path.remove(crs)
            visited.add(crs)
            res.append(crs)

            return True

        

        for i in range(numCourses):
            if not dfs(i):
                return []
        
        return res


Solution 3:

class Solution:
    def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:

        adj = {i: [] for i in range(numCourses)}
        visited = [0] * numCourses
        res = []

        for c, p in prerequisites:
            adj[c].append(p)

        def dfs(crs):
            if visited[crs] == -1:
                return False

            if visited[crs] == 1:
                return True

            visited[crs] = -1

            for pre in adj[crs]:
                if not dfs(pre):
                    return False

            visited[crs] = 1
            res.append(crs)

            return True

        for i in range(numCourses):
            if not dfs(i):
                return []

        return res