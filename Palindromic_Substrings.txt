647. Palindromic Substrings
Medium
9K
189
Companies
Given a string s, return the number of palindromic substrings in it.

A string is a palindrome when it reads the same backward as forward.

A substring is a contiguous sequence of characters within the string.

 

Example 1:

Input: s = "abc"
Output: 3
Explanation: Three palindromic strings: "a", "b", "c".
Example 2:

Input: s = "aaa"
Output: 6
Explanation: Six palindromic strings: "a", "a", "a", "aa", "aa", "aaa".
 

Constraints:

1 <= s.length <= 1000
s consists of lowercase English letters.


Solution 1:

class Solution:
    def countSubstrings(self, s: str) -> int:
        n = len(s)
        dp = [[-1] * n for _ in range(n)]
        
        def is_palindrome(i, j):
            if i >= j:
                return True
                
            if dp[i][j] != -1:
                return dp[i][j]
            
            dp[i][j] = s[i] == s[j] and is_palindrome(i + 1, j - 1)
            return dp[i][j]

        res = 0
        for i in range(n):
            for j in range(i, n):
                if is_palindrome(i, j):
                    res += 1
        return res


Solution 2:

class Solution:
    def countSubstrings(self, s: str) -> int:
        n = len(s)
        dp = [[False] * n for _ in range(n)]

        for i in range(n):
            dp[i][i] = True
            if i < n - 1 and s[i] == s[i + 1]:
                dp[i][i + 1] = True

        for l in range(3, n + 1):
            for i in range(n - l + 1):
                j = i + l - 1
                dp[i][j] = s[i] == s[j] and dp[i + 1][j - 1]

        count = 0
        for i in range(n):
            for j in range(i, n):
                if dp[i][j]:
                    count += 1

        return count


Solution 3:

class Solution:
    def countSubstrings(self, s: str) -> int:
        n = len(s)
        count = 0

        for i in range(n):
            l = r = i
            while l>=0 and r<n and s[l]==s[r]:
                count+=1
                l-=1
                r+=1

            l, r = i, i+1
            while l>=0 and r<n and s[l]==s[r]:
                count+=1
                l-=1
                r+=1

        return count


Solution 4:

class Solution:
    def countSubstrings(self, s: str) -> int:
        n = len(s)
        count = 0

        def countPalindrome(l, r):
            while l>=0 and r<n and s[l]==s[r]:
                nonlocal count
                count+=1
                l-=1
                r+=1

        for i in range(n):
            countPalindrome(i, i)
            countPalindrome(i, i+1)

        return count