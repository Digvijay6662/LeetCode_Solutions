312. Burst Balloons
Hard
8.1K
204
Companies
You are given n balloons, indexed from 0 to n - 1. Each balloon is painted with a number on it represented by an array nums. You are asked to burst all the balloons.

If you burst the ith balloon, you will get nums[i - 1] * nums[i] * nums[i + 1] coins. If i - 1 or i + 1 goes out of bounds of the array, then treat it as if there is a balloon with a 1 painted on it.

Return the maximum coins you can collect by bursting the balloons wisely.

 

Example 1:

Input: nums = [3,1,5,8]
Output: 167
Explanation:
nums = [3,1,5,8] --> [3,5,8] --> [3,8] --> [8] --> []
coins =  3*1*5    +   3*5*8   +  1*3*8  + 1*8*1 = 167
Example 2:

Input: nums = [1,5]
Output: 10
 

Constraints:

n == nums.length
1 <= n <= 300
0 <= nums[i] <= 100


Solution 1:

class Solution:
    def maxCoins(self, nums: List[int]) -> int:
        n = len(nums)
        nums = [1] + nums + [1]
        dp = [[-1] * (n + 1) for _ in range(n + 1)]
        
        def solve(l, r):
            if l > r:
                return 0

            if dp[l][r] != -1:
                return dp[l][r]
                
            ans = 0
            for k in range(l, r + 1):
                cost = nums[l - 1] * nums[k] * nums[r + 1] + solve(l, k - 1) + solve(k + 1, r)
                ans = max(ans, cost)

            dp[l][r] = ans
            return ans

        return solve(1, n)



Solution 2:

class Solution:
    def maxCoins(self, nums: List[int]) -> int:
        n = len(nums)
        nums = [1] + nums + [1]
        dp = [[0] * (n + 2) for _ in range(n + 2)]

        
        for i in range(n, -1, -1):
            for j in range(n + 1):
                if i > j:
                    continue
                for k in range(i, j + 1):
                    cost = nums[i - 1] * nums[k] * nums[j + 1] + dp[i][k - 1] + dp[k + 1][j]
                    dp[i][j] = max(dp[i][j], cost)


        return dp[1][n]


Solution 3:

class Solution:
    def maxCoins(self, nums: List[int]) -> int:
        n = len(nums)
        nums = [1] + nums + [1]

        dp = [[0] * (n + 2) for _ in range(n + 2)]

        for length in range(1, n + 1):
            for l in range(1, n - length + 2):
                r = l + length - 1
                for i in range(l, r + 1):
                    dp[l][r] = max(dp[l][r], nums[l - 1] * nums[i] * nums[r + 1] + dp[l][i - 1] + dp[i + 1][r])

        return dp[1][n]

