132. Palindrome Partitioning II
Solved
Hard
Topics
Companies
Given a string s, partition s such that every 
substring
 of the partition is a 
palindrome
.

Return the minimum cuts needed for a palindrome partitioning of s.

 

Example 1:

Input: s = "aab"
Output: 1
Explanation: The palindrome partitioning ["aa","b"] could be produced using 1 cut.
Example 2:

Input: s = "a"
Output: 0
Example 3:

Input: s = "ab"
Output: 1
 

Constraints:

1 <= s.length <= 2000
s consists of lowercase English letters only.


Solution 1:

class Solution:
    def minCut(self, s: str) -> int:
        n = len(s)
        is_palindrome = [[False] * n for _ in range(n)]

        for i in range(n):
            is_palindrome[i][i] = True
            if i < n - 1 and s[i] == s[i + 1]:
                is_palindrome[i][i + 1] = True

        for length in range(3, n + 1):
            for i in range(n - length + 1):
                j = i + length - 1
                is_palindrome[i][j] = is_palindrome[i + 1][j - 1] and s[i] == s[j]

        dp = [-1 for _ in range(n)]
        minCost = float('inf')
        
        def solve(i):
            nonlocal minCost
            if i == n:
                return 0

            if dp[i] != -1:
                return dp[i]

            for j in range(i, n):
                if is_palindrome[i][j]:
                    minCost = min(minCost, 1 + solve(j + 1))

            dp[i] = minCost
            return minCost

        return solve(0) - 1


Solution 2:

class Solution:
    def minCut(self, s: str) -> int:
        n = len(s)
        is_palindrome = [[False] * n for _ in range(n)]

        for i in range(n):
            is_palindrome[i][i] = True
            if i < n - 1 and s[i] == s[i + 1]:
                is_palindrome[i][i + 1] = True

        for length in range(3, n + 1):
            for i in range(n - length + 1):
                j = i + length - 1
                is_palindrome[i][j] = is_palindrome[i + 1][j - 1] and s[i] == s[j]

        dp = [float('inf') for _ in range(n + 1)]
        dp[n] = 0

        for i in range(n - 1, -1, -1):
            for j in range(i, n):
                if is_palindrome[i][j]:
                    dp[i] = min(dp[i], 1 + dp[j + 1])
                    
        return dp[0] - 1