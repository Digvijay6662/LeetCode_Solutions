2812. Find the Safest Path in a Grid
Medium
291
42
Companies
You are given a 0-indexed 2D matrix grid of size n x n, where (r, c) represents:

A cell containing a thief if grid[r][c] = 1
An empty cell if grid[r][c] = 0
You are initially positioned at cell (0, 0). In one move, you can move to any adjacent cell in the grid, including cells containing thieves.

The safeness factor of a path on the grid is defined as the minimum manhattan distance from any cell in the path to any thief in the grid.

Return the maximum safeness factor of all paths leading to cell (n - 1, n - 1).

An adjacent cell of cell (r, c), is one of the cells (r, c + 1), (r, c - 1), (r + 1, c) and (r - 1, c) if it exists.

The Manhattan distance between two cells (a, b) and (x, y) is equal to |a - x| + |b - y|, where |val| denotes the absolute value of val.

 

Example 1:


Input: grid = [[1,0,0],[0,0,0],[0,0,1]]
Output: 0
Explanation: All paths from (0, 0) to (n - 1, n - 1) go through the thieves in cells (0, 0) and (n - 1, n - 1).
Example 2:


Input: grid = [[0,0,1],[0,0,0],[0,0,0]]
Output: 2
Explanation: The path depicted in the picture above has a safeness factor of 2 since:
- The closest cell of the path to the thief at cell (0, 2) is cell (0, 0). The distance between them is | 0 - 0 | + | 0 - 2 | = 2.
It can be shown that there are no other paths with a higher safeness factor.
Example 3:


Input: grid = [[0,0,0,1],[0,0,0,0],[0,0,0,0],[1,0,0,0]]
Output: 2
Explanation: The path depicted in the picture above has a safeness factor of 2 since:
- The closest cell of the path to the thief at cell (0, 3) is cell (1, 2). The distance between them is | 0 - 1 | + | 3 - 2 | = 2.
- The closest cell of the path to the thief at cell (3, 0) is cell (3, 2). The distance between them is | 3 - 3 | + | 0 - 2 | = 2.
It can be shown that there are no other paths with a higher safeness factor.
 

Constraints:

1 <= grid.length == n <= 400
grid[i].length == n
grid[i][j] is either 0 or 1.
There is at least one thief in the grid.


Solution 1:

class Solution:
    def maximumSafenessFactor(self, grid: List[List[int]]) -> int:
        n = len(grid)
        if grid[0][0] == 1 or grid[n - 1][n - 1] == 1:
            return 0

        dist = [[0] * n for _ in range(n)]
        directions = [(0, 1),  (0, -1), (-1, 0), (1, 0)]

        q = deque()
        visited = set()

        for i in range(n):
            for j in range(n):
                if grid[i][j] == 1:
                    q.append((i, j))
                    visited.add((i, j))

        length = 1
        while q:
            for _ in range(len(q)):
                r, c = q.popleft()
                for dr, dc in directions:
                    nr, nc = r + dr, c + dc
                    if 0 <= nr < n and 0 <= nc < n and (nr, nc) not in visited:
                        dist[nr][nc] = length
                        visited.add((nr, nc))
                        q.append((nr, nc))
            length += 1

        def isSafe(safeDist):
            q = deque()
            if dist[0][0] < safeDist or dist[n - 1][n - 1] < safeDist:
                return False
            q.append((0, 0))
            visited = set()
            visited.add((0, 0))
            while q:
                r, c = q.popleft()
                if r == n - 1 and c == n - 1:
                    return True
                for dr, dc in directions:
                    nr, nc = r + dr, c + dc
                    if 0 <= nr < n and 0 <= nc < n and (nr, nc) not in visited and dist[nr][nc] >= safeDist:
                        visited.add((nr, nc))
                        q.append((nr, nc))

            return False

        low, high = 0, length 
        res = 0

        while low <= high:
            mid = low + (high - low)//2
            if isSafe(mid):
                res = mid
                low = mid + 1
            else:
                high = mid - 1

        return res



Solution 2:

class Solution:
    def maximumSafenessFactor(self, grid: List[List[int]]) -> int:
        n = len(grid)
        if grid[0][0] == 1 or grid[n - 1][n - 1] == 1:
            return 0

        dist = [[0] * n for _ in range(n)]
        directions = [(0, 1),  (0, -1), (-1, 0), (1, 0)]

        q = deque()
        visited = [[False] * n for _ in range(n)]

        for i in range(n):
            for j in range(n):
                if grid[i][j] == 1:
                    q.append((i, j))
                    visited[i][j] = True

        length = 1
        while q:
            for _ in range(len(q)):
                r, c = q.popleft()
                for dr, dc in directions:
                    nr, nc = r + dr, c + dc
                    if 0 <= nr < n and 0 <= nc < n and not visited[nr][nc]:
                        dist[nr][nc] = length
                        visited[nr][nc] = True
                        q.append((nr, nc))
            length += 1

        def isSafe(safeDist):
            q = deque()
            if dist[0][0] < safeDist or dist[n - 1][n - 1] < safeDist:
                return False
            q.append((0, 0))
            visited = [[False] * n for _ in range(n)]
            visited[0][0] = True
            while q:
                r, c = q.popleft()
                if r == n - 1 and c == n - 1:
                    return True
                for dr, dc in directions:
                    nr, nc = r + dr, c + dc
                    if 0 <= nr < n and 0 <= nc < n and not visited[nr][nc] and dist[nr][nc] >= safeDist:
                        visited[nr][nc] = True
                        q.append((nr, nc))

            return False

        low, high = 0, length
        res = 0

        while low <= high:
            mid = low + (high - low)//2
            if isSafe(mid):
                res = mid
                low = mid + 1
            else:
                high = mid - 1

        return res

