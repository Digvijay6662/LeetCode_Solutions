3265. Count Almost Equal Pairs I
Solved
Medium
Companies
Hint
You are given an array nums consisting of positive integers.

We call two integers x and y in this problem almost equal if both integers can become equal after performing the following operation at most once:

Choose either x or y and swap any two digits within the chosen number.
Return the number of indices i and j in nums where i < j such that nums[i] and nums[j] are almost equal.

Note that it is allowed for an integer to have leading zeros after performing an operation.

 

Example 1:

Input: nums = [3,12,30,17,21]

Output: 2

Explanation:

The almost equal pairs of elements are:

3 and 30. By swapping 3 and 0 in 30, you get 3.
12 and 21. By swapping 1 and 2 in 12, you get 21.
Example 2:

Input: nums = [1,1,1,1,1]

Output: 10

Explanation:

Every two elements in the array are almost equal.

Example 3:

Input: nums = [123,231]

Output: 0

Explanation:

We cannot swap any two digits of 123 or 231 to reach the other.

 

Constraints:

2 <= nums.length <= 100
1 <= nums[i] <= 106


Solution 1:

class Solution:
    def countPairs(self, nums: List[int]) -> int:
        def check(n1, n2):
            if n1 == n2:
                return True
                
            s1 = str(n1)
            s2 = str(n2)
            
            if len(s1) > len(s2):
                s2 = '0' * (len(s1) - len(s2)) + s2
            else:
                s1 = '0' * (len(s2) - len(s1)) + s1
             
            diff = []
            for i in range(len(s1)):
                if s1[i] != s2[i]:
                    diff.append(i)
                    
            if len(diff) != 2:
                return False
            
            return s1[diff[0]] == s2[diff[1]] and s1[diff[1]] == s2[diff[0]]
            
        n = len(nums)
        result = 0
        
        for i in range(n):
            for j in range(i + 1, n):
                if check(nums[i], nums[j]):
                    result += 1
                    
        return result


Solution 2:

class Solution:
    def countPairs(self, nums: List[int]) -> int:
        n = len(nums)
        max_val = max(nums)
        digits = len(str(max_val))

        def getCandidates(num):
            candidates = set()
            if len(num) < digits:
                num = '0'* (digits - len(num)) + num

            candidates.add(num)
            num_list = list(num)

            for i in range(digits):
                for j in range(i + 1, digits):
                    num_list[i], num_list[j] = num_list[j], num_list[i] 
                    candidates.add(''.join(num_list)) 
                    num_list[i], num_list[j] = num_list[j], num_list[i]

            return candidates

        result = 0
        count = defaultdict(int)
        count[nums[0]] += 1

        for i in range(1, n):
            candidates = getCandidates(str(nums[i]))
            for val in candidates:
                val = int(val)
                if val in count:
                    result += count[val]
            count[nums[i]] += 1
        
        return result