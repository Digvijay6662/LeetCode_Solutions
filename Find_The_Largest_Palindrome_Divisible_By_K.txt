3260. Find the Largest Palindrome Divisible by K
Solved
Hard
Topics
Companies
Hint
You are given two positive integers n and k.

An integer x is called k-palindromic if:

x is a 
palindrome
.
x is divisible by k.
Return the largest integer having n digits (as a string) that is k-palindromic.

Note that the integer must not have leading zeros.

 

Example 1:

Input: n = 3, k = 5

Output: "595"

Explanation:

595 is the largest k-palindromic integer with 3 digits.

Example 2:

Input: n = 1, k = 4

Output: "8"

Explanation:

4 and 8 are the only k-palindromic integers with 1 digit.

Example 3:

Input: n = 5, k = 6

Output: "89898"

 

Constraints:

1 <= n <= 105
1 <= k <= 9


Solution 1:

class Solution:
    def largestPalindrome(self, n: int, k: int) -> str:

        def is_divisible_by_7(num):
            n = len(num)
            if n == 0 and num[0] == '\n':
                return 1
        
            if n % 3 == 1:
                num = "00" + num 
                n += 2
            
            elif n % 3 == 2:
                num = "0" + num 
                n += 1
        
            group_sum = 0
            sign = 1
            i = n - 1
            while i >= 0:
                group = 0
                group += ord(num[i]) - ord('0')
                i -= 1
                group += (ord(num[i]) - ord('0')) * 10
                i -= 1
                group += (ord(num[i]) - ord('0')) * 100
                group_sum += group * sign
                sign *= (-1)
                i -= 1
        
            return group_sum % 7 == 0

        if k in [1, 3, 9]:
            return "9" * n
        elif k == 2:
            if n <= 2:
                return "8" * n
            return "8" + "9" * (n - 2) + "8"
        elif k == 4:
            if n <= 4:
                return "8" * n
            return "88" + "9" * (n - 4) + "88"
        elif k == 5:
            if n <= 2:
                return "5" * n
            return "5" + "9" * (n - 2) + "5"
        elif k == 8:
            if n <= 6:
                return "8" * n
            return "888" + "9" * (n - 6) + "888"
        elif k == 6:
            if n <= 2:
                return "6" * n
            if n % 2 == 0:
                return "8" + "9" * ((n - 4) // 2) + "77" + "9" * ((n - 4) // 2) + "8"
            else:
                return "8" + "9" * ((n - 3) // 2) + "8" + "9" * ((n - 3) // 2) + "8"
        elif k == 7:
            if n <= 2:
                return "7" * n
            if n % 2 == 0:
                for digit in range(9, -1, -1):
                    num = "9" * ((n - 2) // 2) + str(digit) * 2 + "9" * ((n - 2) // 2)
                    if is_divisible_by_7(num):
                        return num
            else:
                for digit in range(9, -1, -1):
                    num = "9" * ((n - 1) // 2) + str(digit) + "9" * ((n - 1) // 2)
                    if is_divisible_by_7(num):
                        return num


Solution 2:

class Solution:
    def largestPalindrome(self, n: int, k: int) -> str:

        def is_divisible_by_7(num):
            mod = 0
            for digit in num:
                mod = (mod * 10 + int(digit)) % 7
            return mod == 0

        if k in [1, 3, 9]:
            return "9" * n
        elif k == 2:
            if n <= 2:
                return "8" * n
            return "8" + "9" * (n - 2) + "8"
        elif k == 4:
            if n <= 4:
                return "8" * n
            return "88" + "9" * (n - 4) + "88"
        elif k == 5:
            if n <= 2:
                return "5" * n
            return "5" + "9" * (n - 2) + "5"
        elif k == 8:
            if n <= 6:
                return "8" * n
            return "888" + "9" * (n - 6) + "888"
        elif k == 6:
            if n <= 2:
                return "6" * n
            if n % 2 == 0:
                return "8" + "9" * ((n - 4) // 2) + "77" + "9" * ((n - 4) // 2) + "8"
            else:
                return "8" + "9" * ((n - 3) // 2) + "8" + "9" * ((n - 3) // 2) + "8"
        elif k == 7:
            if n <= 2:
                return "7" * n
            if n % 2 == 0:
                for digit in range(9, -1, -1):
                    num = "9" * ((n - 2) // 2) + str(digit) * 2 + "9" * ((n - 2) // 2)
                    if is_divisible_by_7(num):
                        return num
            else:
                for digit in range(9, -1, -1):
                    num = "9" * ((n - 1) // 2) + str(digit) + "9" * ((n - 1) // 2)
                    if is_divisible_by_7(num):
                        return num