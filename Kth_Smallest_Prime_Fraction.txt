786. K-th Smallest Prime Fraction
Solved
Medium
Topics
Companies
You are given a sorted integer array arr containing 1 and prime numbers, where all the integers of arr are unique. You are also given an integer k.

For every i and j where 0 <= i < j < arr.length, we consider the fraction arr[i] / arr[j].

Return the kth smallest fraction considered. Return your answer as an array of integers of size 2, where answer[0] == arr[i] and answer[1] == arr[j].

 

Example 1:

Input: arr = [1,2,3,5], k = 3
Output: [2,5]
Explanation: The fractions to be considered in sorted order are:
1/5, 1/3, 2/5, 1/2, 3/5, and 2/3.
The third fraction is 2/5.
Example 2:

Input: arr = [1,7], k = 1
Output: [1,7]
 

Constraints:

2 <= arr.length <= 1000
1 <= arr[i] <= 3 * 104
arr[0] == 1
arr[i] is a prime number for i > 0.
All the numbers of arr are unique and sorted in strictly increasing order.
1 <= k <= arr.length * (arr.length - 1) / 2
 

Follow up: Can you solve the problem with better than O(n2) complexity?


Solution 1:

class Solution:
    def kthSmallestPrimeFraction(self, arr: List[int], k: int) -> List[int]:
        n = len(arr)
        maxHeap = []

        for i in range(n):
            for j in range(i + 1, n):
                heapq.heappush(maxHeap, (-arr[i]/ arr[j], arr[i], arr[j]))

                if len(maxHeap) > k:
                    heapq.heappop(maxHeap)

        return [maxHeap[0][1], maxHeap[0][2]]


Solution 2:

class Solution:
    def kthSmallestPrimeFraction(self, arr: List[int], k: int) -> List[int]:
        n = len(arr)
        minHeap = []

        for i in range(n - 1):
            heapq.heappush(minHeap, (arr[i]/arr[n - 1], i, n - 1))

        for _ in range(k - 1):
            val, i, j = heapq.heappop(minHeap)
            if j - 1 > i:
                heapq.heappush(minHeap, (arr[i] / arr[j - 1], i, j - 1))

        return [arr[minHeap[0][1]], arr[minHeap[0][2]]]


Solution 3:

class Solution:
    def kthSmallestPrimeFraction(self, arr: List[int], k: int) -> List[int]:
        n = len(arr)
        
        def count_fractions(fraction):
            count = 0
            max_fraction = 0
            p, q = 0, 0

            j = 1
            for i in range(n - 1):
                while j < n and arr[i] >= fraction * arr[j]:
                    j += 1
                count += n - j
                if j < n and max_fraction < arr[i] / arr[j]:
                    max_fraction = arr[i] / arr[j]
                    p, q = arr[i], arr[j]

            return count, p, q

        left, right = 0, 1

        while left < right:
            mid = (left + right) / 2
            count, p, q = count_fractions(mid)

            if count == k:
                return [p, q]
            elif count < k:
                left = mid
            else:
                right = mid

        return []