1493. Longest Subarray of 1's After Deleting One Element
Medium
1.6K
31
Companies
Given a binary array nums, you should delete one element from it.

Return the size of the longest non-empty subarray containing only 1's in the resulting array. Return 0 if there is no such subarray.

 

Example 1:

Input: nums = [1,1,0,1]
Output: 3
Explanation: After deleting the number in position 2, [1,1,1] contains 3 numbers with value of 1's.
Example 2:

Input: nums = [0,1,1,1,0,1,1,0,1]
Output: 5
Explanation: After deleting the number in position 4, [0,1,1,1,1,1,0,1] longest subarray with value of 1's is [1,1,1,1,1].
Example 3:

Input: nums = [1,1,1]
Output: 2
Explanation: You must delete one element.
 

Constraints:

1 <= nums.length <= 105
nums[i] is either 0 or 1.


Solution 1:


class Solution:
    def longestSubarray(self, nums: List[int]) -> int:
        zeros = 0
        left = right = res = 0

        while right < len(nums):
            if nums[right] == 0:
                zeros += 1
            
            if zeros > 1:
                while nums[left] != 0:
                    left += 1
                left += 1
                zeros -= 1

            res = max(res, right - left)

            right += 1

        return res 


Solution 2:

class Solution:
    def longestSubarray(self, nums: List[int]) -> int:
        left = right = 0
        zeros = 1
      
        while right < len(nums):
            if nums[right] == 0:
                zeros -= 1

            if zeros < 0:
                if nums[left] == 0:
                    zeros += 1
                left += 1

            right += 1
        
        return right - left - 1