974. Subarray Sums Divisible by K
Medium
6.2K
256
Companies
Given an integer array nums and an integer k, return the number of non-empty subarrays that have a sum divisible by k.

A subarray is a contiguous part of an array.

 

Example 1:

Input: nums = [4,5,0,-2,-3,1], k = 5
Output: 7
Explanation: There are 7 subarrays with a sum divisible by k = 5:
[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]
Example 2:

Input: nums = [5], k = 9
Output: 0
 

Constraints:

1 <= nums.length <= 3 * 104
-104 <= nums[i] <= 104
2 <= k <= 104


Solution 1:

class Solution:
    def subarraysDivByK(self, nums: List[int], k: int) -> int:
        n = len(nums)
        prefixSum = 0
        remMap = {0: 1}
        count = 0

        for num in nums:
            prefixSum += num
            remainder = prefixSum % k
            remainder = (remainder + k) % k

            count += remMap.get(remainder, 0)

            if remainder not in remMap:
                remMap[remainder] = 1
            else:
                remMap[remainder] += 1

        return count


Solution 2:


class Solution:
    def subarraysDivByK(self, nums: List[int], k: int) -> int:
        n = len(nums)
        prefixSum = 0
        remainderCounts = [0] * k
        remainderCounts[0] = 1
        count = 0

        for num in nums:
            prefixSum += num
            remainder = prefixSum % k
            remainder = (remainder + k) % k

            count += remainderCounts[remainder]

            remainderCounts[remainder] += 1

        return count