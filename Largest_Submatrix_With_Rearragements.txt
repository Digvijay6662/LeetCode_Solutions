1727. Largest Submatrix With Rearrangements
Solved
Medium
Topics
Companies
Hint
You are given a binary matrix matrix of size m x n, and you are allowed to rearrange the columns of the matrix in any order.

Return the area of the largest submatrix within matrix where every element of the submatrix is 1 after reordering the columns optimally.

 

Example 1:


Input: matrix = [[0,0,1],[1,1,1],[1,0,1]]
Output: 4
Explanation: You can rearrange the columns as shown above.
The largest submatrix of 1s, in bold, has an area of 4.
Example 2:


Input: matrix = [[1,0,1,0,1]]
Output: 3
Explanation: You can rearrange the columns as shown above.
The largest submatrix of 1s, in bold, has an area of 3.
Example 3:

Input: matrix = [[1,1,0],[1,0,1]]
Output: 2
Explanation: Notice that you must rearrange entire columns, and there is no way to make a submatrix of 1s larger than an area of 2.
 

Constraints:

m == matrix.length
n == matrix[i].length
1 <= m * n <= 105
matrix[i][j] is either 0 or 1.


Solution 1:

class Solution:
    def largestSubmatrix(self, matrix: List[List[int]]) -> int:
        rows, cols = len(matrix), len(matrix[0])
        prevRow = [0] * cols
        maxArea = 0

        for i in range(rows):
            currRow = [0] * cols
            for j in range(cols):
                if matrix[i][j] == 1:
                    currRow[j] = prevRow[j] + 1
            
            sorted_row = sorted(currRow, reverse = True)

            for k in range(cols):
                maxArea = max(maxArea, sorted_row[k] * (k + 1))

            prevRow = currRow

        return maxArea
        

Solution 2:

class Solution:
    def largestSubmatrix(self, matrix: List[List[int]]) -> int:
        rows, cols = len(matrix), len(matrix[0])
        height = [0] * cols
        maxArea = 0

        for i in range(rows):
            for j in range(cols):
                height[j] = height[j] + 1 if matrix[i][j] == 1 else 0

            sorted_height = sorted(height, reverse=True)

            for k in range(cols):
                maxArea = max(maxArea, sorted_height[k] * (k + 1))

        return maxArea


Solution 3:

class Solution:
    def largestSubmatrix(self, matrix: List[List[int]]) -> int:
        rows, cols = len(matrix), len(matrix[0])
        prevHeights = []
        maxArea = 0

        for i in range(rows):
            currHeights = []
            visited = set()

            for h, c in prevHeights:
                if matrix[i][c] == 1:
                    currHeights.append([h + 1, c])
                    visited.add(c)

            for j in range(cols):
                if j not in visited and matrix[i][j] == 1:
                    currHeights.append([1, j])

            for k in range(len(currHeights)):
                maxArea = max(maxArea, currHeights[k][0] * (k + 1))

            prevHeights = currHeights

        return maxArea

