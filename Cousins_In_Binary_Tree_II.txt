2641. Cousins in Binary Tree II
Solved
Medium
Topics
Companies
Hint
Given the root of a binary tree, replace the value of each node in the tree with the sum of all its cousins' values.

Two nodes of a binary tree are cousins if they have the same depth with different parents.

Return the root of the modified tree.

Note that the depth of a node is the number of edges in the path from the root node to it.

 

Example 1:


Input: root = [5,4,9,1,10,null,7]
Output: [0,0,0,7,7,null,11]
Explanation: The diagram above shows the initial binary tree and the binary tree after changing the value of each node.
- Node with value 5 does not have any cousins so its sum is 0.
- Node with value 4 does not have any cousins so its sum is 0.
- Node with value 9 does not have any cousins so its sum is 0.
- Node with value 1 has a cousin with value 7 so its sum is 7.
- Node with value 10 has a cousin with value 7 so its sum is 7.
- Node with value 7 has cousins with values 1 and 10 so its sum is 11.
Example 2:


Input: root = [3,1,2]
Output: [0,0,0]
Explanation: The diagram above shows the initial binary tree and the binary tree after changing the value of each node.
- Node with value 3 does not have any cousins so its sum is 0.
- Node with value 1 does not have any cousins so its sum is 0.
- Node with value 2 does not have any cousins so its sum is 0.
 

Constraints:

The number of nodes in the tree is in the range [1, 105].
1 <= Node.val <= 104


Solution 1:

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def replaceValueInTree(self, root: Optional[TreeNode]) -> Optional[TreeNode]:
        level_sum = defaultdict(int)

        def depthSum(node, depth):
            if not node:
                return
            level_sum[depth] += node.val
            depthSum(node.left, depth + 1)
            depthSum(node.right, depth + 1)

        depthSum(root, 0)

        def fillTree(node, depth, curr_sum):
            if not node:
                return
            node.val = curr_sum
            if depth + 1 in level_sum:
                child_sum = level_sum[depth + 1]
                if node.left:
                    child_sum -= node.left.val
                if node.right:
                    child_sum -= node.right.val
                fillTree(node.left, depth + 1, child_sum)
                fillTree(node.right, depth + 1, child_sum)

        fillTree(root, 0, 0)
        return root


Solution 2:

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def replaceValueInTree(self, root: Optional[TreeNode]) -> Optional[TreeNode]:
        if not root:
            return root

        level_sum = defaultdict(int)
        q = deque([(root, 0)])
        
        while q:
            node, level = q.popleft()
            level_sum[level] += node.val
            
            if node.left:
                q.append((node.left, level + 1))
            if node.right:
                q.append((node.right, level + 1))

        q = deque([(root, 0, 0)])
        
        while q:
            node, level, parent_sibling_sum = q.popleft()
            sibling_sum = 0
            
            if node.left:
                sibling_sum += node.left.val
            if node.right:
                sibling_sum += node.right.val

            node.val = parent_sibling_sum

            if node.left:
                q.append((node.left, level + 1, level_sum[level + 1] - sibling_sum))
            if node.right:
                q.append((node.right, level + 1, level_sum[level + 1] - sibling_sum))

        return root


Solution 3:

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def replaceValueInTree(self, root: Optional[TreeNode]) -> Optional[TreeNode]:
        if not root:
            return root

        q = deque([root])
        level_sum = root.val

        while q:
            next_level_sum = 0
            for _ in range(len(q)):
                node = q.popleft()
                node.val = level_sum - node.val

                sibling_sum = 0
                if node.left:
                    sibling_sum += node.left.val

                if node.right:
                    sibling_sum += node.right.val

                if node.left:
                    next_level_sum += node.left.val
                    node.left.val = sibling_sum
                    q.append(node.left)

                if node.right:
                    next_level_sum += node.right.val
                    node.right.val = sibling_sum
                    q.append(node.right)

            level_sum = next_level_sum
            
        return root
