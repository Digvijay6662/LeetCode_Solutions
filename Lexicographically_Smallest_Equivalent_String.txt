1061. Lexicographically Smallest Equivalent String
Solved
Medium
Topics
Companies
Hint
You are given two strings of the same length s1 and s2 and a string baseStr.

We say s1[i] and s2[i] are equivalent characters.

For example, if s1 = "abc" and s2 = "cde", then we have 'a' == 'c', 'b' == 'd', and 'c' == 'e'.
Equivalent characters follow the usual rules of any equivalence relation:

Reflexivity: 'a' == 'a'.
Symmetry: 'a' == 'b' implies 'b' == 'a'.
Transitivity: 'a' == 'b' and 'b' == 'c' implies 'a' == 'c'.
For example, given the equivalency information from s1 = "abc" and s2 = "cde", "acd" and "aab" are equivalent strings of baseStr = "eed", and "aab" is the lexicographically smallest equivalent string of baseStr.

Return the lexicographically smallest equivalent string of baseStr by using the equivalency information from s1 and s2.

 

Example 1:

Input: s1 = "parker", s2 = "morris", baseStr = "parser"
Output: "makkek"
Explanation: Based on the equivalency information in s1 and s2, we can group their characters as [m,p], [a,o], [k,r,s], [e,i].
The characters in each group are equivalent and sorted in lexicographical order.
So the answer is "makkek".
Example 2:

Input: s1 = "hello", s2 = "world", baseStr = "hold"
Output: "hdld"
Explanation: Based on the equivalency information in s1 and s2, we can group their characters as [h,w], [d,e,o], [l,r].
So only the second letter 'o' in baseStr is changed to 'd', the answer is "hdld".
Example 3:

Input: s1 = "leetcode", s2 = "programs", baseStr = "sourcecode"
Output: "aauaaaaada"
Explanation: We group the equivalent characters in s1 and s2 as [a,o,e,r,s,c], [l,p], [g,t] and [d,m], thus all letters in baseStr except 'u' and 'd' are transformed to 'a', the answer is "aauaaaaada".
 

Constraints:

1 <= s1.length, s2.length, baseStr <= 1000
s1.length == s2.length
s1, s2, and baseStr consist of lowercase English letters.


Solution 1:

class UnionFind:
    def __init__(self):
        self.parent = {chr(i + 97): chr(i + 97) for i in range(26)}

    def find(self, node):
        while node != self.parent[node]:
            self.parent[node] = self.parent[self.parent[node]]
            node = self.parent[node]
        return node

    def union(self, node1, node2):
        p1, p2 = self.find(node1), self.find(node2)
        if p1 == p2:
            return False

        if self.parent[p1] > self.parent[p2]:
            self.parent[p1] = p2
        else:
            self.parent[p2] = p1

        return True

class Solution:
    def smallestEquivalentString(self, s1: str, s2: str, baseStr: str) -> str:
        n = len(s1)
        uf = UnionFind()

        for i in range(n):
            uf.union(s1[i], s2[i])

        result = []
        for ch in baseStr:
            result.append(uf.find(ch))

        return "".join(result)


Solution 2:

class Solution:
    def smallestEquivalentString(self, s1: str, s2: str, baseStr: str) -> str:
        parent = {}

        def find(x):
            if x not in parent:
                parent[x] = x
                return x
            if parent[x] != x:
                parent[x] = find(parent[x])
            return parent[x]

        def union(x, y):
            rootX = find(x)
            rootY = find(y)
            if rootX < rootY:
                parent[rootY] = rootX
            else:
                parent[rootX] = rootY

        n = len(s1)
        for i in range(n):
            union(s1[i], s2[i])

        result = []
        for ch in baseStr:
            result.append(find(ch))

        return "".join(result)


Solution 3:

class Solution:
    def smallestEquivalentString(self, s1: str, s2: str, baseStr: str) -> str:
        char_map = [chr(i + ord('a')) for i in range(26)]

        for a, b in zip(s1, s2):
            to_replace = max(char_map[ord(a) - ord('a')], char_map[ord(b) - ord('a')])
            replace_with = min(char_map[ord(a) - ord('a')], char_map[ord(b) - ord('a')])
            for i in range(26):
                if char_map[i] == to_replace:
                    char_map[i] = replace_with

        return ''.join(char_map[ord(c) - ord('a')] for c in baseStr)