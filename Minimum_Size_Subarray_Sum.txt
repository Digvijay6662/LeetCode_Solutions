209. Minimum Size Subarray Sum
Medium
9.8K
278
Companies
Given an array of positive integers nums and a positive integer target, return the minimal length of a 
subarray
 whose sum is greater than or equal to target. If there is no such subarray, return 0 instead.

 

Example 1:

Input: target = 7, nums = [2,3,1,2,4,3]
Output: 2
Explanation: The subarray [4,3] has the minimal length under the problem constraint.
Example 2:

Input: target = 4, nums = [1,4,4]
Output: 1
Example 3:

Input: target = 11, nums = [1,1,1,1,1,1,1,1]
Output: 0
 

Constraints:

1 <= target <= 109
1 <= nums.length <= 105
1 <= nums[i] <= 104
 

Follow up: If you have figured out the O(n) solution, try coding another solution of which the time complexity is O(n log(n)).


Solution 1:

class Solution:
    def minSubArrayLen(self, target: int, nums: List[int]) -> int:
        left, right = 0, 0
        n = len(nums)
        total = 0
        res = float('inf')

        while right < n:
            total += nums[right]
            
            while total >= target:
                res = min(res, right - left + 1)
                total -= nums[left]
                left += 1

            right += 1

        return res if res != float('inf') else 0


Solution 2:

class Solution:
    def minSubArrayLen(self, target: int, nums: List[int]) -> int:
        n = len(nums)
        prefix = [0] * (n + 1)
        res = float('inf')

        for i in range(1, n + 1):
            prefix[i] = prefix[i - 1] + nums[i - 1]

        for i in range(1, n + 1):
            left = i
            right = n

            while left <= right:
                mid = left + (right - left) // 2
                currSum = prefix[mid] - prefix[i - 1]

                if currSum >= target:
                    res = min(res, mid - i + 1)
                    right = mid - 1
                else:
                    left = mid + 1

        return res if res != float('inf') else 0



