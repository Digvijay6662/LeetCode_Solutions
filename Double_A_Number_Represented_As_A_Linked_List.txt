2816. Double a Number Represented as a Linked List
Medium
187
1
Companies
You are given the head of a non-empty linked list representing a non-negative integer without leading zeroes.

Return the head of the linked list after doubling it.

 

Example 1:


Input: head = [1,8,9]
Output: [3,7,8]
Explanation: The figure above corresponds to the given linked list which represents the number 189. Hence, the returned linked list represents the number 189 * 2 = 378.
Example 2:


Input: head = [9,9,9]
Output: [1,9,9,8]
Explanation: The figure above corresponds to the given linked list which represents the number 999. Hence, the returned linked list reprersents the number 999 * 2 = 1998. 
 

Constraints:

The number of nodes in the list is in the range [1, 104]
0 <= Node.val <= 9
The input is generated such that the list represents a number that does not have leading zeros, except the number 0 itself.


Solution 1:

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def doubleIt(self, head: Optional[ListNode]) -> Optional[ListNode]:

        def reverse(node):
            prev = None
            curr = node

            while curr:
                nxt = curr.next
                curr.next = prev
                prev = curr
                curr = nxt

            return prev


        def solve(node):
            curr = node
            carry = 0
            prev = None
            while curr:
                value = carry +  curr.val * 2
                curr.val = value % 10
                carry = value // 10
                prev = curr
                curr = curr.next

            if carry > 0:
                temp = ListNode(carry)
                prev.next = temp

            return node

        
        head = reverse(head)
        head = solve(head)
        return reverse(head)


Solution 2:

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def doubleIt(self, head: Optional[ListNode]) -> Optional[ListNode]:

        def reverse(node):
            prev = None
            curr = node

            while curr:
                nxt = curr.next
                curr.next = prev
                prev = curr
                curr = nxt

            return prev


        def solve(node):
            curr = node
            dummy = prev = ListNode()
            carry = 0

            while curr or carry:
                if curr:
                    value = carry +  curr.val * 2
                else:
                    value = carry
    
                temp = ListNode(value % 10)
                carry = value // 10
                prev.next = temp
                prev = temp
                if curr:
                    curr = curr.next

            return dummy.next
        
        head = reverse(head)
        head = solve(head)
        return reverse(head)


Solution 3:

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def doubleIt(self, head: Optional[ListNode]) -> Optional[ListNode]:
        
        def reverse(head):
            prev = None
            curr = head
            while curr:
                nxt = curr.next
                curr.next = prev
                prev = curr
                curr = nxt
            return prev
        
        def help(head):
            carry = 0
            dummy = ListNode(0)
            curr = dummy

            while head or carry:
                val = carry
                if head:
                    val += head.val * 2
                    head = head.next

                carry = val // 10
                curr.next = ListNode(val % 10)
                curr = curr.next

            return dummy.next
        
        head = reverse(head)
        head = help(head)
        
        return reverse(head)


Solution 4:

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def doubleIt(self, head: Optional[ListNode]) -> Optional[ListNode]:
        if head.val > 4:
            head = ListNode(0, head)

        node = head
        while node:
            node.val = (node.val * 2) % 10
            if node.next and node.next.val > 4:
                node.val += 1
            
            node = node.next

        return head
