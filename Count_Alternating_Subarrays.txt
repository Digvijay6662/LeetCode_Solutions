3101. Count Alternating Subarrays
Solved
Medium
Companies
Hint
You are given a 
binary array
 nums.

We call a 
subarray
 alternating if no two adjacent elements in the subarray have the same value.

Return the number of alternating subarrays in nums.

 

Example 1:

Input: nums = [0,1,1,1]

Output: 5

Explanation:

The following subarrays are alternating: [0], [1], [1], [1], and [0,1].

Example 2:

Input: nums = [1,0,1,0]

Output: 10

Explanation:

Every subarray of the array is alternating. There are 10 possible subarrays that we can choose.

 

Constraints:

1 <= nums.length <= 105
nums[i] is either 0 or 1.


Solution 1:

class Solution:
    def countAlternatingSubarrays(self, nums: List[int]) -> int:
        n = len(nums)
        r = 0
        count = 0

        while r < n:
            l = r
            while r + 1 < n and nums[r] != nums[r + 1]:
                r += 1
            length = r - l + 1
            count += length * (length + 1)//2
            r += 1

        return count


Solution 2:

class Solution:
    def countAlternatingSubarrays(self, nums: List[int]) -> int:
        n = len(nums)
        count = length = 1

        for i in range(1, n):
            if nums[i] == nums[i - 1]:
                length = 1
            else:
                length += 1
            count += length  

        return count

