918. Maximum Sum Circular Subarray
Medium
6.1K
263
Companies
Given a circular integer array nums of length n, return the maximum possible sum of a non-empty subarray of nums.

A circular array means the end of the array connects to the beginning of the array. Formally, the next element of nums[i] is nums[(i + 1) % n] and the previous element of nums[i] is nums[(i - 1 + n) % n].

A subarray may only include each element of the fixed buffer nums at most once. Formally, for a subarray nums[i], nums[i + 1], ..., nums[j], there does not exist i <= k1, k2 <= j with k1 % n == k2 % n.

 

Example 1:

Input: nums = [1,-2,3,-2]
Output: 3
Explanation: Subarray [3] has maximum sum 3.
Example 2:

Input: nums = [5,-3,5]
Output: 10
Explanation: Subarray [5,5] has maximum sum 5 + 5 = 10.
Example 3:

Input: nums = [-3,-2,-3]
Output: -2
Explanation: Subarray [-2] has maximum sum -2.
 

Constraints:

n == nums.length
1 <= n <= 3 * 104
-3 * 104 <= nums[i] <= 3 * 104


Solution 1:

class Solution:
    def maxSubarraySumCircular(self, nums: List[int]) -> int:
        n = len(nums)
        rightMax = [0] * n
        rightMax[n - 1] = nums[n - 1]
        suffixSum = nums[n - 1]

        for i in range(n - 2, -1, -1):
            suffixSum += nums[i]
            rightMax[i] = max(rightMax[i + 1], suffixSum)

        maxSum = nums[0]
        specialSum = nums[0]
        currMax = 0
        prefixSum = 0

        for i in range(n):
            currMax = max(currMax + nums[i], nums[i])
            maxSum = max(maxSum, currMax)

            prefixSum += nums[i]
            if i + 1 < n:
                specialSum = max(specialSum, prefixSum + rightMax[i + 1])

        return max(maxSum, specialSum)


Solution 2:

class Solution:
    def maxSubarraySumCircular(self, nums: List[int]) -> int:
        total = 0
        maxSum = nums[0]
        minSum = nums[0]
        currMax = 0
        currMin = 0

        for n in nums:
            currMax = max(currMax + n, n)
            maxSum = max(maxSum, currMax)
            currMin = min(currMin + n, n)
            minSum = min(minSum, currMin)
            total += n

        return max(maxSum, total - minSum) if maxSum > 0 else maxSum
