2444. Count Subarrays With Fixed Bounds
Solved
Hard
Topics
Companies
Hint
You are given an integer array nums and two integers minK and maxK.

A fixed-bound subarray of nums is a subarray that satisfies the following conditions:

The minimum value in the subarray is equal to minK.
The maximum value in the subarray is equal to maxK.
Return the number of fixed-bound subarrays.

A subarray is a contiguous part of an array.

 

Example 1:

Input: nums = [1,3,5,2,7,5], minK = 1, maxK = 5
Output: 2
Explanation: The fixed-bound subarrays are [1,3,5] and [1,3,5,2].
Example 2:

Input: nums = [1,1,1,1], minK = 1, maxK = 1
Output: 10
Explanation: Every subarray of nums is a fixed-bound subarray. There are 10 possible subarrays.
 

Constraints:

2 <= nums.length <= 105
1 <= nums[i], minK, maxK <= 106


Solution 1:

class Solution:
    def countSubarrays(self, nums: List[int], minK: int, maxK: int) -> int:
        n = len(nums)
        last_min = last_max = -1
        l = 0
        count = 0

        for r in range(n):
            # If the current number is out of the [minK, maxK] range, reset the window
            if nums[r] < minK or nums[r] > maxK:
                l = r + 1
                last_min = last_max = -1

            # Update the last seen positions for minK and maxK
            if nums[r] == minK:
                last_min = r
            if nums[r] == maxK:
                last_max = r

            # If both minK and maxK are within the current window, update the count
            if last_min != -1 and last_max != -1:
                count += min(last_min, last_max) - l + 1

        return count
        

Solution 2:

class Solution:
    def countSubarrays(self, nums: List[int], minK: int, maxK: int) -> int:
        n = len(nums)
        min_idx = max_idx = faulty = -1
        result = r = 0

        while r < n:
            if nums[r] < minK or nums[r] > maxK:
                faulty = r

            if nums[r] == minK:
                min_idx = r
            
            if nums[r] == maxK:
                max_idx = r

            smaller = min(min_idx, max_idx)
            count = smaller - faulty

            if count > 0:
                result += count

            r += 1

        return result