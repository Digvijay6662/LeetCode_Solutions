3161. Block Placement Queries
Solved
Hard
Topics
Companies
Hint
There exists an infinite number line, with its origin at 0 and extending towards the positive x-axis.

You are given a 2D array queries, which contains two types of queries:

For a query of type 1, queries[i] = [1, x]. Build an obstacle at distance x from the origin. It is guaranteed that there is no obstacle at distance x when the query is asked.
For a query of type 2, queries[i] = [2, x, sz]. Check if it is possible to place a block of size sz anywhere in the range [0, x] on the line, such that the block entirely lies in the range [0, x]. A block cannot be placed if it intersects with any obstacle, but it may touch it. Note that you do not actually place the block. Queries are separate.
Return a boolean array results, where results[i] is true if you can place the block specified in the ith query of type 2, and false otherwise.

 

Example 1:

Input: queries = [[1,2],[2,3,3],[2,3,1],[2,2,2]]

Output: [false,true,true]

Explanation:



For query 0, place an obstacle at x = 2. A block of size at most 2 can be placed before x = 3.

Example 2:

Input: queries = [[1,7],[2,7,6],[1,2],[2,7,5],[2,7,6]]

Output: [true,true,false]

Explanation:



Place an obstacle at x = 7 for query 0. A block of size at most 7 can be placed before x = 7.
Place an obstacle at x = 2 for query 2. Now, a block of size at most 5 can be placed before x = 7, and a block of size at most 2 before x = 2.
 

Constraints:

1 <= queries.length <= 15 * 104
2 <= queries[i].length <= 3
1 <= queries[i][0] <= 2
1 <= x, sz <= min(5 * 104, 3 * queries.length)
The input is generated such that for queries of type 1, no obstacle exists at distance x when the query is asked.
The input is generated such that there is at least one query of type 2.


Solution 1:

from sortedcontainers import SortedList

class SegmentTree:
    def __init__(self, n):
        self.tree = [0] * (4 * n)

    def update(self, l, r, i, idx, val):
        if idx < l or idx > r:
            return 
    
        if l == r:
            self.tree[i] = val
            return

        m = (l + r) // 2
        if idx <= m:
            self.update(l, m, 2 * i + 1, idx, val)
        else:
            self.update(m + 1, r, 2 * i + 2, idx, val)

        self.tree[i] = max(self.tree[2 * i + 1], self.tree[2 * i + 2])

    def query(self, l, r, i, lo, hi):
        if lo > r or hi < l:
            return 0

        if l >= lo and r <= hi:
            return self.tree[i]

        m = (l + r) // 2
        left = self.query(l, m, 2 * i + 1, lo, hi)
        right = self.query(m + 1, r, 2 * i + 2, lo, hi)
        return max(left, right)

class Solution:
    def getResults(self, queries: List[List[int]]) -> List[bool]:
        n = min(50000, 3 * len(queries))
        t = SegmentTree(n)
        obstacles = SortedList([0, n])
        
        result = []
        for q in queries:
            if q[0] == 1:
                _, x = q
                idx = obstacles.bisect_left(x)
                prev_idx = obstacles[idx - 1]
                t.update(0, n - 1, 0, prev_idx, x - prev_idx)
                next_idx = obstacles[idx]
                t.update(0, n - 1, 0, x, next_idx - x)
                obstacles.add(x)
            else:
                _, x, sz = q
                idx = obstacles.bisect_left(x)
                last = x - obstacles[idx - 1]
                left_max = t.query(0, n - 1, 0, 0, obstacles[idx - 1] - 1)
                result.append(max(last, left_max) >= sz)

        return result


Solution 2:

from sortedcontainers import SortedList

class FenwickTree:
    def __init__(self, n):
        self.n = n
        self.tree = [0] * (n + 1)

    def update(self, pos, val):
        pos += 1
        while pos <= self.n:
            self.tree[pos] = max(self.tree[pos], val)
            pos += pos & -pos

    def query(self, pos):
        max_val = float('-inf')
        pos += 1
        while pos > 0:
            max_val = max(max_val, self.tree[pos])
            pos -= pos & -pos
        return max_val

class Solution:
    def getResults(self, queries: List[List[int]]) -> List[bool]:
        obstacles = SortedList()
        n = min(5 * 10 ** 4, len(queries) * 3)
        obstacles.add(0)
        obstacles.add(n)
        
        result = []
        for q in queries:
            if q[0] == 1:
                x = q[1]
                obstacles.add(x)
        
        tree = FenwickTree(n + 1)
        for i in range(1, len(obstacles)):
            tree.update(obstacles[i], obstacles[i] - obstacles[i - 1])
        
        for q in reversed(queries):
            if q[0] == 1:
                _, x = q
                index = obstacles.index(x)
                after = obstacles[index + 1]
                before = obstacles[index - 1]
                obstacles.remove(x)
                tree.update(after, after - before)
            else:
                _, x, sz = q
                index = obstacles.bisect_left(x)
                before = obstacles[index - 1]
                result.append(tree.query(before) >= sz or (x - before) >= sz)
            
        result.reverse()
        return result


