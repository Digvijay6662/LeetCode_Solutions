2972. Count the Number of Incremovable Subarrays II
Solved
Hard
Companies
Hint
You are given a 0-indexed array of positive integers nums.

A subarray of nums is called incremovable if nums becomes strictly increasing on removing the subarray. For example, the subarray [3, 4] is an incremovable subarray of [5, 3, 4, 6, 7] because removing this subarray changes the array [5, 3, 4, 6, 7] to [5, 6, 7] which is strictly increasing.

Return the total number of incremovable subarrays of nums.

Note that an empty array is considered strictly increasing.

A subarray is a contiguous non-empty sequence of elements within an array.

 

Example 1:

Input: nums = [1,2,3,4]
Output: 10
Explanation: The 10 incremovable subarrays are: [1], [2], [3], [4], [1,2], [2,3], [3,4], [1,2,3], [2,3,4], and [1,2,3,4], because on removing any one of these subarrays nums becomes strictly increasing. Note that you cannot select an empty subarray.
Example 2:

Input: nums = [6,5,7,8]
Output: 7
Explanation: The 7 incremovable subarrays are: [5], [6], [5,7], [6,5], [5,7,8], [6,5,7] and [6,5,7,8].
It can be shown that there are only 7 incremovable subarrays in nums.
Example 3:

Input: nums = [8,7,6,6]
Output: 3
Explanation: The 3 incremovable subarrays are: [8,7,6], [7,6,6], and [8,7,6,6]. Note that [8,7] is not an incremovable subarray because after removing [8,7] nums becomes [6,6], which is sorted in ascending order but not strictly increasing.
 

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= 109


Solution 1:

class Solution:
    def incremovableSubarrayCount(self, nums: List[int]) -> int:
        n = len(nums)
        l = 0
        while l + 1 < n and nums[l] < nums[l + 1]:
            l += 1

        if l == n - 1:
            return n * (n + 1)//2

        r = n - 1
        while r - 1 >= 0 and nums[r] > nums[r - 1]:
            r -= 1

        total = n - r + 1

        for i in range(l + 1):
            greaterIndex = bisect.bisect_right(nums, nums[i], r, n)
            total += n - greaterIndex + 1

        return total


Solution 2:

class Solution:
    def incremovableSubarrayCount(self, nums: List[int]) -> int:

        def binarySearch(nums, target, left, right):
            while left <= right:
                mid = left + (right - left)//2

                if nums[mid] <= target:
                    left = mid + 1
                else:
                    right = mid - 1

            return left

        n = len(nums)
        l = 0
        while l + 1 < n and nums[l] < nums[l + 1]:
            l += 1

        if l == n - 1:
            return n * (n + 1) // 2

        r = n - 1
        while r - 1 >= 0 and nums[r] > nums[r - 1]:
            r -= 1

        total = n - r + 1

        for i in range(l + 1):
            greaterIndex = binarySearch(nums, nums[i], r, n - 1)
            total += n - greaterIndex + 1

        return total


Solution 3:

class Solution:
    def incremovableSubarrayCount(self, nums: List[int]) -> int:
        n = len(nums)
        l = 0
        while l + 1 < n and nums[l] < nums[l + 1]:
            l += 1

        if l == n - 1:
            return n * (n + 1)//2

        r = n - 1
        while r - 1 >= 0 and nums[r] > nums[r - 1]:
            r -= 1

        total = n - r + 1

        for i in range(l + 1):
            while r < n and nums[r] <= nums[i]:
                r += 1
            total += n - r + 1

        return total