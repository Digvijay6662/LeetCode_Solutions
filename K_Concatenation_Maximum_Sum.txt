1191. K-Concatenation Maximum Sum
Solved
Medium
Topics
Companies
Hint
Given an integer array arr and an integer k, modify the array by repeating it k times.

For example, if arr = [1, 2] and k = 3 then the modified array will be [1, 2, 1, 2, 1, 2].

Return the maximum sub-array sum in the modified array. Note that the length of the sub-array can be 0 and its sum in that case is 0.

As the answer can be very large, return the answer modulo 109 + 7.

 

Example 1:

Input: arr = [1,2], k = 3
Output: 9
Example 2:

Input: arr = [1,-2,1], k = 5
Output: 2
Example 3:

Input: arr = [-1,-2], k = 7
Output: 0
 

Constraints:

1 <= arr.length <= 105
1 <= k <= 105
-104 <= arr[i] <= 104


Solution 1:

class Solution:
    def kConcatenationMaxSum(self, arr: List[int], k: int) -> int:
        mod = 1000000007
        n = len(arr)
        presum, premax, sufsum, sufmax, cursum, curmax = 0, 0, 0, 0, 0, 0

        for i in range(n):
            # Prefix sum
            presum += arr[i]
            premax = max(premax, presum)

            # Suffix sum
            sufsum += arr[n - 1 - i]
            sufmax = max(sufmax, sufsum)

            # Kadane's Algorithm
            cursum = max(0, cursum) + arr[i]
            curmax = max(curmax, cursum)

        max_val = max(curmax, premax + sufmax + max(0, presum * (k - 2)))
        return curmax if k == 1 else max_val % mod
