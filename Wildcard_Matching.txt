44. Wildcard Matching
Solved
Hard
Topics
Companies
Given an input string (s) and a pattern (p), implement wildcard pattern matching with support for '?' and '*' where:

'?' Matches any single character.
'*' Matches any sequence of characters (including the empty sequence).
The matching should cover the entire input string (not partial).

 

Example 1:

Input: s = "aa", p = "a"
Output: false
Explanation: "a" does not match the entire string "aa".
Example 2:

Input: s = "aa", p = "*"
Output: true
Explanation: '*' matches any sequence.
Example 3:

Input: s = "cb", p = "?a"
Output: false
Explanation: '?' matches 'c', but the second letter is 'a', which does not match 'b'.
 

Constraints:

0 <= s.length, p.length <= 2000
s contains only lowercase English letters.
p contains only lowercase English letters, '?' or '*'.


Solution 1:

class Solution:
    def isMatch(self, s: str, p: str) -> bool:
        n, m = len(s), len(p)
        dp = [[None] * m for _ in range(n)]

        def solve(i, j):
            if i == n and j == m:
                return True

            if j == m:
                return False

            if i == n:
                for k in range(j, m):
                    if p[k] != '*':
                        return False
                return True

            if dp[i][j] != None:
                return dp[i][j]

            ans = False
            if s[i] == p[j] or p[j] == '?':
                ans |= solve(i + 1, j + 1)
            elif p[j] == '*':
                ans |= solve(i, j + 1)  # '*' matches empty sequence
                ans |= solve(i + 1, j)  # '*' matches one or more characters
            else:
                ans |= False

            dp[i][j] = ans
            return ans

        return solve(0, 0)


Solution 2:

class Solution:
    def isMatch(self, s: str, p: str) -> bool:
        n, m = len(s), len(p)
        dp = [[False] * (m + 1) for _ in range(n + 1)]

        # Empty pattern matches empty string
        dp[n][m] = True

        # Handle the case when the pattern ends with '*'
        for j in range(m - 1, -1, -1):
            if p[j] == '*':
                dp[n][j] = dp[n][j + 1]

        for i in range(n - 1, -1, -1):
            for j in range(m - 1, -1, -1):
                if s[i] == p[j] or p[j] == '?':
                    dp[i][j] = dp[i + 1][j + 1]
                elif p[j] == '*':
                    dp[i][j] = dp[i][j + 1] or dp[i + 1][j]
                else:
                    dp[i][j] = False

        return dp[0][0]


Solution 3:

class Solution:
    def isMatch(self, s: str, p: str) -> bool:
        n, m = len(s), len(p)
        prev = [False] * (m + 1)
        curr = [False] * (m + 1)

        # Empty pattern matches empty string
        prev[m] = True

        # Handle the case when the pattern ends with '*'
        for j in range(m - 1, -1, -1):
            if p[j] == '*':
                prev[j] = prev[j + 1]

        for i in range(n - 1, -1, -1):
            curr[m] = False  # reset the last element to False for the next iteration
            for j in range(m - 1, -1, -1):
                if s[i] == p[j] or p[j] == '?':
                    curr[j] = prev[j + 1]
                elif p[j] == '*':
                    curr[j] = curr[j + 1] or prev[j]
                else:
                    curr[j] = False

            prev, curr = curr, prev  # swap prev and curr

        return prev[0]


Solution 4:

class Solution:
    def isMatch(self, s: str, p: str) -> bool:
        n, m = len(s), len(p)
        prev = [False] * (m + 1)

        # Empty pattern matches empty string
        prev[m] = True

        # Handle the case when the pattern ends with '*'
        for j in range(m - 1, -1, -1):
            if p[j] == '*':
                prev[j] = prev[j + 1]

        for i in range(n - 1, -1, -1):
            curr = [False] * (m + 1)
            for j in range(m - 1, -1, -1):
                if s[i] == p[j] or p[j] == '?':
                    curr[j] = prev[j + 1]
                elif p[j] == '*':
                    curr[j] = curr[j + 1] or prev[j]
                else:
                    curr[j] = False

            prev = curr

        return prev[0]


Solution 5:

class Solution:
    def isMatch(self, s: str, p: str) -> bool:
        n, m = len(s), len(p)
        i, j, match, star_idx = 0, 0, 0, -1
    
        while i < n:
            # advancing both pointers
            if j < m and (p[j] == '?' or s[i] == p[j]):
                i += 1
                j += 1
            # * found, only advancing p pointer
            elif j < m and p[j] == '*':
                star_idx = j
                match = i
                j += 1
            # last p pointer was *, advancing string pointer
            elif star_idx != -1:
                j = star_idx + 1
                match += 1
                i = match
            # current p pointer is not star, last p pointer was not *
            # characters do not match
            else:
                return False

        # check for remaining characters in p
        while j < m and p[j] == '*':
            j += 1

        return j == m
