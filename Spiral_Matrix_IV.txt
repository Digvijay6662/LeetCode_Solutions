2326. Spiral Matrix IV
Solved
Medium
Topics
Companies
Hint
You are given two integers m and n, which represent the dimensions of a matrix.

You are also given the head of a linked list of integers.

Generate an m x n matrix that contains the integers in the linked list presented in spiral order (clockwise), starting from the top-left of the matrix. If there are remaining empty spaces, fill them with -1.

Return the generated matrix.

 

Example 1:


Input: m = 3, n = 5, head = [3,0,2,6,8,1,7,9,4,2,5,5,0]
Output: [[3,0,2,6,8],[5,0,-1,-1,1],[5,2,4,9,7]]
Explanation: The diagram above shows how the values are printed in the matrix.
Note that the remaining spaces in the matrix are filled with -1.
Example 2:


Input: m = 1, n = 4, head = [0,1,2]
Output: [[0,1,2,-1]]
Explanation: The diagram above shows how the values are printed from left to right in the matrix.
The last space in the matrix is set to -1.
 

Constraints:

1 <= m, n <= 105
1 <= m * n <= 105
The number of nodes in the list is in the range [1, m * n].
0 <= Node.val <= 1000


Solution 1:

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def spiralMatrix(self, m: int, n: int, head: Optional[ListNode]) -> List[List[int]]:
        grid = [[-1 for _ in range(n)] for _ in range(m)]
        top, bottom, left, right = 0, m - 1, 0, n - 1
        curr = head

        while top <= bottom and left <= right and curr:

            # Fill the top row
            for j in range(left, right + 1):
                if not curr:
                    return grid
                grid[top][j] = curr.val
                curr = curr.next
            top += 1

            # Fill the right column
            for i in range(top, bottom + 1):
                if not curr:
                    return grid
                grid[i][right] = curr.val
                curr = curr.next
            right -= 1

            # Fill the bottom row
            if top <= bottom:
                for j in range(right, left - 1, -1):
                    if not curr:
                        return grid
                    grid[bottom][j] = curr.val
                    curr = curr.next
                bottom -= 1

            # Fill the left column
            if left <= right:
                for i in range(bottom, top - 1, -1):
                    if not curr:
                        return grid
                    grid[i][left] = curr.val
                    curr = curr.next
                left += 1

        return grid


Solution 2:

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def spiralMatrix(self, m: int, n: int, head: Optional[ListNode]) -> List[List[int]]:
        grid = [[-1] * n for _ in range(m)]
        # east, south, west, north movements in a matrix.
        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]
        d = 0
        row, col = 0, 0
        curr = head

        while curr:
            grid[row][col] = curr.val
            curr = curr.next
            dr, dc = directions[d]
            nr, nc = row + dr, col + dc
            if 0 <= nr < m and 0 <= nc < n and grid[nr][nc] == -1:
                row, col = nr, nc
            else:
                d = (d + 1) % 4
                dr, dc = directions[d]
                row, col = row + dr, col + dc

        return grid