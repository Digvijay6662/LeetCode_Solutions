862. Shortest Subarray with Sum at Least K
Hard
Topics
Companies
Given an integer array nums and an integer k, return the length of the shortest non-empty subarray of nums with a sum of at least k. If there is no such subarray, return -1.

A subarray is a contiguous part of an array.

 

Example 1:

Input: nums = [1], k = 1
Output: 1
Example 2:

Input: nums = [1,2], k = 4
Output: -1
Example 3:

Input: nums = [2,-1,2], k = 3
Output: 3
 

Constraints:

1 <= nums.length <= 105
-105 <= nums[i] <= 105
1 <= k <= 109


Solution 1:

class Solution:
    def shortestSubarray(self, nums: List[int], k: int) -> int:
        n = len(nums)
        shortest = n + 1
        
        # Building a prefix/cumulative sum of all elements
        prefixSum = [0] * (n + 1)
        for i in range(n):
            prefixSum[i + 1] = prefixSum[i] + nums[i]
        
        # Initialize the deque for storing the starting indices
        q = deque()
        
        for i in range(n + 1):
            # Finding the smallest window whose sum >= k
            while q and prefixSum[i] - prefixSum[q[0]] >= k:
                shortest = min(shortest, i - q.popleft())
            
            # Keeping the q deque in an order of increasing sequence
            while q and prefixSum[i] <= prefixSum[q[-1]]:
                q.pop()
            
            # Add the current index to the q queue
            q.append(i)
        
        return shortest if shortest <= n else -1


Solution 2:

class Solution:
    def shortestSubarray(self, nums: List[int], k: int) -> int:
        n = len(nums)
        shortest = n + 1

        curr_sum = 0
        q = deque()

        for i in range(n):
            curr_sum += nums[i]
            
            if curr_sum >= k:
                shortest = min(shortest, i + 1)

            while q and curr_sum - q[0][0] >= k:
                shortest = min(shortest, i - q.popleft()[1])   

            while q and q[-1][0] >= curr_sum:
                q.pop()

            q.append([curr_sum, i])

        return shortest if shortest <= n else -1
