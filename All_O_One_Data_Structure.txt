432. All O`one Data Structure
Solved
Hard
Topics
Companies
Design a data structure to store the strings' count with the ability to return the strings with minimum and maximum counts.

Implement the AllOne class:

AllOne() Initializes the object of the data structure.
inc(String key) Increments the count of the string key by 1. If key does not exist in the data structure, insert it with count 1.
dec(String key) Decrements the count of the string key by 1. If the count of key is 0 after the decrement, remove it from the data structure. It is guaranteed that key exists in the data structure before the decrement.
getMaxKey() Returns one of the keys with the maximal count. If no element exists, return an empty string "".
getMinKey() Returns one of the keys with the minimum count. If no element exists, return an empty string "".
Note that each function must run in O(1) average time complexity.

 

Example 1:

Input
["AllOne", "inc", "inc", "getMaxKey", "getMinKey", "inc", "getMaxKey", "getMinKey"]
[[], ["hello"], ["hello"], [], [], ["leet"], [], []]
Output
[null, null, null, "hello", "hello", null, "hello", "leet"]

Explanation
AllOne allOne = new AllOne();
allOne.inc("hello");
allOne.inc("hello");
allOne.getMaxKey(); // return "hello"
allOne.getMinKey(); // return "hello"
allOne.inc("leet");
allOne.getMaxKey(); // return "hello"
allOne.getMinKey(); // return "leet"
 

Constraints:

1 <= key.length <= 10
key consists of lowercase English letters.
It is guaranteed that for each call to dec, key is existing in the data structure.
At most 5 * 104 calls will be made to inc, dec, getMaxKey, and getMinKey.


Solution 1:

class Node:
    def __init__(self, count):
        self.keys = set()
        self.count = count
        self.next = None
        self.prev = None

class AllOne:

    def __init__(self):
        # Initialize with dummy head and tail nodes to easily manage boundaries.
        self.head = Node(float('-inf'))  # Dummy head (smallest possible count)
        self.tail = Node(float('inf'))   # Dummy tail (largest possible count)
        self.head.next = self.tail
        self.tail.prev = self.head
        self.key_node = {}  # Map key to its corresponding Node

    def _addNodeAfter(self, prev_node, new_node):
        """Helper function to insert `new_node` right after `prev_node`."""
        new_node.next = prev_node.next
        new_node.prev = prev_node
        prev_node.next.prev = new_node
        prev_node.next = new_node

    def _removeNode(self, node):
        """Helper function to remove `node` from the linked list."""
        node.prev.next = node.next
        node.next.prev = node.prev
        del node

    def inc(self, key: str) -> None:
        if key not in self.key_node:
            # If the key is new, add it to the first node after head with count 1.
            if self.head.next.count != 1:
                # Create a new node for count 1
                new_node = Node(1)
                self._addNodeAfter(self.head, new_node)
            # Insert the key in the node with count 1.
            self.head.next.keys.add(key)
            # Map the key to this node.
            self.key_node[key] = self.head.next
        else:
            # If the key exists, increment its count.
            curr_node = self.key_node[key]
            next_count = curr_node.count + 1
            # Remove key from current node.
            curr_node.keys.remove(key)
            # Check if we need a new node for the incremented count.
            if curr_node.next.count != next_count:
                # Create a new node for this incremented count.
                new_node = Node(next_count)
                self._addNodeAfter(curr_node, new_node)
            # Move key to the next node.
            curr_node.next.keys.add(key)
            # Update key mapping.
            self.key_node[key] = curr_node.next
            # Remove the current node if it's empty.
            if not curr_node.keys:
                self._removeNode(curr_node)

    def dec(self, key: str) -> None:
        if key not in self.key_node:
            return  # Key does not exist, nothing to do.

        # Get the current node and decrement the count.
        curr_node = self.key_node[key]
        prev_count = curr_node.count - 1
        # Remove key from the current node.
        curr_node.keys.remove(key)
        
        if prev_count > 0:
            # If the decremented count is still positive, move the key to the previous node.
            if curr_node.prev.count != prev_count:
                # Create a new node for the decremented count.
                new_node = Node(prev_count)
                self._addNodeAfter(curr_node.prev, new_node)
            # Move key to the previous node.
            curr_node.prev.keys.add(key)
            # Update key mapping.
            self.key_node[key] = curr_node.prev
        else:
            # If the decremented count is zero, remove the key entirely.
            del self.key_node[key]

        # Remove the current node if it's empty.
        if not curr_node.keys:
            self._removeNode(curr_node)

    def getMaxKey(self) -> str:
        # The tail's previous node contains the maximum count.
        if self.tail.prev == self.head:
            return ""  # No keys present.
        return next(iter(self.tail.prev.keys))  # Return any key from the max node.

    def getMinKey(self) -> str:
        # The head's next node contains the minimum count.
        if self.head.next == self.tail:
            return ""  # No keys present.
        return next(iter(self.head.next.keys))  # Return any key from the min node.

# Your AllOne object will be instantiated and called as such:
# obj = AllOne()
# obj.inc(key)
# obj.dec(key)
# param_3 = obj.getMaxKey()
# param_4 = obj.getMinKey()
