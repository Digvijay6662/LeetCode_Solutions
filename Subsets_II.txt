90. Subsets II
Medium
8.4K
237
Companies
Given an integer array nums that may contain duplicates, return all possible 
subsets
 (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

 

Example 1:

Input: nums = [1,2,2]
Output: [[],[1],[1,2],[1,2,2],[2],[2,2]]
Example 2:

Input: nums = [0]
Output: [[],[0]]
 

Constraints:

1 <= nums.length <= 10
-10 <= nums[i] <= 10


Solution 1:

class Solution:
    def subsetsWithDup(self, nums: List[int]) -> List[List[int]]:
        res = []
        n = len(nums)
        nums.sort() 
        curr = []

        def backtrack(i):
            res.append(curr.copy())

            for j in range(i, n):
                if j > i and nums[j] == nums[j-1]:
                    continue

                curr.append(nums[j])
                backtrack(j + 1)
                curr.pop()

        backtrack(0)

        return res


Solution 2:


class Solution:
    def subsetsWithDup(self, nums: List[int]) -> List[List[int]]:
        res = []
        n = len(nums)
        nums.sort() 

        def backtrack(i, curr):
            if i == n:
                res.append(curr.copy())
                return

            curr.append(nums[i])
            backtrack(i + 1, curr)
            curr.pop()

            while i + 1 < n and nums[i] == nums[i + 1]:
                i += 1

            backtrack(i + 1, curr)


        backtrack(0, [])

        return res
