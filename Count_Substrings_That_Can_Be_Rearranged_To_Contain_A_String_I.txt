3297. Count Substrings That Can Be Rearranged to Contain a String I
Solved
Medium
Companies
Hint
You are given two strings word1 and word2.

A string x is called valid if x can be rearranged to have word2 as a 
prefix
.

Return the total number of valid 
substrings
 of word1.

 

Example 1:

Input: word1 = "bcca", word2 = "abc"

Output: 1

Explanation:

The only valid substring is "bcca" which can be rearranged to "abcc" having "abc" as a prefix.

Example 2:

Input: word1 = "abcabc", word2 = "abc"

Output: 10

Explanation:

All the substrings except substrings of size 1 and size 2 are valid.

Example 3:

Input: word1 = "abcabc", word2 = "aaabc"

Output: 0

 

Constraints:

1 <= word1.length <= 105
1 <= word2.length <= 104
word1 and word2 consist only of lowercase English letters.


Solution 1:

class Solution:
    def validSubstringCount(self, word1: str, word2: str) -> int:
        n, m = len(word1), len(word2)
        prefix = [[0] * 26 for _ in range(n)]
        
        for i in range(n):
            if i == 0:
                prefix[i][ord(word1[i]) - ord('a')] += 1
            else:
                prefix[i] = prefix[i - 1].copy()
                prefix[i][ord(word1[i]) - ord('a')] += 1
                
                
        def check(prefix, val, ch, i):
            idx = ord(ch) - ord('a')
            l, r = i, n - 1
            ans = -1
            
            while l <= r:
                m = (l + r) >> 1
                if prefix[m][idx]- (prefix[i - 1][idx] if i > 0 else 0) >= val:
                    r = m - 1
                    ans = m
                else:
                    l = m + 1
                    
            return ans
                    
        
        count2 = Counter(word2)
        result = 0
        for i in range(n):
            max_idx = i
            for ch, val in count2.items():
                ans = check(prefix, val, ch, i)
                if ans == -1:
                    return result
                max_idx = max(max_idx, ans)
                
            result += n - max_idx
            
        return result


Solution 2:

class Solution:
    def validSubstringCount(self, word1: str, word2: str) -> int:
        n, m = len(word1), len(word2)
        
        if m > n:
            return 0

        count1 = defaultdict(int)
        count2 = Counter(word2)
        have, need = 0, len(count2)
        result = l = 0
        
        for r, ch in enumerate(word1):
            count1[ch] += 1
            if ch in count2 and count1[ch] == count2[ch]:
                have += 1
            while have == need:
                result += n - r
                count1[word1[l]] -= 1
                if count1[word1[l]] == 0:
                    del count1[word1[l]]
                if word1[l] in count2 and count1[word1[l]] < count2[word1[l]]:
                    have -= 1
                l += 1

        return result
