1008. Construct Binary Search Tree from Preorder Traversal
Medium
Topics
Companies
Given an array of integers preorder, which represents the preorder traversal of a BST (i.e., binary search tree), construct the tree and return its root.

It is guaranteed that there is always possible to find a binary search tree with the given requirements for the given test cases.

A binary search tree is a binary tree where for every node, any descendant of Node.left has a value strictly less than Node.val, and any descendant of Node.right has a value strictly greater than Node.val.

A preorder traversal of a binary tree displays the value of the node first, then traverses Node.left, then traverses Node.right.

 

Example 1:


Input: preorder = [8,5,1,7,10,12]
Output: [8,5,10,1,7,null,12]
Example 2:

Input: preorder = [1,3]
Output: [1,null,3]
 

Constraints:

1 <= preorder.length <= 100
1 <= preorder[i] <= 1000
All the values of preorder are unique.


Solution 1:

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def bstFromPreorder(self, preorder: List[int]) -> Optional[TreeNode]:
        if not preorder:
            return None

        head = TreeNode(preorder[0])
        idx = 1
        while idx < len(preorder) and preorder[idx] < head.val:
            idx += 1

        head.left = self.bstFromPreorder(preorder[1:idx])
        head.right = self.bstFromPreorder(preorder[idx:])

        return head


Solution 2:

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def bstFromPreorder(self, preorder: List[int]) -> Optional[TreeNode]:
        root = TreeNode(preorder[0])  
        stack = [root]
        
        for value in preorder[1:]:
            if value < stack[-1].val:
                # If the current value is less than the top of the stack, it is the left child of the top node.
                stack[-1].left = TreeNode(value)
                stack.append(stack[-1].left)
            else:
                # If the current value is greater, it is the right child of the last node in the stack.
                # Pop nodes from the stack until finding a node with a greater value or the stack becomes empty.
                while stack and stack[-1].val < value:
                    last = stack.pop()
                last.right = TreeNode(value)
                stack.append(last.right)
                
        return root