2597. The Number of Beautiful Subsets
Solved
Medium
Topics
Companies
Hint
You are given an array nums of positive integers and a positive integer k.

A subset of nums is beautiful if it does not contain two integers with an absolute difference equal to k.

Return the number of non-empty beautiful subsets of the array nums.

A subset of nums is an array that can be obtained by deleting some (possibly none) elements from nums. Two subsets are different if and only if the chosen indices to delete are different.

 

Example 1:

Input: nums = [2,4,6], k = 2
Output: 4
Explanation: The beautiful subsets of the array nums are: [2], [4], [6], [2, 6].
It can be proved that there are only 4 beautiful subsets in the array [2,4,6].
Example 2:

Input: nums = [1], k = 1
Output: 1
Explanation: The beautiful subset of the array nums is [1].
It can be proved that there is only 1 beautiful subset in the array [1].
 

Constraints:

1 <= nums.length <= 20
1 <= nums[i], k <= 1000


Solution 1:

class Solution:
    def beautifulSubsets(self, nums: List[int], k: int) -> int:
        n = len(nums)
        count = 0

        for mask in range(1, 1 << n):
            hashSet = set()
            flag = True
            for i in range(n):
                if (mask >> i) & 1:
                    if (nums[i] - k) in hashSet or (nums[i] + k) in hashSet:
                        flag = False
                        break
                    hashSet.add(nums[i])
                    
            if flag:
                count += 1

        return count

        
Solution 2:

class Solution:
    def beautifulSubsets(self, nums: List[int], k: int) -> int:
        n = len(nums)
        count = defaultdict(int)

        def solve(i):
            if i == n:
                return 1
            
            ans = solve(i + 1)
            if not count[nums[i] - k] and not count[nums[i] + k]:
                count[nums[i]] += 1
                ans += solve(i + 1)
                count[nums[i]] -= 1

            return ans

        return solve(0) - 1


Solution 3:

class Solution:
    def beautifulSubsets(self, nums: List[int], k: int) -> int:
        n = len(nums)
        count = Counter(nums)
        groups = []
        visited = set()

        for num in count.keys():
            if num in visited:
                continue

            while (num - k) in count:
                num -= k

            g = {}
            while num in count:
                visited.add(num)
                g[num] = count[num]
                num += k
            groups.append(g)

        dp = {}
        def solve(num, g):
            if num not in g:
                return 1
            if num in dp:
                return dp[num]
            notPick = solve(num + k, g)
            pick = ((1 << g[num])- 1) * solve(num + 2 * k, g)
            dp[num] = notPick + pick
            return dp[num]

        result = 1
        for g in groups:
            num = min(g.keys())
            result *= solve(num, g)

        return result - 1