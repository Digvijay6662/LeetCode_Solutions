424. Longest Repeating Character Replacement
Medium
7.9K
334
Companies
You are given a string s and an integer k. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most k times.

Return the length of the longest substring containing the same letter you can get after performing the above operations.

 

Example 1:

Input: s = "ABAB", k = 2
Output: 4
Explanation: Replace the two 'A's with two 'B's or vice versa.
Example 2:

Input: s = "AABABBA", k = 1
Output: 4
Explanation: Replace the one 'A' in the middle with 'B' and form "AABBBBA".
The substring "BBBB" has the longest repeating letters, which is 4.
 

Constraints:

1 <= s.length <= 105
s consists of only uppercase English letters.
0 <= k <= s.length


Solution 1:

class Solution:
    def characterReplacement(self, s: str, k: int) -> int:
        charDict = {}
        l = 0
        length = 0

        for r in range(len(s)):
            charDict[s[r]] = 1 + charDict.get(s[r], 0)

            if (r-l+1) - max(charDict.values()) > k:
                charDict[s[l]] -= 1
                l +=1
            length = max(length, r-l+1)

        return length


Solution 2:

class Solution:
    def characterReplacement(self, s: str, k: int) -> int:
        charDict = {}
        l = 0
        length = 0
        maxFrequency = 0

        for r in range(len(s)):
            charDict[s[r]] = 1 + charDict.get(s[r], 0)
            maxFrequency = max(maxFrequency, charDict[s[r]])

            if (r-l+1) - maxFrequency > k:
                charDict[s[l]] -= 1
                l += 1

            length = max(length, r-l+1)

        return length



