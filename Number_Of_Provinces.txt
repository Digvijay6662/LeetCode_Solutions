547. Number of Provinces
Medium
7.6K
292
Companies
There are n cities. Some of them are connected, while some are not. If city a is connected directly with city b, and city b is connected directly with city c, then city a is connected indirectly with city c.

A province is a group of directly or indirectly connected cities and no other cities outside of the group.

You are given an n x n matrix isConnected where isConnected[i][j] = 1 if the ith city and the jth city are directly connected, and isConnected[i][j] = 0 otherwise.

Return the total number of provinces.

 

Example 1:


Input: isConnected = [[1,1,0],[1,1,0],[0,0,1]]
Output: 2
Example 2:


Input: isConnected = [[1,0,0],[0,1,0],[0,0,1]]
Output: 3
 

Constraints:

1 <= n <= 200
n == isConnected.length
n == isConnected[i].length
isConnected[i][j] is 1 or 0.
isConnected[i][i] == 1
isConnected[i][j] == isConnected[j][i]


Solution 1:

class Solution:
    
    def findCircleNum(self, isConnected: List[List[int]]) -> int:
        n = len(isConnected)
        visited = [False] * n
        components = 0

        def dfs(node):
            visited[node] = True
            for nei in range(n):
                if isConnected[node][nei] == 1 and not visited[nei]:
                    dfs(nei)

        for i in range(n):
            if not visited[i]:
                components += 1
                dfs(i)

        return components


Solution 2:

class Solution:
    
    def findCircleNum(self, isConnected: List[List[int]]) -> int:
        n = len(isConnected)
        visited = [False] * n
        components = 0

        def bfs(node):
            queue = deque([node])
            visited[node] = True
            
            while queue:
                node = queue.popleft()
                for nei in range(n):
                    if isConnected[node][nei] == 1 and not visited[nei]:
                        queue.append(nei)
                        visited[nei] = True

        for i in range(n):
            if not visited[i]:
                components += 1
                bfs(i)

        return components


Solution 3:

class UnionFind:

    def __init__(self, n):
        self.parent = [i for i in range(n)]
        self.rank = [1] * n

    def find(self, node):
        if node != self.parent[node]:
            self.parent[node] = self.find(self.parent[node])
        return self.parent[node]

    def union(self, n1, n2):
        p1, p2 = self.find(n1), self.find(n2)

        if self.rank[p1] > self.rank[p2]:
            self.parent[p2] = p1
            self.rank[p1] += self.rank[p2]
        elif self.rank[p2] > self.rank[p1]:
            self.parent[p1] = p2
            self.rank[p2] += self.rank[p1]
        else:
            self.parent[p2] = p1
            self.rank[p1] += 1


class Solution:
    
    def findCircleNum(self, isConnected: List[List[int]]) -> int:
        n = len(isConnected)
        provinces = n
        uf = UnionFind(n)

        for i in range(n):
            for j in range(i + 1, n):
                if isConnected[i][j] == 1:
                    if uf.find(i) != uf.find(j):
                        uf.union(i, j)
                        provinces -= 1

        return provinces


