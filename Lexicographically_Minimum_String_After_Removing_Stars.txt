3170. Lexicographically Minimum String After Removing Stars
Solved
Medium
Companies
You are given a string s. It may contain any number of '*' characters. Your task is to remove all '*' characters.

While there is a '*', do the following operation:

Delete the leftmost '*' and the smallest non-'*' character to its left. If there are several smallest characters, you can delete any of them.
Return the 
lexicographically smallest
 resulting string after removing all '*' characters.

 

Example 1:

Input: s = "aaba*"

Output: "aab"

Explanation:

We should delete one of the 'a' characters with '*'. If we choose s[3], s becomes the lexicographically smallest.

Example 2:

Input: s = "abc"

Output: "abc"

Explanation:

There is no '*' in the string.

 

Constraints:

1 <= s.length <= 105
s consists only of lowercase English letters and '*'.
The input is generated such that it is possible to delete all '*' characters.


Solution 1:

class Solution:
    def clearStars(self, s: str) -> str:
        minHeap = []
        charmap = defaultdict(list)
        removed = set()
        
        for i, ch in enumerate(s):
            if ch == '*':
                char = heapq.heappop(minHeap)
                idx = charmap[char].pop()
                removed.add(idx)
            else:
                heapq.heappush(minHeap, ch)
                charmap[ch].append(i)
        
        result = []
        for i, ch in enumerate(s):
            if i in removed or ch == '*':
                continue  
            result.append(ch)
            
        return "".join(result)


Solution 2:

class Solution:
    def clearStars(self, s: str) -> str:
        removed = set()
        minHeap = []

        for i, ch in enumerate(s):
            if ch == '*':
                _, idx = heapq.heappop(minHeap)
                removed.add(-idx)
            else:
                heapq.heappush(minHeap, (ch, -i))

        result = []
        for i, ch in enumerate(s):
            if i in removed or ch == '*':
                continue
            result.append(ch)

        return "".join(result)


Solution 3:

class Solution:
    def clearStars(self, s: str) -> str:
        removed = set()
        char_list = [[] for _ in range(26)]

        for i, ch in enumerate(s):
            if ch == '*':
                for char in range(26):
                    if char_list[char]:
                        idx = char_list[char].pop()
                        removed.add(idx)
                        break
            else:
                char_list[ord(ch) - 97].append(i)

        result = [ch for i, ch in enumerate(s) if i not in removed and ch != '*']
        return "".join(result)
