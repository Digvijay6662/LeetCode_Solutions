3193. Count the Number of Inversions
Solved
Hard
Topics
Companies
Hint
You are given an integer n and a 2D array requirements, where requirements[i] = [endi, cnti] represents the end index and the inversion count of each requirement.

A pair of indices (i, j) from an integer array nums is called an inversion if:

i < j and nums[i] > nums[j]
Return the number of 
permutations
 perm of [0, 1, 2, ..., n - 1] such that for all requirements[i], perm[0..endi] has exactly cnti inversions.

Since the answer may be very large, return it modulo 109 + 7.

 

Example 1:

Input: n = 3, requirements = [[2,2],[0,0]]

Output: 2

Explanation:

The two permutations are:

[2, 0, 1]
Prefix [2, 0, 1] has inversions (0, 1) and (0, 2).
Prefix [2] has 0 inversions.
[1, 2, 0]
Prefix [1, 2, 0] has inversions (0, 2) and (1, 2).
Prefix [1] has 0 inversions.
Example 2:

Input: n = 3, requirements = [[2,2],[1,1],[0,0]]

Output: 1

Explanation:

The only satisfying permutation is [2, 0, 1]:

Prefix [2, 0, 1] has inversions (0, 1) and (0, 2).
Prefix [2, 0] has an inversion (0, 1).
Prefix [2] has 0 inversions.
Example 3:

Input: n = 2, requirements = [[0,0],[1,0]]

Output: 1

Explanation:

The only satisfying permutation is [0, 1]:

Prefix [0] has 0 inversions.
Prefix [0, 1] has an inversion (0, 1).
 

Constraints:

2 <= n <= 300
1 <= requirements.length <= n
requirements[i] = [endi, cnti]
0 <= endi <= n - 1
0 <= cnti <= 400
The input is generated such that there is at least one i such that endi == n - 1.
The input is generated such that all endi are unique.


Solution 1:

class Solution:
    def numberOfPermutations(self, n: int, requirements: List[List[int]]) -> int:
        MOD = 1000000007
        required = [-1] * n

        for i, cnt in requirements:
            required[i] = cnt

        dp = [[-1] * (401) for _ in range(n)]

        def solve(i, inv):
            if required[i] != -1 and required[i] != inv:
                return 0
            if i == n - 1:
                return 1
            if dp[i][inv] != -1:
                return dp[i][inv]
            
            result = (helper(i + 1, inv) - helper(i + 1, inv + i + 2)) % MOD
            dp[i][inv] = result
            return result

        def helper(i, inv):
            if inv >= 401:
                return 0
            if dp[i][inv] != -1:
                return dp[i][inv]
            result = (solve(i, inv) + helper(i, inv + 1)) % MOD
            dp[i][inv] = result
            return result

        return solve(0, 0)


Solution 2:

class Solution:
    def numberOfPermutations(self, n: int, requirements: List[List[int]]) -> int:
        MOD = 1000000007
        reqs = {i + 1: cnt for i, cnt in requirements}

        @cache
        def solve(nums, inv):
            if inv < 0:
                return 0

            if nums in reqs and reqs[nums] != inv:
                return 0

            if nums == 1:
                return inv == 0
            ans = 0
            for i in range(nums):
                ans += solve(nums - 1, inv - i)

            return ans % MOD

        return solve(n, reqs[n])
        