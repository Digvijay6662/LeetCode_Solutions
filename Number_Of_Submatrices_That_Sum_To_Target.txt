1074. Number of Submatrices That Sum to Target
Solved
Hard
Topics
Companies
Hint
Given a matrix and a target, return the number of non-empty submatrices that sum to target.

A submatrix x1, y1, x2, y2 is the set of all cells matrix[x][y] with x1 <= x <= x2 and y1 <= y <= y2.

Two submatrices (x1, y1, x2, y2) and (x1', y1', x2', y2') are different if they have some coordinate that is different: for example, if x1 != x1'.

 

Example 1:


Input: matrix = [[0,1,0],[1,1,1],[0,1,0]], target = 0
Output: 4
Explanation: The four 1x1 submatrices that only contain 0.
Example 2:

Input: matrix = [[1,-1],[-1,1]], target = 0
Output: 5
Explanation: The two 1x2 submatrices, plus the two 2x1 submatrices, plus the 2x2 submatrix.
Example 3:

Input: matrix = [[904]], target = 0
Output: 0
 

Constraints:

1 <= matrix.length <= 100
1 <= matrix[0].length <= 100
-1000 <= matrix[i] <= 1000
-10^8 <= target <= 10^8


Solution 1:

class Solution:
    def numSubmatrixSumTarget(self, matrix: List[List[int]], target: int) -> int:
        n, m = len(matrix), len(matrix[0])
        prefix = [[0 for _ in range(m)] for _ in range(n)]
        prefix[0][0] = matrix[0][0]

        for i in range(1, n):
            prefix[i][0] = prefix[i - 1][0] + matrix[i][0]

        for j in range(1, m):
            prefix[0][j] = prefix[0][j - 1] + matrix[0][j]

        for i in range(1, n):
            for j in range(1, m):
                prefix[i][j] = prefix[i - 1][j] + prefix[i][j - 1] - prefix[i - 1][j - 1] + matrix[i][j]
            
        result = 0

        for r1 in range(n):
            for r2 in range(r1, n):
                prefix_map = defaultdict(int)
                prefix_map[0] = 1
                for c in range(m):
                    curr_sum = prefix[r2][c]
                    curr_sum -= prefix[r1 - 1][c] if r1 > 0 else 0
                    if curr_sum - target in prefix_map:
                        result += prefix_map[curr_sum - target]
                    prefix_map[curr_sum] += 1
        
        return result


Solution 2:

class Solution:
    def numSubmatrixSumTarget(self, matrix: List[List[int]], target: int) -> int:
        n, m = len(matrix), len(matrix[0])

        prefix_sums = [[0] * (m + 1) for _ in range(n + 1)]
        for i in range(1, n + 1):
            for j in range(1, m + 1):
                prefix_sums[i][j] = prefix_sums[i - 1][j] + prefix_sums[i][j - 1] - prefix_sums[i - 1][j - 1] + matrix[i - 1][j - 1]

        count = 0
        for r1 in range(1, n + 1):
            for r2 in range(r1, n + 1):
                curr_sums = defaultdict(int)
                curr_sums[0] = 1
                for c in range(1, m + 1):
                    curr_sum = prefix_sums[r2][c] - prefix_sums[r1 - 1][c]
                    if curr_sum - target in curr_sums:
                        count += curr_sums[curr_sum - target]
                    curr_sums[curr_sum] += 1

        return count

Solution 3:

class Solution:
    def numSubmatrixSumTarget(self, matrix: List[List[int]], target: int) -> int:
        rows, cols = len(matrix), len(matrix[0])
        result = 0

        for row in matrix:
            for i in range(1, cols):
                row[i] += row[i - 1]

        for col1 in range(cols):
            for col2 in range(col1, cols):
                prefix_sum = {0: 1}
                current_sum = 0
                for row in matrix:
                    # Calculate the sum of elements in the current submatrix
                    current_sum += row[col2] if col1 == 0 else row[col2] - row[col1 - 1]
                    # Check how many submatrices with target sum we've seen before
                    result += prefix_sum.get(current_sum - target, 0)
                    # Update the prefix sum
                    prefix_sum[current_sum] = prefix_sum.get(current_sum, 0) + 1

        return result