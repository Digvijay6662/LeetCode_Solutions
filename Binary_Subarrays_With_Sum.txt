930. Binary Subarrays With Sum
Solved
Medium
Topics
Companies
Given a binary array nums and an integer goal, return the number of non-empty subarrays with a sum goal.

A subarray is a contiguous part of the array.

 

Example 1:

Input: nums = [1,0,1,0,1], goal = 2
Output: 4
Explanation: The 4 subarrays are bolded and underlined below:
[1,0,1,0,1]
[1,0,1,0,1]
[1,0,1,0,1]
[1,0,1,0,1]
Example 2:

Input: nums = [0,0,0,0,0], goal = 0
Output: 15
 

Constraints:

1 <= nums.length <= 3 * 104
nums[i] is either 0 or 1.
0 <= goal <= nums.length


Solution 1:

class Solution:
    def numSubarraysWithSum(self, nums: List[int], goal: int) -> int:
        n = len(nums)
        p = curr = result = 0
        count = {0: 1}

        for i in range(n):
            curr += nums[i]

            if curr - goal in count:
                result += count[curr - goal]

            count[curr] = count.get(curr, 0) + 1

        return result


Solution 2:

class Solution:
    def numSubarraysWithSum(self, nums: List[int], goal: int) -> int:
        n = len(nums)
        
        def solve(curr):
            if curr < 0:
                return 0

            result = i = 0

            for j in range(n):
                curr -= nums[j]
                while curr < 0:
                    curr += nums[i]
                    i += 1
                result += j - i + 1

            return result

        return solve(goal) - solve(goal - 1) 
