1269. Number of Ways to Stay in the Same Place After Some Steps
Solved
Hard
Topics
Companies
Hint
You have a pointer at index 0 in an array of size arrLen. At each step, you can move 1 position to the left, 1 position to the right in the array, or stay in the same place (The pointer should not be placed outside the array at any time).

Given two integers steps and arrLen, return the number of ways such that your pointer is still at index 0 after exactly steps steps. Since the answer may be too large, return it modulo 109 + 7.

 

Example 1:

Input: steps = 3, arrLen = 2
Output: 4
Explanation: There are 4 differents ways to stay at index 0 after 3 steps.
Right, Left, Stay
Stay, Right, Left
Right, Stay, Left
Stay, Stay, Stay
Example 2:

Input: steps = 2, arrLen = 4
Output: 2
Explanation: There are 2 differents ways to stay at index 0 after 2 steps
Right, Left
Stay, Stay
Example 3:

Input: steps = 4, arrLen = 2
Output: 8
 

Constraints:

1 <= steps <= 500
1 <= arrLen <= 106


Solution 1:

class Solution:
    def numWays(self, steps: int, arrLen: int) -> int:
        mod = 1000000007
        arrLen = min(arrLen, steps // 2 + 1)

        dp = [[-1 for _ in range(steps + 1)] for _ in range(arrLen)]

        def solve(i, move):
            if move == 0:
                return i == 0
            
            if dp[i][move] != -1:
                return dp[i][move]

            ans = solve(i, move - 1)
            if i > 0:
                ans = (ans + solve(i - 1, move - 1)) % mod

            if i < arrLen - 1:
                ans = (ans +  solve(i + 1, move - 1)) % mod

            dp[i][move] = ans % mod
            return dp[i][move]

        return solve(0, steps)


Solution 2:

class Solution:
    def numWays(self, steps: int, arrLen: int) -> int:
        mod = 1000000007
        arrLen = min(arrLen, steps // 2 + 1)

        dp = [[0 for _ in range(steps + 1)] for _ in range(arrLen)]
        dp[0][0] = 1

        for move in range(1, steps + 1):
            for i in range(arrLen -1 , -1, -1):
                dp[i][move] = dp[i][move - 1]
                if i > 0:
                    dp[i][move] = (dp[i][move] + dp[i - 1][move - 1]) % mod
                if i < arrLen - 1:
                    dp[i][move] = (dp[i][move] + dp[i + 1][move - 1]) % mod

        return dp[0][steps]


Solution 3:

class Solution:
    def numWays(self, steps: int, arrLen: int) -> int:
        mod = 1000000007
        arrLen = min(arrLen, steps // 2 + 1)
        dp = [0] * arrLen
        dp[0] = 1

        for move in range(1, steps + 1):
            next_dp = [0] * arrLen
            for i in range(arrLen - 1, -1, -1):
                next_dp[i] = dp[i]
                if i > 0:
                    next_dp[i] = (next_dp[i] + dp[i - 1]) % mod
                if i < arrLen - 1:
                    next_dp[i] = (next_dp[i] + dp[i + 1]) % mod
            
            dp = next_dp

        return dp[0]
