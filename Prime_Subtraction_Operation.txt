2601. Prime Subtraction Operation
Solved
Medium
Topics
Companies
Hint
You are given a 0-indexed integer array nums of length n.

You can perform the following operation as many times as you want:

Pick an index i that you havenâ€™t picked before, and pick a prime p strictly less than nums[i], then subtract p from nums[i].
Return true if you can make nums a strictly increasing array using the above operation and false otherwise.

A strictly increasing array is an array whose each element is strictly greater than its preceding element.

 

Example 1:

Input: nums = [4,9,6,10]
Output: true
Explanation: In the first operation: Pick i = 0 and p = 3, and then subtract 3 from nums[0], so that nums becomes [1,9,6,10].
In the second operation: i = 1, p = 7, subtract 7 from nums[1], so nums becomes equal to [1,2,6,10].
After the second operation, nums is sorted in strictly increasing order, so the answer is true.
Example 2:

Input: nums = [6,8,11,12]
Output: true
Explanation: Initially nums is sorted in strictly increasing order, so we don't need to make any operations.
Example 3:

Input: nums = [5,8,3]
Output: false
Explanation: It can be proven that there is no way to perform operations to make nums sorted in strictly increasing order, so the answer is false.
 

Constraints:

1 <= nums.length <= 1000
1 <= nums[i] <= 1000
nums.length == n


Solution 1:

class Solution:
    def primeSubOperation(self, nums: List[int]) -> bool:
        n = len(nums)
        max_element = max(nums)
        primes = [True] * (max_element + 1)
        primes[0] = primes[1] = False

        for i in range(2, int(max_element ** 0.5) + 1):
            if primes[i]:
                for j in range(i * i, max_element + 1, i):
                    primes[j] = False
        
        prev = nums[n - 1]
        for i in range(n - 2, -1, -1):
            if nums[i] < prev:
                prev = nums[i]
                continue
            
            pr = 0
            for p in range(2, nums[i]):
                if primes[p]:
                    if nums[i] - p < prev:
                        pr = p
                        break
                        
            if nums[i] - pr >= prev:
                return False
            
            prev = nums[i] - pr

        return True


Solution 2:

class Solution:
    def primeSubOperation(self, nums: List[int]) -> bool:
        n = len(nums)
        max_element = max(nums)

        def get_primes():
            primes = [2]
            sieve = [True] * (max_element + 1)
            sieve[0] = sieve[1] = False

            for i in range(3, int(max_element ** 0.5) + 1, 2):
                if sieve[i]:
                    for j in range(i * i, max_element + 1, i):
                        sieve[j] = False

            for i in range(3, max_element + 1, 2):
                if sieve[i]:
                    primes.append(i)

            return primes

        primes = get_primes()
    
        for i in range(n):
            limit = nums[i] - (nums[i - 1] if i > 0 else 0)
            idx = bisect_left(primes, limit)
            if idx > 0:
                nums[i] -= primes[idx - 1]
            if i > 0 and nums[i] <= nums[i - 1]:
                return False

        return True



Solution 3:

class Solution:
    def primeSubOperation(self, nums: List[int]) -> bool:
        n = len(nums)
        max_element = max(nums)
        primes = [True] * (max_element + 1)
        primes[0] = primes[1] = False

        for i in range(2, int(max_element ** 0.5) + 1):
            if primes[i]:
                for j in range(i * i, max_element + 1, i):
                    primes[j] = False
        
        curr = 1
        i = 0

        while i < n:
            diff = nums[i] - curr

            if diff < 0:
                return False

            if primes[diff] or diff == 0:
                i += 1
                curr += 1
            else:
                curr += 1

        return True