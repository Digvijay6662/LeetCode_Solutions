887. Super Egg Drop
Solved
Hard
Topics
Companies
You are given k identical eggs and you have access to a building with n floors labeled from 1 to n.

You know that there exists a floor f where 0 <= f <= n such that any egg dropped at a floor higher than f will break, and any egg dropped at or below floor f will not break.

Each move, you may take an unbroken egg and drop it from any floor x (where 1 <= x <= n). If the egg breaks, you can no longer use it. However, if the egg does not break, you may reuse it in future moves.

Return the minimum number of moves that you need to determine with certainty what the value of f is.

 

Example 1:

Input: k = 1, n = 2
Output: 2
Explanation: 
Drop the egg from floor 1. If it breaks, we know that f = 0.
Otherwise, drop the egg from floor 2. If it breaks, we know that f = 1.
If it does not break, then we know f = 2.
Hence, we need at minimum 2 moves to determine with certainty what the value of f is.
Example 2:

Input: k = 2, n = 6
Output: 3
Example 3:

Input: k = 3, n = 14
Output: 4
 

Constraints:

1 <= k <= 100
1 <= n <= 104


Solution 1:

class Solution:
    def superEggDrop(self, k: int, n: int) -> int:
        eggs = k

        dp = [[-1 for _ in range(eggs + 1)] for _ in range(n + 1)]

        def solve(floors, eggs):
            if eggs == 1 or floors <= 1:
                return floors

            if dp[floors][eggs] != -1:
                return dp[floors][eggs]

            min_moves = float('inf')

            # Use binary search to find the optimal floor
            left, right = 1, floors
            while left <= right:
                mid = (left + right) // 2
                breaks = solve(mid - 1, eggs - 1)
                does_not_break = solve(floors - mid, eggs)
                worst_case_moves = 1 + max(breaks, does_not_break)

                if breaks == does_not_break:
                    min_moves = worst_case_moves
                    break
                elif breaks < does_not_break:
                    left = mid + 1
                else:
                    right = mid - 1

                min_moves = min(min_moves, worst_case_moves)

            dp[floors][eggs] = min_moves
            return min_moves

        return solve(n, eggs)


Solution 2:

class Solution:
    def superEggDrop(self, k: int, n: int) -> int:
        dp = [[0] * (k + 1) for _ in range(n + 1)]

        for i in range(1, n + 1):
            dp[i][1] = i

        for eggs in range(2, k + 1):
            for floors in range(1, n + 1):
                dp[floors][eggs] = float('inf')
                left, right = 1, floors

                while left <= right:
                    mid = (left + right) // 2
                    breaks = dp[mid - 1][eggs - 1]
                    does_not_break = dp[floors - mid][eggs]
                    worst_case_moves = 1 + max(breaks, does_not_break)

                    if breaks == does_not_break:
                        dp[floors][eggs] = worst_case_moves
                        break
                    elif breaks < does_not_break:
                        left = mid + 1
                    else:
                        right = mid - 1

                    dp[floors][eggs] = min(dp[floors][eggs], worst_case_moves)

        return dp[n][k]


Solution 3:

class Solution:
    def superEggDrop(self, k: int, n: int) -> int:
        dp = [[0] * (k + 1) for i in range(n + 1)]

        for moves in range(1, n + 1):
            for eggs in range(1, k + 1):
                dp[moves][eggs] = dp[moves - 1][eggs - 1] + dp[moves - 1][eggs] + 1
            
            if dp[moves][eggs] >= n:
                return moves
