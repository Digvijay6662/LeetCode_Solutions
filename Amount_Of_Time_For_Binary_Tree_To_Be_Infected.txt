2385. Amount of Time for Binary Tree to Be Infected
Solved
Medium
Topics
Companies
Hint
You are given the root of a binary tree with unique values, and an integer start. At minute 0, an infection starts from the node with value start.

Each minute, a node becomes infected if:

The node is currently uninfected.
The node is adjacent to an infected node.
Return the number of minutes needed for the entire tree to be infected.

 

Example 1:


Input: root = [1,5,3,null,4,10,6,9,2], start = 3
Output: 4
Explanation: The following nodes are infected during:
- Minute 0: Node 3
- Minute 1: Nodes 1, 10 and 6
- Minute 2: Node 5
- Minute 3: Node 4
- Minute 4: Nodes 9 and 2
It takes 4 minutes for the whole tree to be infected so we return 4.
Example 2:


Input: root = [1], start = 1
Output: 0
Explanation: At minute 0, the only node in the tree is infected so we return 0.
 

Constraints:

The number of nodes in the tree is in the range [1, 105].
1 <= Node.val <= 105
Each node has a unique value.
A node with a value of start exists in the tree.


Solution 1:

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def amountOfTime(self, root: Optional[TreeNode], start: int) -> int:
        graph = defaultdict(list)

        def isLeaf(node):
            if not node.left and not node.right:
                return True
            return False

        def buildGraph(node):
            if isLeaf(node):
                return
            
            if node.left:
                graph[node.val].append(node.left.val)
                graph[node.left.val].append(node.val)
                buildGraph(node.left)
            
            if node.right:
                graph[node.val].append(node.right.val)
                graph[node.right.val].append(node.val)
                buildGraph(node.right)

        if isLeaf(root):
            return 0

        buildGraph(root)

        q = deque([start])
        visited = {start}
        time = 0

        while q:
            infected = False
            for _ in range(len(q)):
                node = q.popleft()

                if node not in visited:
                    infected = True
                    visited.add(node)

                for nei in graph[node]:
                    if nei not in visited:
                        infected = True
                        q.append(nei)

            if infected:
                time += 1

        return time - 1


Solution 2:

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def amountOfTime(self, root: Optional[TreeNode], start: int) -> int:

        def buildGraph(node, parent):
            if node is None:
                return

            if node.val not in graph:
                graph[node.val] = set()

            if parent != 0:
                graph[node.val].add(parent)
            if node.left:
                graph[node.val].add(node.left.val)
            if node.right:
                graph[node.val].add(node.right.val)

            buildGraph(node.left, node.val)
            buildGraph(node.right, node.val)

        graph = {}
        buildGraph(root, 0)
        q = deque([start])
        time = 0
        visited = {start}

        while q:
            for _ in range(len(q)):
                node = q.popleft()
                for num in graph[node]:
                    if num not in visited:
                        visited.add(num)
                        q.append(num)
            time += 1

        return time - 1