1457. Pseudo-Palindromic Paths in a Binary Tree
Solved
Medium
Topics
Companies
Hint
Given a binary tree where node values are digits from 1 to 9. A path in the binary tree is said to be pseudo-palindromic if at least one permutation of the node values in the path is a palindrome.

Return the number of pseudo-palindromic paths going from the root node to leaf nodes.

 

Example 1:



Input: root = [2,3,1,3,1,null,1]
Output: 2 
Explanation: The figure above represents the given binary tree. There are three paths going from the root node to leaf nodes: the red path [2,3,3], the green path [2,1,1], and the path [2,3,1]. Among these paths only red path and green path are pseudo-palindromic paths since the red path [2,3,3] can be rearranged in [3,2,3] (palindrome) and the green path [2,1,1] can be rearranged in [1,2,1] (palindrome).
Example 2:



Input: root = [2,1,1,1,3,null,null,null,null,null,1]
Output: 1 
Explanation: The figure above represents the given binary tree. There are three paths going from the root node to leaf nodes: the green path [2,1,1], the path [2,1,3,1], and the path [2,1]. Among these paths only the green path is pseudo-palindromic since [2,1,1] can be rearranged in [1,2,1] (palindrome).
Example 3:

Input: root = [9]
Output: 1
 

Constraints:

The number of nodes in the tree is in the range [1, 105].
1 <= Node.val <= 9



Solution 1:

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def pseudoPalindromicPaths (self, root: Optional[TreeNode]) -> int:

        def dfs(node, pairs):
            if not node:
                return 0
            
            if node.val in pairs:
                pairs.remove(node.val)
            else:
                pairs.add(node.val)
            
            if not node.left and not node.right:
                return 1 if len(pairs) <= 1 else 0
            
            left = dfs(node.left, set(pairs))
            right = dfs(node.right, set(pairs))
            
            return left + right
        
        return dfs(root, set())

Solution 2:

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def pseudoPalindromicPaths (self, root: Optional[TreeNode]) -> int:
        count = [0] * 10
        palindromes = 0

        def dfs(node):
            nonlocal palindromes
            if not node:
                return

            count[node.val] += 1

            if not node.left and not node.right:
                odds = 0
                for freq in count:
                    if freq & 1:
                        odds += 1

                palindromes += odds <= 1

            dfs(node.left)
            dfs(node.right)

            count[node.val] -= 1

        dfs(root)
        return palindromes


Solution 3:

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def pseudoPalindromicPaths (self, root: Optional[TreeNode]) -> int:

        def isLeaf(node):
            return not node.left and not node.right

        def check_palindromic(bitmask):
            return bitmask & (bitmask - 1) == 0

        def dfs(node, bitmask):
            nonlocal palindromes

            if not node:
                return

            bitmask ^= 1 << node.val

            if isLeaf(node) and check_palindromic(bitmask):
                palindromes += 1
                return

            dfs(node.left, bitmask)
            dfs(node.right, bitmask)

        palindromes = 0
        dfs(root, 0)
        return palindromes
