3143. Maximum Points Inside the Square
Solved
Medium
Companies
Hint
You are given a 2D array points and a string s where, points[i] represents the coordinates of point i, and s[i] represents the tag of point i.

A valid square is a square centered at the origin (0, 0), has edges parallel to the axes, and does not contain two points with the same tag.

Return the maximum number of points contained in a valid square.

Note:

A point is considered to be inside the square if it lies on or within the square's boundaries.
The side length of the square can be zero.
 

Example 1:



Input: points = [[2,2],[-1,-2],[-4,4],[-3,1],[3,-3]], s = "abdca"

Output: 2

Explanation:

The square of side length 4 covers two points points[0] and points[1].

Example 2:



Input: points = [[1,1],[-2,-2],[-2,2]], s = "abb"

Output: 1

Explanation:

The square of side length 2 covers one point, which is points[0].

Example 3:

Input: points = [[1,1],[-1,-1],[2,-2]], s = "ccd"

Output: 0

Explanation:

It's impossible to make any valid squares centered at the origin such that it covers only one point among points[0] and points[1].

 

Constraints:

1 <= s.length, points.length <= 105
points[i].length == 2
-109 <= points[i][0], points[i][1] <= 109
s.length == points.length
points consists of distinct coordinates.
s consists only of lowercase English letters.


Solution 1:

class Solution:
    def maxPointsInsideSquare(self, points: List[List[int]], s: str) -> int:
        n = len(s)
        def check(max_length):
            unique = set()
            for i in range(n):
                x, y = points[i]
                max_p = max(abs(x), abs(y))
                if max_p <= max_length:
                    if s[i] in unique:
                        return False
                    unique.add(s[i])
            return True


        l, r = 0, 10**9
        while l <= r:
            m = (l + r) >> 1
            if check(m):
                l = m + 1
            else:
                r = m - 1

        max_length = r
        result = 0
        for i in range(n):
            x, y = points[i]
            max_p = max(abs(x), abs(y))
            if max_p <= max_length:
                result += 1

        return result



Solution 2:

class Solution:
    def maxPointsInsideSquare(self, points: List[List[int]], s: str) -> int:
        minDist = {}
        secondMin = float('inf')
        
        for point, char in zip(points, s):
            max_p = max(abs(point[0]), abs(point[1]))

            if char not in minDist:
                minDist[char] = max_p
            elif max_p < minDist[char]:
                secondMin = min(minDist[char], secondMin)
                minDist[char] = max_p
            else:
                secondMin = min(max_p, secondMin)

        result = 0
        for d in minDist.values():
            if d < secondMin:
                result += 1

        return result
