1707. Maximum XOR With an Element From Array
Hard
1.1K
35
Companies
You are given an array nums consisting of non-negative integers. You are also given a queries array, where queries[i] = [xi, mi].

The answer to the ith query is the maximum bitwise XOR value of xi and any element of nums that does not exceed mi. In other words, the answer is max(nums[j] XOR xi) for all j such that nums[j] <= mi. If all elements in nums are larger than mi, then the answer is -1.

Return an integer array answer where answer.length == queries.length and answer[i] is the answer to the ith query.

 

Example 1:

Input: nums = [0,1,2,3,4], queries = [[3,1],[1,3],[5,6]]
Output: [3,3,7]
Explanation:
1) 0 and 1 are the only two integers not greater than 1. 0 XOR 3 = 3 and 1 XOR 3 = 2. The larger of the two is 3.
2) 1 XOR 2 = 3.
3) 5 XOR 2 = 7.
Example 2:

Input: nums = [5,2,4,6,6,3], queries = [[12,4],[8,1],[6,3]]
Output: [15,-1,5]
 

Constraints:

1 <= nums.length, queries.length <= 105
queries[i].length == 2
0 <= nums[j], xi, mi <= 109


Solution 1:

class TrieNode:
    def __init__(self):
        self.children = {}

class Trie:
    def __init__(self):
        self.root = TrieNode()

    def insert(self, num):
        curr = self.root

        for i in range(31, -1, -1):
            bit = (num >> i) & 1
            if bit not in curr.children:
                curr.children[bit] = TrieNode()
            curr = curr.children[bit]

    def findMaxXor(self, num):
        curr = self.root
        xor_num = 0

        for i in range(31, -1, -1):
            bit = (num >> i) & 1
            if 1 - bit in curr.children:
                xor_num |= (1 << i)
                curr = curr.children[1 - bit]
            else:
                curr = curr.children[bit]
        return xor_num

class Solution:
    def maximizeXor(self, nums: List[int], queries: List[List[int]]) -> List[int]:
        trie = Trie()

        result = [-1] * len(queries)
        queries = sorted([(x, m, i) for i, (x, m) in enumerate(queries)], key=lambda x: x[1])
        nums.sort()
        j = 0
        for x, m, i in queries:
            while j < len(nums) and nums[j] <= m:
                trie.insert(nums[j])
                j += 1
            if j > 0:
                result[i] = trie.findMaxXor(x)

        return result



Solution 2:

class Trie:
    def __init__(self):
        self.root = {}
        
    def insert(self, num):
        cur = self.root
        for i in range(31, -1, -1):
            bit = (num >> i) & 1
            if bit not in cur:
                cur[bit] = {}
            cur = cur[bit]
                
    def findMaxXor(self, num):
        cur, max_xor = self.root, 0
        for i in range(31, -1, -1):
            bit = (num >> i) & 1
            if 1 - bit in cur:
                cur = cur[1 - bit]
                max_xor |= (1 << i)
            else:
                cur = cur[bit]
        return max_xor

class Solution:
    def maximizeXor(self, nums: List[int], queries: List[List[int]]) -> List[int]:
        nums.sort()
        queries = sorted([(i, (x, m)) for i, (x, m) in enumerate(queries)], key=lambda x: x[1][1])
        print(queries)
        trie = Trie()
        res = [-1] * len(queries)
        j = 0
        for i, (x, m) in queries:
            while j < len(nums) and nums[j] <= m:
                trie.insert(nums[j])
                j += 1
            if j > 0:
                res[i] = trie.findMaxXor(x)
        return res