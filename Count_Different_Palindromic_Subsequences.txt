730. Count Different Palindromic Subsequences
Solved
Hard
Topics
Companies
Hint
Given a string s, return the number of different non-empty palindromic subsequences in s. Since the answer may be very large, return it modulo 109 + 7.

A subsequence of a string is obtained by deleting zero or more characters from the string.

A sequence is palindromic if it is equal to the sequence reversed.

Two sequences a1, a2, ... and b1, b2, ... are different if there is some i for which ai != bi.

 

Example 1:

Input: s = "bccb"
Output: 6
Explanation: The 6 different non-empty palindromic subsequences are 'b', 'c', 'bb', 'cc', 'bcb', 'bccb'.
Note that 'bcb' is counted only once, even though it occurs twice.
Example 2:

Input: s = "abcdabcdabcdabcdabcdabcdabcdabcddcbadcbadcbadcbadcbadcbadcbadcba"
Output: 104860361
Explanation: There are 3104860382 different non-empty palindromic subsequences, which is 104860361 modulo 109 + 7.
 

Constraints:

1 <= s.length <= 1000
s[i] is either 'a', 'b', 'c', or 'd'.


Solution 1:

class Solution:
    def countPalindromicSubsequences(self, s: str) -> int:
        n = len(s)
        mod = 1000000007

        next_ind = [n] * n
        prev_ind = [-1] * n
        last_map = {}

        for i in range(n):
            if s[i] in last_map:
                prev_ind[i] = last_map[s[i]]
            last_map[s[i]] = i

        last_map.clear()
        for i in range(n - 1, -1, -1):
            if s[i] in last_map:
                next_ind[i] = last_map[s[i]]
            last_map[s[i]] = i

        dp = [[-1 for _ in range(n)] for _ in range(n)]

        def solve(i, j):
            if i > j:
                return 0
            if i == j:
                return 1
            if dp[i][j] != -1:
                return dp[i][j]

            if s[i] != s[j]:
                dp[i][j] = (solve(i + 1, j) + 
                               solve(i, j - 1) - 
                               solve(i + 1, j - 1)) % mod
            else:
                dp[i][j] = (2 * solve(i + 1, j - 1)) % mod
                l = next_ind[i]
                r = prev_ind[j]

                if l > r:
                    dp[i][j] = (dp[i][j] + 2) % mod
                elif l == r:
                    dp[i][j] = (dp[i][j] + 1) % mod
                else:
                    dp[i][j] = (dp[i][j] - solve(l + 1, r - 1)) % mod

            return dp[i][j]

        return solve(0, n - 1)


Solution 2:

class Solution:
    def countPalindromicSubsequences(self, s: str) -> int:
        n = len(s)
        mod = 1000000007

        next_ind = [n] * n
        prev_ind = [-1] * n
        last_map = {}

        for i in range(n):
            if s[i] in last_map:
                prev_ind[i] = last_map[s[i]]
            last_map[s[i]] = i

        last_map.clear()
        for i in range(n - 1, -1, -1):
            if s[i] in last_map:
                next_ind[i] = last_map[s[i]]
            last_map[s[i]] = i

        for i in range(n):
            if s[i] not in last_map:
                prev_ind[i] = -1
            else:
                prev_ind[i] = last_map[s[i]]
            last_map[s[i]] = i

        dp = [[0 for _ in range(n)] for _ in range(n)]

        for i in range(n):
            dp[i][i] = 1

        for length in range(2, n + 1):
            for i in range(n - length + 1):
                j = i + length - 1
                if s[i] != s[j]:
                    dp[i][j] = (dp[i + 1][j] + dp[i][j - 1] - dp[i + 1][j - 1]) % mod
                else:
                    dp[i][j] = (2 * dp[i + 1][j - 1]) % mod
                    l = next_ind[i]
                    r = prev_ind[j]

                    if l > r:
                        dp[i][j] = (dp[i][j] + 2) % mod
                    elif l == r:
                        dp[i][j] = (dp[i][j] + 1) % mod
                    else:
                        dp[i][j] = (dp[i][j] - dp[l + 1][r - 1] + mod) % mod

        return dp[0][n - 1]