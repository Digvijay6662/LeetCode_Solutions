97. Interleaving String
Medium
6.5K
394
Companies
Given strings s1, s2, and s3, find whether s3 is formed by an interleaving of s1 and s2.

An interleaving of two strings s and t is a configuration where s and t are divided into n and m 
substrings
 respectively, such that:

s = s1 + s2 + ... + sn
t = t1 + t2 + ... + tm
|n - m| <= 1
The interleaving is s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ...
Note: a + b is the concatenation of strings a and b.

 

Example 1:


Input: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbcbcac"
Output: true
Explanation: One way to obtain s3 is:
Split s1 into s1 = "aa" + "bc" + "c", and s2 into s2 = "dbbc" + "a".
Interleaving the two splits, we get "aa" + "dbbc" + "bc" + "a" + "c" = "aadbbcbcac".
Since s3 can be obtained by interleaving s1 and s2, we return true.
Example 2:

Input: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbbaccc"
Output: false
Explanation: Notice how it is impossible to interleave s2 with any other string to obtain s3.
Example 3:

Input: s1 = "", s2 = "", s3 = ""
Output: true
 

Constraints:

0 <= s1.length, s2.length <= 100
0 <= s3.length <= 200
s1, s2, and s3 consist of lowercase English letters.
 

Follow up: Could you solve it using only O(s2.length) additional memory space?

Solution 1:

class Solution:
    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:
        n = len(s1)
        m = len(s2)
        maxLength = len(s3)

        if n + m != maxLength:
            return False

        @cache
        def solve(i, j):
            if i == n and j == m:
                return True

            op1 = op2 = False

            if i < n and s1[i] == s3[i + j]:
                op1 = solve(i + 1, j)

            if j < m and s2[j] == s3[i + j]:
                op2 = solve(i, j + 1)


            return op1 or op2
   
        return solve(0, 0)

Solution 2:

class Solution:
    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:
        n = len(s1)
        m = len(s2)
        maxLength = len(s3)

        if n + m != maxLength:
            return False

        dp = {}

        def solve(i, j):
            if (i, j) in dp:
                return dp[(i, j)]

            if i == n and j == m:
                return True

            op1 = op2 = False

            if i < n and s1[i] == s3[i + j]:
                op1 = solve(i + 1, j)

            if j < m and s2[j] == s3[i + j]:
                op2 = solve(i, j + 1)

            dp[(i, j)] = op1 or op2
            
            return dp[(i, j)]
   
        return solve(0, 0)

Solution 3:

class Solution:
    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:
        n = len(s1)
        m = len(s2)
        maxLength = len(s3)

        if n + m != maxLength:
            return False

        dp = [[False] * (m + 1) for _ in range(n + 1)]

        dp[0][0] = True
        
        for i in range(n + 1):
            for j in range(m + 1):
                if i > 0 and s1[i - 1] == s3[i + j - 1]:
                    dp[i][j] = dp[i - 1][j]
                if j > 0 and s2[j - 1] == s3[i + j - 1]:
                    dp[i][j] = dp[i][j] or dp[i][j - 1]

        return dp[n][m]


Solution 4:

class Solution:
    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:
        n = len(s1)
        m = len(s2)
        maxLength = len(s3)

        if n + m != maxLength:
            return False

        dp = [[False] * (m + 1) for _ in range(n + 1)]

        dp[n][m] = True

        for i in range(n, -1, -1):
            for j in range(m, -1, -1):
                if i < n and s1[i] == s3[i + j]:
                    dp[i][j] = dp[i + 1][j]
                if j < m and s2[j] == s3[i + j]:
                    dp[i][j] = dp[i][j] or dp[i][j + 1]

        return dp[0][0]
