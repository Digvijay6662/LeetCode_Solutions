343. Integer Break
Medium
4.2K
387
Companies
Given an integer n, break it into the sum of k positive integers, where k >= 2, and maximize the product of those integers.

Return the maximum product you can get.

 

Example 1:

Input: n = 2
Output: 1
Explanation: 2 = 1 + 1, 1 × 1 = 1.
Example 2:

Input: n = 10
Output: 36
Explanation: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36.
 

Constraints:

2 <= n <= 58


Solution 1:

class Solution:
    def integerBreak(self, n: int) -> int:
        dp = [-1] * (n + 1)

        def solve(num):
            if num <= 3:
                return num

            if dp[num] != -1:
                return dp[num]

            ans = num
            for i in range(2, num):
                ans = max(ans, i * solve(num - i))
            
            dp[num] = ans
            return ans

        if n <= 3:
            return n - 1
        
        return solve(n)


Solution 2:

class Solution:
    def integerBreak(self, n: int) -> int:
        if n <= 3:
            return n - 1
        
        dp = [0] * (n + 1)

        for num in range(n + 1):
            dp[num] = num
            for i in range(2, num):
                if num - i >= 0:
                    dp[num] = max(dp[num], i * dp[num - i])

        return dp[num]



Solution 3:

class Solution:
    def integerBreak(self, n: int) -> int:
        if n <= 3:
            return n - 1
        
        ans = 1
        while n > 4:
            ans *= 3
            n -= 3
        
        return ans * n



Solution 4:

class Solution:
    def integerBreak(self, n: int) -> int:
        if n <= 3:
            return n - 1
        
        if n % 3 == 0:
            return 3 ** (n // 3)
        
        if n % 3 == 1:
            return 3 ** (n // 3 - 1) * 2 * 2
        
        return 3 ** (n // 3) * 2