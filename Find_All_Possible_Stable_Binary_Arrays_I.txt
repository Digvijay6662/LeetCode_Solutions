3129. Find All Possible Stable Binary Arrays I
Solved
Medium
Companies
Hint
You are given 3 positive integers zero, one, and limit.

A 
binary array
 arr is called stable if:

The number of occurrences of 0 in arr is exactly zero.
The number of occurrences of 1 in arr is exactly one.
Each 
subarray
 of arr with a size greater than limit must contain both 0 and 1.
Return the total number of stable binary arrays.

Since the answer may be very large, return it modulo 109 + 7.

 

Example 1:

Input: zero = 1, one = 1, limit = 2

Output: 2

Explanation:

The two possible stable binary arrays are [1,0] and [0,1], as both arrays have a single 0 and a single 1, and no subarray has a length greater than 2.

Example 2:

Input: zero = 1, one = 2, limit = 1

Output: 1

Explanation:

The only possible stable binary array is [1,0,1].

Note that the binary arrays [1,1,0] and [0,1,1] have subarrays of length 2 with identical elements, hence, they are not stable.

Example 3:

Input: zero = 3, one = 3, limit = 2

Output: 14

Explanation:

All the possible stable binary arrays are [0,0,1,0,1,1], [0,0,1,1,0,1], [0,1,0,0,1,1], [0,1,0,1,0,1], [0,1,0,1,1,0], [0,1,1,0,0,1], [0,1,1,0,1,0], [1,0,0,1,0,1], [1,0,0,1,1,0], [1,0,1,0,0,1], [1,0,1,0,1,0], [1,0,1,1,0,0], [1,1,0,0,1,0], and [1,1,0,1,0,0].

 

Constraints:

1 <= zero, one, limit <= 200


Solution 1:

class Solution:
    def numberOfStableArrays(self, zero: int, one: int, limit: int) -> int:
        mod = 1000000007
        dp = [[[-1 for _ in range(2)] for _ in range(zero + 1)] for _ in range(one + 1)]

        def solve(z, o, prev):
            if z == 0 and o == 0:
                return 1

            if dp[o][z][prev] != -1:
                return dp[o][z][prev]

            ans = 0
            if prev == 1:
                for i in range(1, min(z, limit) + 1):
                    ans = (ans + solve(z - i, o, 0)) % mod
            else:
                for i in range(1, min(o, limit) + 1):
                    ans = (ans + solve(z, o - i, 1)) % mod

            dp[o][z][prev] = ans
            return ans

        result = 0
        for i in range(1, min(zero, limit) + 1):
            result = (result + solve(zero - i, one, 0)) % mod

        for i in range(1, min(one, limit) + 1):
            result = (result + solve(zero, one - i, 1)) % mod

        return result


Solution 2:


class Solution:
    def numberOfStableArrays(self, zero: int, one: int, limit: int) -> int:
        mod = 1000000007
        dp = [[[-1 for _ in range(2)] for _ in range(zero + 1)] for _ in range(one + 1)]

        def solve(z, o, curr):
            if z == 0 and o == 0:
                return 1

            if dp[o][z][curr] != -1:
                return dp[o][z][curr]

            ans = 0
            if curr == 0:
                for i in range(1, min(z, limit) + 1):
                    ans = (ans + solve(z - i, o, 1)) % mod
            else:
                for i in range(1, min(o, limit) + 1):
                    ans = (ans + solve(z, o - i, 0)) % mod

            dp[o][z][curr] = ans
            return ans

        result = 0

        result = (result + solve(zero, one, 1)) % mod
        result = (result + solve(zero, one, 0)) % mod

        return result


Solution 3:

class Solution:
    def numberOfStableArrays(self, zero: int, one: int, limit: int) -> int:
        mod = 1000000007
        dp = [[[0 for _ in range(2)] for _ in range(zero + 1)] for _ in range(one + 1)]
        
        dp[0][0][0] = dp[0][0][1] = 1
        
        for o in range(one + 1):
            for z in range(zero + 1):
                for curr in range(2):
                    if curr == 0:
                        for i in range(1, min(z, limit) + 1):
                            dp[o][z][curr] = (dp[o][z][curr] + dp[o][z - i][1]) % mod
                    else:
                        for i in range(1, min(o, limit) + 1):
                            dp[o][z][curr] = (dp[o][z][curr] + dp[o - i][z][0]) % mod
        
        return (dp[one][zero][0] + dp[one][zero][1]) % mod


Solution 4:

class Solution:
    def numberOfStableArrays(self, zero: int, one: int, limit: int) -> int:
        mod = 1000000007
        dp = [[[0 for _ in range(2)] for _ in range(zero + 1)] for _ in range(one + 1)]

        for i in range(1, min(limit, zero) + 1):
            dp[0][i][0] = 1
        
        for i in range(1, min(limit, one) + 1):
            dp[i][0][1] = 1
        
        for o in range(1, one + 1):
            for z in range(1, zero + 1):
                dp[o][z][0] = (dp[o][z - 1][0] + dp[o][z - 1][1]) % mod
                if z - limit - 1 >= 0:
                    dp[o][z][0] = (dp[o][z][0] - dp[o][z - limit - 1][1]) % mod

                dp[o][z][1] = (dp[o - 1][z][1] + dp[o - 1][z][0]) % mod
                if o - limit - 1 >= 0:
                    dp[o][z][1] = (dp[o][z][1] - dp[o - limit - 1][z][0]) % mod

        return (dp[one][zero][0] + dp[one][zero][1]) % mod