2448. Minimum Cost to Make Array Equal
Hard
1.5K
17
Companies
You are given two 0-indexed arrays nums and cost consisting each of n positive integers.

You can do the following operation any number of times:

Increase or decrease any element of the array nums by 1.
The cost of doing one operation on the ith element is cost[i].

Return the minimum total cost such that all the elements of the array nums become equal.

 

Example 1:

Input: nums = [1,3,5,2], cost = [2,3,1,14]
Output: 8
Explanation: We can make all the elements equal to 2 in the following way:
- Increase the 0th element one time. The cost is 2.
- Decrease the 1st element one time. The cost is 3.
- Decrease the 2nd element three times. The cost is 1 + 1 + 1 = 3.
The total cost is 2 + 3 + 3 = 8.
It can be shown that we cannot make the array equal with a smaller cost.
Example 2:

Input: nums = [2,2,2,2,2], cost = [4,2,8,1,3]
Output: 0
Explanation: All the elements are already equal, so no operations are needed.
 

Constraints:

n == nums.length == cost.length
1 <= n <= 105
1 <= nums[i], cost[i] <= 106


Solution 1:

class Solution:
    def minCost(self, nums: List[int], cost: List[int]) -> int:
        
        def getCost(n):
            return sum(abs(n - num) * cost  for num, cost in zip(nums, cost))

        left, right = min(nums), max(nums)
        res = getCost(nums[0])

        while left < right:
            mid = left + (right - left)//2
            y1 = getCost(mid)
            y2 = getCost(mid + 1)
            res = min(y1, y2)

            if y1 > y2:
                left = mid + 1
            else:
                right = mid

            
        return res

Solution 2:

class Solution:
    def minCost(self, nums: List[int], cost: List[int]) -> int:
        arr = sorted(zip(nums, cost))

        def getCost(n):
            return sum(abs(n - num) * cost  for num, cost in arr)

        total = sum(cost)
        count = 0

        for n, c in arr:
            count += c
            if count > total // 2:
                target = n
                break

        return getCost(target)

