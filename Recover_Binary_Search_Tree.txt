99. Recover Binary Search Tree
Solved
Medium
Topics
Companies
You are given the root of a binary search tree (BST), where the values of exactly two nodes of the tree were swapped by mistake. Recover the tree without changing its structure.

 

Example 1:


Input: root = [1,3,null,null,2]
Output: [3,1,null,null,2]
Explanation: 3 cannot be a left child of 1 because 3 > 1. Swapping 1 and 3 makes the BST valid.
Example 2:


Input: root = [3,1,4,null,null,2]
Output: [2,1,4,null,null,3]
Explanation: 2 cannot be in the right subtree of 3 because 2 < 3. Swapping 2 and 3 makes the BST valid.
 

Constraints:

The number of nodes in the tree is in the range [2, 1000].
-231 <= Node.val <= 231 - 1
 

Follow up: A solution using O(n) space is pretty straight-forward. Could you devise a constant O(1) space solution?


Solution 1:

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def recoverTree(self, root: Optional[TreeNode]) -> None:
        """
        Do not return anything, modify root in-place instead.
        """
        prev, first, second = None, None, None

        def solve(node):
            nonlocal prev, first, second
            if not node:
                return
            solve(node.left)

            if prev and prev.val > node.val:
                if not first:
                    first = prev
                second = node

            prev = node

            solve(node.right)

        solve(root)
        first.val, second.val = second.val, first.val


Solution 2:

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def recoverTree(self, root: Optional[TreeNode]) -> None:
        """
        Do not return anything, modify root in-place instead.
        """
        curr, prev, first, second = root, None, None, None

        while curr:
            if not curr.left:
                # Process current node
                if prev and prev.val > curr.val:
                    if not first:
                        first = prev
                    second = curr

                prev = curr
                curr = curr.right
            else:
                # Find the inorder predecessor
                predecessor = curr.left
                while predecessor.right and predecessor.right != curr:
                    predecessor = predecessor.right

                if not predecessor.right:
                    predecessor.right = curr
                    curr = curr.left
                else:
                    # Revert the modification made in the 'if' block
                    predecessor.right = None

                    # Process current node
                    if prev and prev.val > curr.val:
                        if not first:
                            first = prev
                        second = curr

                    prev = curr
                    curr = curr.right

        # Swap the values of the first and second misplaced elements
        first.val, second.val = second.val, first.val