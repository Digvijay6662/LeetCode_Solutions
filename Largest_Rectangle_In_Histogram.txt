84. Largest Rectangle in Histogram
Hard
14.6K
206
Companies
Given an array of integers heights representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.

 

Example 1:


Input: heights = [2,1,5,6,2,3]
Output: 10
Explanation: The above is a histogram where width of each bar is 1.
The largest rectangle is shown in the red area, which has an area = 10 units.
Example 2:


Input: heights = [2,4]
Output: 4
 

Constraints:

1 <= heights.length <= 105
0 <= heights[i] <= 104


Solution 1:

class Solution:
    def largestRectangleArea(self, heights: List[int]) -> int:
        n = len(heights)
        if heights is None or n == 0:
            return 0

        lessFromLeft = [-1] * n
        lessFromRight = [n] * n

        for i in range(1, n):
            p = i - 1
            while p >= 0 and heights[p] >= heights[i]:
                p = lessFromLeft[p]
            lessFromLeft[i] = p

        for i in range(n - 2, -1, -1):
            p = i + 1
            while p < n and heights[p] >= heights[i]:
                p = lessFromRight[p]
            lessFromRight[i] = p

        max_area = 0
        for i in range(n):
            max_area = max(max_area, heights[i] * (lessFromRight[i] - lessFromLeft[i] - 1))

        return max_area


Solution 2:

class Solution:
    def largestRectangleArea(self, heights: List[int]) -> int:
        n = len(heights)
        stack = []
        maxArea = 0

        for i, h in enumerate(heights):
            start = i
            while stack and stack[-1][1] > h:
                idx, height = stack.pop()
                maxArea = max(maxArea, height * (i - idx))
                start = idx

            stack.append((start, h))


        for i, h in stack:
            maxArea = max(maxArea, h * (n - i))

        return maxArea



