3266. Final Array State After K Multiplication Operations II
Solved
Hard
Companies
Hint
You are given an integer array nums, an integer k, and an integer multiplier.

You need to perform k operations on nums. In each operation:

Find the minimum value x in nums. If there are multiple occurrences of the minimum value, select the one that appears first.
Replace the selected minimum value x with x * multiplier.
After the k operations, apply modulo 109 + 7 to every value in nums.

Return an integer array denoting the final state of nums after performing all k operations and then applying the modulo.

 

Example 1:

Input: nums = [2,1,3,5,6], k = 5, multiplier = 2

Output: [8,4,6,5,6]

Explanation:

Operation	Result
After operation 1	[2, 2, 3, 5, 6]
After operation 2	[4, 2, 3, 5, 6]
After operation 3	[4, 4, 3, 5, 6]
After operation 4	[4, 4, 6, 5, 6]
After operation 5	[8, 4, 6, 5, 6]
After applying modulo	[8, 4, 6, 5, 6]
Example 2:

Input: nums = [100000,2000], k = 2, multiplier = 1000000

Output: [999999307,999999993]

Explanation:

Operation	Result
After operation 1	[100000, 2000000000]
After operation 2	[100000000000, 2000000000]
After applying modulo	[999999307, 999999993]
 

Constraints:

1 <= nums.length <= 104
1 <= nums[i] <= 109
1 <= k <= 109
1 <= multiplier <= 106


Solution 1:

from sortedcontainers import SortedList

class Solution:
    def getFinalState(self, nums: List[int], k: int, multiplier: int) -> List[int]:
        n = len(nums)
        MOD = 1000000007

        def custom_pow(base, exponent, mod):
            result = 1
            base = base % mod

            while exponent > 0:
                if exponent % 2 == 1:
                    result = (result * base) % mod
                base = (base * base) % mod
                exponent >>= 1

            return result

        if multiplier == 1:
            return nums

        if n == 1:
            nums[0] = (nums[0] * custom_pow(multiplier, k, MOD)) % MOD
            return nums

        sorted_nums = SortedList()
        for i in range(n):
            sorted_nums.add((nums[i], i))

        while k:
            val, idx = sorted_nums.pop(0)
            val *= multiplier
            k -= 1
            if ((val > sorted_nums[-1][0]) or (val == sorted_nums[-1][0] and idx > sorted_nums[-1][1])):
                sorted_nums.add((val, idx))
                break
            sorted_nums.add((val, idx))

        full = k // n
        rem = k % n
        p = custom_pow(multiplier, full, MOD)

        for i in range(n):
            val, idx = sorted_nums.pop(0)
            val = val * p
            if rem:
                val *= multiplier
                rem -= 1
            sorted_nums.add((val, idx))

        for val, idx in sorted_nums:
            nums[idx] = val % MOD

        return nums


Solution 2:

class Solution:
    def getFinalState(self, nums: List[int], k: int, multiplier: int) -> List[int]:
        if multiplier == 1:
            return nums

        n = len(nums)
        MOD = 1000000007

        minHeap = []
        max_val = float('-inf')

        for i in range(n):
            heapq.heappush(minHeap, (nums[i], i))
            max_val = max(max_val, nums[i])

        while k and minHeap[0][0] * multiplier <= max_val:
            val, idx = heapq.heappop(minHeap)
            val *= multiplier
            heapq.heappush(minHeap, (val, idx))
            k -= 1

        def custom_pow(base, exponent, mod):
            result = 1
            base = base % mod

            while exponent > 0:
                if exponent % 2 == 1:
                    result = (result * base) % mod
                base = (base * base) % mod
                exponent >>= 1

            return result

        full = k // n
        rem = k % n
        p = custom_pow(multiplier, full, MOD)

        while minHeap:
            val, idx = heapq.heappop(minHeap)
            val *= p
            if rem:
                val *= multiplier
                rem -= 1
            nums[idx] = val % MOD
        
        return nums