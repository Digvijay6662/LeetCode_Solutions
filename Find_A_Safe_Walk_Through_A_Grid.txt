3286. Find a Safe Walk Through a Grid
Solved
Medium
Companies
Hint
You are given an m x n binary matrix grid and an integer health.

You start on the upper-left corner (0, 0) and would like to get to the lower-right corner (m - 1, n - 1).

You can move up, down, left, or right from one cell to another adjacent cell as long as your health remains positive.

Cells (i, j) with grid[i][j] = 1 are considered unsafe and reduce your health by 1.

Return true if you can reach the final cell with a health value of 1 or more, and false otherwise.

 

Example 1:

Input: grid = [[0,1,0,0,0],[0,1,0,1,0],[0,0,0,1,0]], health = 1

Output: true

Explanation:

The final cell can be reached safely by walking along the gray cells below.


Example 2:

Input: grid = [[0,1,1,0,0,0],[1,0,1,0,0,0],[0,1,1,1,0,1],[0,0,1,0,1,0]], health = 3

Output: false

Explanation:

A minimum of 4 health points is needed to reach the final cell safely.


Example 3:

Input: grid = [[1,1,1],[1,0,1],[1,1,1]], health = 5

Output: true

Explanation:

The final cell can be reached safely by walking along the gray cells below.



Any path that does not go through the cell (1, 1) is unsafe since your health will drop to 0 when reaching the final cell.

 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 50
2 <= m * n
1 <= health <= m + n
grid[i][j] is either 0 or 1.


Solution 1:

class Solution:
    def findSafeWalk(self, grid: List[List[int]], health: int) -> bool:
        n, m = len(grid), len(grid[0])
        directions = [(1, 0), (0, 1), (-1, 0), (0, -1)]

        visited = [[0 for _ in range(m)] for _ in range(n)]
        visited[0][0] = health - grid[0][0]

        q = deque([(0, 0, visited[0][0])])

        while q:
            r, c, curr_health = q.popleft()

            if curr_health <= 0:
                continue

            if r == n - 1 and c == m - 1:
                return True

            for dr, dc in directions:
                nr, nc = r + dr, c + dc
                if 0 <= nr < n and 0 <= nc < m:
                    new_health = curr_health - grid[nr][nc]
                    if new_health > visited[nr][nc]:
                        visited[nr][nc] = new_health
                        q.append((nr, nc, new_health))

        return False


Solution 2:

class Solution:
    def findSafeWalk(self, grid: List[List[int]], health: int) -> bool:
        n, m = len(grid), len(grid[0])
        directions = [(1, 0), (0, 1), (-1, 0), (0, -1)]
        
        maxHeap = [(-health + grid[0][0], 0, 0)]
        visited = [[0] * m for _ in range(n)]
        visited[0][0] = health - grid[0][0]
        
        while maxHeap:
            curr_health, r, c = heapq.heappop(maxHeap)
            curr_health = -curr_health
            
            if curr_health <= 0:
                continue

            if r == n - 1 and c == m - 1:
                return True
            
            for dr, dc in directions:
                nr, nc = r + dr, c + dc
                if 0 <= nr < n and 0 <= nc < m:
                    new_health = curr_health - grid[nr][nc]
                    if new_health > visited[nr][nc]:
                        visited[nr][nc] = new_health
                        heapq.heappush(maxHeap, (-new_health, nr, nc))
        
        return False