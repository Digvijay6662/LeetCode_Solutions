236. Lowest Common Ancestor of a Binary Tree
Medium
14.1K
330
Companies
Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”

 

Example 1:


Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
Output: 3
Explanation: The LCA of nodes 5 and 1 is 3.
Example 2:


Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4
Output: 5
Explanation: The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.
Example 3:

Input: root = [1,2], p = 1, q = 2
Output: 1
 

Constraints:

The number of nodes in the tree is in the range [2, 105].
-109 <= Node.val <= 109
All Node.val are unique.
p != q
p and q will exist in the tree.


Solution 1:


# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':

        if root is None or root == p or root == q:
            return root

        left = self.lowestCommonAncestor(root.left, p, q)
        right = self.lowestCommonAncestor(root.right, p, q)

        if left is None:
            return right
        elif right is None:
            return left
        else:
            return root


Solution 2:


# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def __init__(self):
        self.parent = {}  # Dictionary to store parent node for each node
        self.depth = {}  # Dictionary to store depth of each node
        self.MAX_DEPTH = 20  # Maximum depth for binary lifting
        
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        self.dfs(root, None, 0)  # Precompute parent and depth for each node
        self.fillParent(root)  # Precompute binary lifting
        
        # Lift p and q to the same depth
        while self.depth[p] > self.depth[q]:
            p = self.parent[p][0]

        while self.depth[q] > self.depth[p]:
            q = self.parent[q][0]

        # Lift both nodes until they meet at the LCA
        while p != q:
            for i in range(self.MAX_DEPTH - 1, -1, -1):
                if self.parent[p][i] != self.parent[q][i]:
                    p = self.parent[p][i]
                    q = self.parent[q][i]

            p = self.parent[p][0]
            q = self.parent[q][0]

        return p

    def dfs(self, node, parent, d):
        if not node:
            return

        self.parent[node] = [parent] + [None] * (self.MAX_DEPTH - 1)
        self.depth[node] = d

        self.dfs(node.left, node, d + 1)
        self.dfs(node.right, node, d + 1)
        
    def fillParent(self, root):
        for i in range(1, self.MAX_DEPTH):
            for node in self.parent:
                if self.parent[node][i - 1]:
                    self.parent[node][i] = self.parent[self.parent[node][i - 1]][i - 1]