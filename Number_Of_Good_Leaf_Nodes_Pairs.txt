1530. Number of Good Leaf Nodes Pairs
Solved
Medium
Topics
Companies
Hint
You are given the root of a binary tree and an integer distance. A pair of two different leaf nodes of a binary tree is said to be good if the length of the shortest path between them is less than or equal to distance.

Return the number of good leaf node pairs in the tree.

 

Example 1:


Input: root = [1,2,3,null,4], distance = 3
Output: 1
Explanation: The leaf nodes of the tree are 3 and 4 and the length of the shortest path between them is 3. This is the only good pair.
Example 2:


Input: root = [1,2,3,4,5,6,7], distance = 3
Output: 2
Explanation: The good pairs are [4,5] and [6,7] with shortest path = 2. The pair [4,6] is not good because the length of ther shortest path between them is 4.
Example 3:

Input: root = [7,1,4,6,null,5,3,null,null,null,null,null,2], distance = 3
Output: 1
Explanation: The only good pair is [2,5].
 

Constraints:

The number of nodes in the tree is in the range [1, 210].
1 <= Node.val <= 100
1 <= distance <= 10


Solution 1:

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def countPairs(self, root: TreeNode, distance: int) -> int:

        def buildGraph(node, par):
            if not node:
                return
            
            if not node.left and not node.right:
                leaf_nodes.add(node)

            if par:
                graph[node].append(par)
                graph[par].append(node)

            buildGraph(node.left, node)
            buildGraph(node.right, node)

        graph = defaultdict(list)
        leaf_nodes = set()
        buildGraph(root, None)

        def bfs(node):
            q = deque([(node, 0)])
            visited = set([node])

            while q:
                curr, dist = q.popleft()

                if curr != node and curr in leaf_nodes and dist <= distance:
                    self.pairs += 1

                for nei in graph[curr]:
                    if nei not in visited:
                        q.append((nei, dist + 1))
                        visited.add(nei)


        self.pairs = 0
        for leaf in leaf_nodes:
            bfs(leaf)

        return self.pairs // 2


Solution 2:

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def countPairs(self, root: TreeNode, distance: int) -> int:

        def buildGraph(node, par):
            if not node:
                return
            
            if not node.left and not node.right:
                leaf_nodes.add(node)

            if par:
                graph[node].append(par)
                graph[par].append(node)

            buildGraph(node.left, node)
            buildGraph(node.right, node)

        graph = defaultdict(list)
        leaf_nodes = set()
        buildGraph(root, None)

        def bfs(node):
            q = deque([node])
            visited = set([node])
            dist = 0

            while q and dist <= distance:
                for _ in range(len(q)):
                    curr = q.popleft()

                    if curr != node and curr in leaf_nodes:
                        self.pairs += 1

                    for nei in graph[curr]:
                        if nei not in visited:
                            q.append(nei)
                            visited.add(nei)

                dist += 1

        self.pairs = 0
        for leaf in leaf_nodes:
            bfs(leaf)

        return self.pairs // 2


Solution 3:

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def countPairs(self, root: TreeNode, distance: int) -> int:

        def dfs(node):
            if not node:
                return []

            if not node.left and not node.right:
                return [1]

            dist_left = dfs(node.left)
            dist_right = dfs(node.right)

            for d1 in dist_left:
                for d2 in dist_right:
                    if d1 + d2 <= distance:
                        self.pairs += 1

            return [d + 1 for d in dist_left + dist_right if d + 1 < distance]
        
        self.pairs = 0
        dfs(root)
        return self.pairs


Solution 4:

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def countPairs(self, root: TreeNode, distance: int) -> int:

        def dfs(node):
            if not node:
                return {}

            if not node.left and not node.right:
                count = {}
                count[1] = 1
                return count

            dist_left = dfs(node.left)
            dist_right = dfs(node.right)

            for d1, f1 in dist_left.items():
                for d2, f2 in dist_right.items():
                    if d1 + d2 <= distance:
                        self.pairs += f1 * f2

            count = {}

            for d1 in dist_left:
                if d1 + 1 < distance:
                    count[d1 + 1] = dist_left[d1]
            
            for d2 in dist_right:
                if d2 + 1 < distance:
                    count[d2 + 1] = count.get(d2 + 1, 0) + dist_right[d2]

            return count
        
        self.pairs = 0
        dfs(root)
        return self.pairs