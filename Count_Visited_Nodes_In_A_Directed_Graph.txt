2876. Count Visited Nodes in a Directed Graph
Hard
134
2
Companies
There is a directed graph consisting of n nodes numbered from 0 to n - 1 and n directed edges.

You are given a 0-indexed array edges where edges[i] indicates that there is an edge from node i to node edges[i].

Consider the following process on the graph:

You start from a node x and keep visiting other nodes through edges until you reach a node that you have already visited before on this same process.
Return an array answer where answer[i] is the number of different nodes that you will visit if you perform the process starting from node i.

 

Example 1:


Input: edges = [1,2,0,0]
Output: [3,3,3,4]
Explanation: We perform the process starting from each node in the following way:
- Starting from node 0, we visit the nodes 0 -> 1 -> 2 -> 0. The number of different nodes we visit is 3.
- Starting from node 1, we visit the nodes 1 -> 2 -> 0 -> 1. The number of different nodes we visit is 3.
- Starting from node 2, we visit the nodes 2 -> 0 -> 1 -> 2. The number of different nodes we visit is 3.
- Starting from node 3, we visit the nodes 3 -> 0 -> 1 -> 2 -> 0. The number of different nodes we visit is 4.
Example 2:


Input: edges = [1,2,3,4,0]
Output: [5,5,5,5,5]
Explanation: Starting from any node we can visit every node in the graph in the process.
 

Constraints:

n == edges.length
2 <= n <= 105
0 <= edges[i] <= n - 1
edges[i] != i


Solution 1:

class Solution:
    def countVisitedNodes(self, edges: List[int]) -> List[int]:
        n = len(edges)
        visited = [0] * n
        result = [-1] * n

        def dfs(src):
            if result[src] != -1:
                return

            if visited[src] == 2:
                length = 1
                cur = src
                while edges[cur] != src:
                    length += 1
                    cur = edges[cur]

                cur = src
                while edges[cur] != src:
                    result[cur] = length
                    cur = edges[cur]

                result[cur] = length
                return

            visited[src] = 2
            dfs(edges[src])

            if result[src] == -1:
                result[src] = result[edges[src]] + 1

        for start in range(n):
            dfs(start)

        return result


Solution 2:

class Solution:
    def countVisitedNodes(self, edges: List[int]) -> List[int]:
        n = len(edges)
        visited = [0] * n
        result = [0] * n
        indegree = [0] * n

        for i in range(n):
            indegree[edges[i]] += 1

        q = deque()

        for i in range(n):
            if indegree[i] == 0:
                q.append(i)

        while q:
            node = q.popleft()
            visited[node] = 1
            
            dest = edges[node]
            indegree[dest] -= 1

            if indegree[dest] == 0:
                q.append(dest)


        for i in range(n):
            if visited[i] != 1:
                length = 1
                cur = i
                while edges[cur] != i:
                    length += 1
                    cur = edges[cur]

                cur = i
                while edges[cur] != i:
                    visited[cur] = 1
                    result[cur] = length
                    cur = edges[cur]

                result[cur] = length
                visited[cur] = 1

        def dfs(node):
            if  result[node] == 0:
                dest = edges[node]
                result[node] = 1 + dfs(dest)

            return result[node]

        for i in range(n):
            if result[i] == 0:
                dfs(i)

        return result