1334. Find the City With the Smallest Number of Neighbors at a Threshold Distance
Solved
Medium
Topics
Companies
Hint
There are n cities numbered from 0 to n-1. Given the array edges where edges[i] = [fromi, toi, weighti] represents a bidirectional and weighted edge between cities fromi and toi, and given the integer distanceThreshold.

Return the city with the smallest number of cities that are reachable through some path and whose distance is at most distanceThreshold, If there are multiple such cities, return the city with the greatest number.

Notice that the distance of a path connecting cities i and j is equal to the sum of the edges' weights along that path.

 

Example 1:


Input: n = 4, edges = [[0,1,3],[1,2,1],[1,3,4],[2,3,1]], distanceThreshold = 4
Output: 3
Explanation: The figure above describes the graph. 
The neighboring cities at a distanceThreshold = 4 for each city are:
City 0 -> [City 1, City 2] 
City 1 -> [City 0, City 2, City 3] 
City 2 -> [City 0, City 1, City 3] 
City 3 -> [City 1, City 2] 
Cities 0 and 3 have 2 neighboring cities at a distanceThreshold = 4, but we have to return city 3 since it has the greatest number.
Example 2:


Input: n = 5, edges = [[0,1,2],[0,4,8],[1,2,3],[1,4,2],[2,3,1],[3,4,1]], distanceThreshold = 2
Output: 0
Explanation: The figure above describes the graph. 
The neighboring cities at a distanceThreshold = 2 for each city are:
City 0 -> [City 1] 
City 1 -> [City 0, City 4] 
City 2 -> [City 3, City 4] 
City 3 -> [City 2, City 4]
City 4 -> [City 1, City 2, City 3] 
The city 0 has 1 neighboring city at a distanceThreshold = 2.
 

Constraints:

2 <= n <= 100
1 <= edges.length <= n * (n - 1) / 2
edges[i].length == 3
0 <= fromi < toi < n
1 <= weighti, distanceThreshold <= 10^4
All pairs (fromi, toi) are distinct.


Solution 1: Floyd-Warshall Algorithm

class Solution:
    def findTheCity(self, n: int, edges: List[List[int]], distanceThreshold: int) -> int:
        dist = [[float('inf') for _ in range(n)] for _ in range(n)]

        for i in range(n):
            dist[i][i] = 0

        for u, v, w in edges:
            dist[u][v] = min(dist[u][v], w)
            dist[v][u] = min(dist[v][u], w)

        for k in range(n):
            for i in range(n):
                if dist[i][k] != float('inf'):
                    for j in range(n):
                        if dist[k][j] != float('inf'):
                            dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])

        least_count = n
        result = -1

        for i in range(n):
            count = 0
            for j in range(n):
                if i == j:
                    continue
                if dist[i][j] <= distanceThreshold:
                    count += 1

            if count <= least_count:
                least_count = count
                result = i

        return result


Solution 2: Dijkstra's Algorithm

class Solution:
    def findTheCity(self, n: int, edges: List[List[int]], distanceThreshold: int) -> int:
        def dijkstra(start):
            distances = [float('inf')] * n
            distances[start] = 0
            min_heap = [(0, start)]

            while min_heap:
                current_dist, u = heapq.heappop(min_heap)

                if current_dist > distances[u]:
                    continue

                for v, w in adj[u]:
                    if distances[u] + w < distances[v]:
                        distances[v] = distances[u] + w
                        heapq.heappush(min_heap, (distances[v], v))

            return distances

        adj = [[] for _ in range(n)]
        for u, v, w in edges:
            adj[u].append((v, w))
            adj[v].append((u, w))

        min_count = n
        result = -1

        for i in range(n):
            distances = dijkstra(i)
            count = sum(1 for dist in distances if dist <= distanceThreshold)

            if count <= min_count:
                min_count = count
                result = i

        return result


Solution 3: Bellman-Ford

class Solution:
    def findTheCity(self, n: int, edges: List[List[int]], distanceThreshold: int) -> int:
        
        def bellmanFord(start):
            dist = [float('inf')] * n
            dist[start] = 0
            
            for i in range(n-1):
                updated = False
                for u, v, w in edges:
                    if dist[u] != float('inf') and dist[u] + w < dist[v]:
                        dist[v] = dist[u] + w
                        updated = True
                    if dist[v] != float('inf') and dist[v] + w < dist[u]:
                        dist[u] = dist[v] + w
                        updated = True
                if not updated:
                    break
            return dist

        min_count = n
        result = -1

        for i in range(n):
            distances = bellmanFord(i)
            count = sum(1 for dist in distances if dist <= distanceThreshold)

            if count <= min_count:
                min_count = count
                result = i

        return result