3186. Maximum Total Damage With Spell Casting
Solved
Medium
Topics
Companies
Hint
A magician has various spells.

You are given an array power, where each element represents the damage of a spell. Multiple spells can have the same damage value.

It is a known fact that if a magician decides to cast a spell with a damage of power[i], they cannot cast any spell with a damage of power[i] - 2, power[i] - 1, power[i] + 1, or power[i] + 2.

Each spell can be cast only once.

Return the maximum possible total damage that a magician can cast.

 

Example 1:

Input: power = [1,1,3,4]

Output: 6

Explanation:

The maximum possible damage of 6 is produced by casting spells 0, 1, 3 with damage 1, 1, 4.

Example 2:

Input: power = [7,1,6,6]

Output: 13

Explanation:

The maximum possible damage of 13 is produced by casting spells 1, 2, 3 with damage 1, 6, 6.

 

Constraints:

1 <= power.length <= 105
1 <= power[i] <= 109


Solution 1:

class Solution:
    def maximumTotalDamage(self, power: List[int]) -> int:
        freq = Counter(power)
        uni = sorted(freq.keys())
        n = len(uni)
        dp = [-1] * n

        def solve(i):
            if i == n:
                return 0

            if dp[i] != -1:
                return dp[i]
            
            notTake = solve(i + 1)
            j = i + 1
            while j < n and uni[j] - uni[i] <= 2:
                j += 1
            take = uni[i] * freq[uni[i]]
            if j < n:
                take += solve(j)
            
            dp[i] = max(take, notTake)
            return dp[i]

        return solve(0)


Solution 2:

class Solution:
    def maximumTotalDamage(self, power: List[int]) -> int:
        freq = Counter(power)
        uni = sorted(freq.keys())
        n = len(uni)
        dp = [0] * n
        dp[0] = uni[0] * freq[uni[0]]

        for i in range(1, n):
            j = i - 1
            while j >= 0 and uni[i] - uni[j] <= 2:
                j -= 1

            dp[i] = uni[i] * freq[uni[i]]
            if j >= 0:
                dp[i] += dp[j]
            
            dp[i] = max(dp[i], dp[i - 1])

        return dp[-1]


Solution 3:

class Solution:
    def maximumTotalDamage(self, power: List[int]) -> int:
        freq = Counter(power)
        uni = sorted(freq.keys())
        n = len(uni)
        dp = [0] * n
        dp[0] = uni[0] * freq[uni[0]]

        for i in range(1, n):
            j = bisect_left(uni, uni[i] - 2) - 1

            dp[i] = uni[i] * freq[uni[i]]
            if j >= 0:
                dp[i] += dp[j]
            
            dp[i] = max(dp[i], dp[i - 1])

        return dp[-1]


Solution 4:

class Solution:
    def maximumTotalDamage(self, power: List[int]) -> int:
        freq = Counter(power)
        uni = sorted(freq.keys())
        n = len(uni)
        dp = [0] * 3
        dp[0] = uni[0] * freq[uni[0]]

        for i in range(1, n):
            j = i - 1
            while j >= 0 and uni[i] - uni[j] <= 2:
                j -= 1

            next_val = uni[i] * freq[uni[i]]
            if j >= 0:
                next_val += dp[j % 3]
            next_val = max(next_val, dp[(i - 1) % 3])
            dp[i % 3] = next_val

        return dp[(n - 1) % 3]