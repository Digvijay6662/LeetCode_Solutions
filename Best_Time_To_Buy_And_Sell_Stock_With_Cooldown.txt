309. Best Time to Buy and Sell Stock with Cooldown
Medium
8.6K
285
Companies
You are given an array prices where prices[i] is the price of a given stock on the ith day.

Find the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times) with the following restrictions:

After you sell your stock, you cannot buy stock on the next day (i.e., cooldown one day).
Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

 

Example 1:

Input: prices = [1,2,3,0,2]
Output: 3
Explanation: transactions = [buy, sell, cooldown, buy, sell]
Example 2:

Input: prices = [1]
Output: 0
 

Constraints:

1 <= prices.length <= 5000
0 <= prices[i] <= 1000


Solution 1:

class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        n = len(prices)

        @cache
        def solve(i, buy):
            if i >= n:
                return 0

            op1 = solve(i + 1, buy)

            op2 = 0

            if buy:
                op2 = -prices[i] + solve(i + 1, not buy)
            else:
                op2 = prices[i] + solve(i + 2, not buy)

            
            return max(op1, op2)


        return solve(0, True)


Solution 2:

class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        n = len(prices)
        dp = [[0, 0] for _ in range(n + 2)]
        
        for day in range(n + 1, -1, -1):
            for buy in range(2):
                ans = dp[day][buy]
                
                if day >= n:
                    ans = 0
                else:
                    op1 = dp[day + 1][buy]

                    op2 = 0  
                    if buy:
                        op2 = -prices[day] + dp[day + 1][0]
                    else:
                        op2 = prices[day] + dp[day + 2][1]
                    
                    ans = max(op1, op2)
                
                dp[day][buy] = ans

        return dp[0][1]


Solution 3:

class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        coolProfit, sellProfit, holdProfit = 0, 0, -float('inf')
        
        for price in prices:
            prevCoolProfit, prevSellProfit, prevHoldProfit = coolProfit, sellProfit, holdProfit
            
            coolProfit = max(prevCoolProfit, prevSellProfit)
            sellProfit = prevHoldProfit + price
            holdProfit = max(prevHoldProfit, prevCoolProfit - price)
        
        return max(sellProfit, coolProfit)

