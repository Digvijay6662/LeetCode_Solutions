1425. Constrained Subsequence Sum
Solved
Hard
Topics
Companies
Hint
Given an integer array nums and an integer k, return the maximum sum of a non-empty subsequence of that array such that for every two consecutive integers in the subsequence, nums[i] and nums[j], where i < j, the condition j - i <= k is satisfied.

A subsequence of an array is obtained by deleting some number of elements (can be zero) from the array, leaving the remaining elements in their original order.

 

Example 1:

Input: nums = [10,2,-10,5,20], k = 2
Output: 37
Explanation: The subsequence is [10, 2, 5, 20].
Example 2:

Input: nums = [-1,-2,-3], k = 1
Output: -1
Explanation: The subsequence must be non-empty, so we choose the largest number.
Example 3:

Input: nums = [10,-2,-10,-5,20], k = 2
Output: 23
Explanation: The subsequence is [10, -2, -5, 20].
 

Constraints:

1 <= k <= nums.length <= 105
-104 <= nums[i] <= 104


Solution 1:

class Solution:
    def constrainedSubsetSum(self, nums: List[int], k: int) -> int:
        n = len(nums)
        maxHeap = [(-nums[0], 0)]
        res = nums[0]
        
        for i in range(1, n):
            while i - maxHeap[0][1] > k:
                heapq.heappop(maxHeap)

            curr = max(0, -maxHeap[0][0]) + nums[i]
            res = max(res, curr)
            heapq.heappush(maxHeap, (-curr, i))

        return res


Solution 2:

class Solution:
    def constrainedSubsetSum(self, nums: List[int], k: int) -> int:
        n = len(nums)
        q = deque()
        dp = [0] * n

        for i in range(n):
            if q and i - q[0] > k:
                q.popleft()

            dp[i] = (dp[q[0]] if q else 0) + nums[i]

            while q and dp[q[-1]] < dp[i]:
                q.pop()

            if dp[i] > 0:
                q.append(i)

        return max(dp)

        