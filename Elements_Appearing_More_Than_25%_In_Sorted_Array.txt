1287. Element Appearing More Than 25% In Sorted Array
Easy
893
45
Companies
Given an integer array sorted in non-decreasing order, there is exactly one integer in the array that occurs more than 25% of the time, return that integer.

 

Example 1:

Input: arr = [1,2,2,6,6,6,6,7,10]
Output: 6
Example 2:

Input: arr = [1,1]
Output: 1
 

Constraints:

1 <= arr.length <= 104
0 <= arr[i] <= 105


Solution 1:

class Solution:
    def findSpecialInteger(self, arr: List[int]) -> int:
        n = len(arr)
        count = n // 4
        hashMap = defaultdict(int)

        for i in range(n):
            hashMap[arr[i]] += 1

            if hashMap[arr[i]] > count:
                return arr[i]


Solution 2:

class Solution:
    def findSpecialInteger(self, arr: List[int]) -> int:
        n = len(arr)
        count = n // 4

        for i in range(n):
            if arr[i] == arr[i + count]:
                return arr[i]


Solution 3:

class Solution:
    def findSpecialInteger(self, arr: List[int]) -> int:
        n = len(arr)
        
        for i in [n//4, n//2, 3*n//4, n]:
            if bisect.bisect_right(arr, arr[i]) - bisect.bisect_left(arr, arr[i]) > n//4:
                return arr[i]