368. Largest Divisible Subset
Solved
Medium
Topics
Companies
Given a set of distinct positive integers nums, return the largest subset answer such that every pair (answer[i], answer[j]) of elements in this subset satisfies:

answer[i] % answer[j] == 0, or
answer[j] % answer[i] == 0
If there are multiple solutions, return any of them.

 

Example 1:

Input: nums = [1,2,3]
Output: [1,2]
Explanation: [1,3] is also accepted.
Example 2:

Input: nums = [1,2,4,8]
Output: [1,2,4,8]
 

Constraints:

1 <= nums.length <= 1000
1 <= nums[i] <= 2 * 109
All the integers in nums are unique.


Solution 1:

class Solution:
    def largestDivisibleSubset(self, nums: List[int]) -> List[int]:
        if not nums:
            return []

        nums.sort()
        n = len(nums)

        dp = {}
        def solve(i, prev):
            if i == n:
                return []

            if (i, prev) in dp:
                return dp[(i, prev)]

            take = []
            if prev == -1 or nums[i] % prev == 0:
                take = solve(i + 1, nums[i]) + [nums[i]]

            notTake = solve(i + 1, prev)

            dp[(i, prev)] = take if len(take) > len(notTake) else notTake
            return dp[(i, prev)]

        return solve(0, -1)


Solution 2:

class Solution:
    def largestDivisibleSubset(self, nums: List[int]) -> List[int]:
        if not nums:
            return []

        nums.sort()
        n = len(nums)
        dp = [[None for _ in range(n)] for _ in range(n)]

        def solve(i, prev):
            if i == n:
                return []

            if dp[i][prev]:
                return dp[i][prev]

            take = []
            if prev == -1 or nums[i] % nums[prev] == 0:
                take = solve(i + 1, i) + [nums[i]]

            notTake = solve(i + 1, prev)

            dp[i][prev] = take if len(take) > len(notTake) else notTake
            return dp[i][prev]

        return solve(0, -1)


Solution 3:

class Solution:
    def largestDivisibleSubset(self, nums: List[int]) -> List[int]:
        if not nums:
            return []

        nums.sort()
        n = len(nums)
        dp = [1] * n  # Length of the largest divisible subset ending at index i
        prev = [-1] * n  # Previous index in the largest divisible subset

        max_len, max_idx = 1, 0  # Length and ending index of the largest divisible subset

        for i in range(1, n):
            for j in range(i):
                if nums[i] % nums[j] == 0 and dp[i] < dp[j] + 1:
                    dp[i] = dp[j] + 1
                    prev[i] = j

            if dp[i] > max_len:
                max_len = dp[i]
                max_idx = i

        result = []
        while max_idx != -1:
            result.append(nums[max_idx])
            max_idx = prev[max_idx]

        return result