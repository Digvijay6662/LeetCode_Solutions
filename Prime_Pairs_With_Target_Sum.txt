2761. Prime Pairs With Target Sum
Medium
139
19
Companies
You are given an integer n. We say that two integers x and y form a prime number pair if:

1 <= x <= y <= n
x + y == n
x and y are prime numbers
Return the 2D sorted list of prime number pairs [xi, yi]. The list should be sorted in increasing order of xi. If there are no prime number pairs at all, return an empty array.

Note: A prime number is a natural number greater than 1 with only two factors, itself and 1.

 

Example 1:

Input: n = 10
Output: [[3,7],[5,5]]
Explanation: In this example, there are two prime pairs that satisfy the criteria. 
These pairs are [3,7] and [5,5], and we return them in the sorted order as described in the problem statement.
Example 2:

Input: n = 2
Output: []
Explanation: We can show that there is no prime number pair that gives a sum of 2, so we return an empty array. 
 

Constraints:

1 <= n <= 106


Solution 1:

class Solution:
    def findPrimePairs(self, n: int) -> List[List[int]]:
        res = []
        primes = [True] * (n + 1)

        primes[0] = primes[1] = False
        p = 2
        while p * p <= n:
            if primes[p]:
                for i in range(p * p, n + 1, p):
                    primes[i] = False
            p += 1

        pnum = [num for num, p in enumerate(primes) if p]

        left = 0
        right = len(pnum) - 1
        while left <= right:
            psum = pnum[left] + pnum[right]
            if psum == n:
                res.append([pnum[left], pnum[right]])
                left += 1
                right -= 1
            elif psum < n:
                left += 1
            else:
                right -= 1

        return res
            
    
Solution 2:

class Solution:
    def findPrimePairs(self, n: int) -> List[List[int]]:
        res = []
        
        primes = [1 for _ in range(n + 1)]
        primes[0] = primes[1] = 0
        p = 2

        while p * p <= n:
            if primes[p]:
                for i in range(p ** 2, n + 1, p):
                    primes[i] = 0
            p += 1
        
        l, r = 2, n

        while l < r:
            if primes[l] and primes[n - l]:
                res.append([l, n - l])
                r = n - l
            l += 1

        return res


Solution 3:

class Solution:
    def findPrimePairs(self, n: int) -> List[List[int]]:
        res = []
        
        primes = [1] * (n + 1)
        primes[0] = primes[1] = 0

        p = 2
        while p * p <= n:
            if primes[p]:
                for i in range(p * p, n + 1, p):
                    primes[i] = 0
            p += 1
        
        for l in range(2, n // 2 + 1):
            if primes[l] and primes[n - l]:
                res.append([l, n - l])
        
        return res
    
    

